" CHECK THIS DIRECTORY INTO GITHUB!
"
" NOTE: I used mV to set a global mark in this file, so to edit it, use:
"   'V
"
" To reload it after making changes, use
"   :source %
"

colorscheme railscasts

set guifont=Monaco:h12
set guioptions-=T
set number
set columns=120
set lines=65
let mapleader=","

set shiftwidth=2  "number of spaces to use in each autoindent step
set tabstop=2     "two tab spaces
set softtabstop=2 "number of spaces to skip or insert when <BS>ing or <Tab>ing
set expandtab     "spaces instead of tabs for better cross-editor compatibility

set autoindent    "keep the indent when creating a new line
set smarttab      "use shiftwidth and softtabstop to insert or delete (on <BS>) blanks
set cindent       "recommended seting for automatic C-style indentation
set wrap
set linebreak     "wrap entire words, don't break them; much easier to read!
set laststatus=2  "show status line
set incsearch     "show partial matches while typing

" Turn on spell-checking in markdown and text. (Ben Orenstein)
:autocmd BufRead,BufNewFile *.textile,*.md,*.txt setlocal spell

" vim-ruby suggested options
set nocompatible
syntax on
filetype on
filetype indent on
filetype plugin on

" Pathogen
call pathogen#runtime_append_all_bundles()

" Fugitive: Add branch name to status line
" set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

" Execute current ruby file, saving it first
map <leader>. :set autowrite<CR>:! ruby %<CR>

" Keymaps
" Move between splits with <c-hjkl>"
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
" hashrocket in insert mode
imap <c-l> <space>=><space>

" Command-T
set wildignore+=*.swp,*.log

"
" Stephen Bach http://items.sjbach.com/319/configuring-vim-right
"

set scrolloff=3   "keep 3 spaces of context around the cursor at the window edge
" Store temp files in central location. Make sure to mkdir ~/.vim-tmp first!
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set visualbell "flash the screen instead of that annoying 'plonk!'


"
" End Stephen Bach
"

"
" PRACTICAL VIM
"

" Tip 72: Only use case-sensitive if a capital letter is included
set ignorecase
set smartcase

" Tip 102: Regenerates ctags for the project every time a file is saved
:autocmd BufWritePost * call system("ctags -R")

" Tip 109: Customize grep
set grepprg=ack\ --nogroup\ --column\ $*
set grepformat=%f:%l:%c:%m

"
" END PRACTICAL VIM
"

"
" Gary Bernhardt
"

" toggle between last buffers
nnoremap <leader><leader> <c-^>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPS TO JUMP TO SPECIFIC COMMAND-T TARGETS AND FILES
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>gr :topleft :split config/routes.rb<cr>
function! ShowRoutes()
  " Requires 'scratch' plugin
  :topleft 100 :split __Routes__
  " Make sure Vim doesn't write __Routes__ as a file
  :set buftype=nofile
  " Delete everything
  :normal 1GdG
  " Put routes output in buffer
  :0r! rake -s routes
  " Size window to number of lines (1 plus rake output length)
  :exec ":normal " . line("$") . "_ "
  " Move cursor to bottom
  :normal 1GG
  " Delete empty trailing line
  :normal dd
endfunction
map <leader>gR :call ShowRoutes()<cr>
map <leader>gv :CommandTFlush<cr>\|:CommandT app/views<cr>
map <leader>gc :CommandTFlush<cr>\|:CommandT app/controllers<cr>
map <leader>gm :CommandTFlush<cr>\|:CommandT app/models<cr>
map <leader>gh :CommandTFlush<cr>\|:CommandT app/helpers<cr>
map <leader>gl :CommandTFlush<cr>\|:CommandT lib<cr>
map <leader>gp :CommandTFlush<cr>\|:CommandT public<cr>
map <leader>gs :CommandTFlush<cr>\|:CommandT spec<cr>
map <leader>gf :CommandTFlush<cr>\|:CommandT features<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>
map <leader>gt :CommandTFlush<cr>\|:CommandTTag<cr>
map <leader>f :CommandTFlush<cr>\|:CommandT<cr>
map <leader>F :CommandTFlush<cr>\|:CommandT %%<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUNNING TESTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>T :call RunTestFile()<cr>
map <leader>t :call RunNearestTest()<cr>
map <leader>a :call RunTests('')<cr>
map <leader>c :w\|:!script/features<cr>
map <leader>w :w\|:!script/features --profile wip<cr>

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\)$') != -1
    if in_test_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number . " -b")
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    if match(a:filename, '\.feature$') != -1
        exec ":!script/features " . a:filename
    else
        if filereadable("script/test")
            exec ":!script/test " . a:filename
        elseif filereadable("Gemfile")
            exec ":!bundle exec rspec --color " . a:filename
        else
            exec ":!rspec --color " . a:filename
        end
    end
endfunction

"
" End Gary Bernhardt
"
