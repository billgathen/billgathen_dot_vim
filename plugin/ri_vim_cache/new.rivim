= new

(from ruby site)
=== Implementation from ACL
------------------------------------------------------------------------------
  new(list=nil, order = DENY_ALLOW)

------------------------------------------------------------------------------

Creates a new ACL from <tt>list</tt> with an evaluation <tt>order</tt> of
DENY_ALLOW or ALLOW_DENY.

An ACL <tt>list</tt> is an Array of "allow" or "deny" and an address or
address mask or "all" or "*" to match any address:

  %w[
    deny all
    allow 192.0.2.2
    allow 192.0.2.128/26
  ]


(from ruby site)
=== Implementation from ACL::ACLEntry
------------------------------------------------------------------------------
  new(str)

------------------------------------------------------------------------------

Creates a new entry using <tt>str</tt>.

<tt>str</tt> may be "*" or "all" to match any address, an IP address string to
match a specific address, an IP address mask per IPAddr, or one containing "*"
to match part of an IPv4 address.


(from ruby site)
=== Implementation from ACL::ACLList
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates an empty ACLList


(from gem actionpack-2.3.5)
=== Implementation from ActionController::Assertions::SelectorAssertions
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::Caching::Actions::ActionCachePath
------------------------------------------------------------------------------
  new(controller, options = {}, infer_extension = true)

------------------------------------------------------------------------------

When true, infer_extension will look up the cache path extension from the
request's path & format. This is desirable when reading and writing the cache,
but not when expiring the cache - expire_action should expire the same files
regardless of the request format.


(from gem actionpack-2.3.5)
=== Implementation from ActionController::Dispatcher
------------------------------------------------------------------------------
  new(output = $stdout, request = nil, response = nil)

------------------------------------------------------------------------------

DEPRECATE: Remove arguments, since they are only used by CGI


(from gem actionpack-2.3.5)
=== Implementation from ActionController::Failsafe
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::Http::Headers
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::Integration::Runner
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::Integration::Session
------------------------------------------------------------------------------
  new(app = nil)

------------------------------------------------------------------------------

Create and initialize a new Session instance.


(from gem rspec-rails-1.3.2)
=== Implementation from ActionController::IntegrationTest
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::MiddlewareStack
------------------------------------------------------------------------------
  new(*args, &block)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::MiddlewareStack::Middleware
------------------------------------------------------------------------------
  new(klass, *args, &block)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::ParamsParser
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::Reloader::BodyWrapper
------------------------------------------------------------------------------
  new(body, lock)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::Response
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::Routing::Optimisation::Optimiser
------------------------------------------------------------------------------
  new(route, kind)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::Routing::OptionalFormatSegment
------------------------------------------------------------------------------
  new(key = nil, options = {})

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::Session::AbstractStore
------------------------------------------------------------------------------
  new(app, options = {})

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::Session::AbstractStore::SessionHash
------------------------------------------------------------------------------
  new(by, env)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::Session::CookieStore
------------------------------------------------------------------------------
  new(app, options = {})

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::Session::MemCacheStore
------------------------------------------------------------------------------
  new(app, options = {})

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::StringCoercion
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::StringCoercion::UglyBody
------------------------------------------------------------------------------
  new(body)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::TestCase
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionController::TestUploadedFile
------------------------------------------------------------------------------
  new(path, content_type = Mime::TEXT, binary = false)

------------------------------------------------------------------------------


(from gem actionmailer-2.3.5)
=== Implementation from ActionMailer::NonInferrableMailerError
------------------------------------------------------------------------------
  new(name)

------------------------------------------------------------------------------


(from gem actionmailer-2.3.5)
=== Implementation from ActionMailer::Part
------------------------------------------------------------------------------
  new(params)

------------------------------------------------------------------------------

Create a new part from the given <tt>params</tt> hash. The valid params keys
correspond to the accessors.


(from gem actionpack-2.3.5)
=== Implementation from ActionView::Base
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionView::Base::ProxyModule
------------------------------------------------------------------------------
  new(receiver)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionView::Helpers::AtomFeedHelper::AtomBuilder
------------------------------------------------------------------------------
  new(xml)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionView::Helpers::AtomFeedHelper::AtomFeedBuilder
------------------------------------------------------------------------------
  new(xml, view, feed_options = {})

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionView::ReloadableTemplate
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionView::ReloadableTemplate::ReloadablePath
------------------------------------------------------------------------------
  new(path)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionView::Template
------------------------------------------------------------------------------
  new(template_path, load_path = nil)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionView::Template::EagerPath
------------------------------------------------------------------------------
  new(path)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionView::Template::Path
------------------------------------------------------------------------------
  new(path)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionView::TemplateHandler
------------------------------------------------------------------------------
  new(view = nil)

------------------------------------------------------------------------------


(from gem actionpack-2.3.5)
=== Implementation from ActionView::TestCase::TestController
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem activemodel-3.2.9)
=== Implementation from ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------


(from gem activemodel-3.2.9)
=== Implementation from ActiveModel::BlockValidator
------------------------------------------------------------------------------
  new(options, &block)

------------------------------------------------------------------------------


(from gem activemodel-3.2.9)
=== Implementation from ActiveModel::EachValidator
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------

Returns a new validator instance. All options will be available via the
<tt>options</tt> reader, however the <tt>:attributes</tt> option will be
removed and instead be made available through the <tt>attributes</tt> reader.


(from gem activemodel-3.2.9)
=== Implementation from ActiveModel::Errors
------------------------------------------------------------------------------
  new(base)

------------------------------------------------------------------------------

Pass in the instance of the object that is using the errors object.

  class Person
    def initialize
      @errors = ActiveModel::Errors.new(self)
    end
  end


(from gem activemodel-3.2.9)
=== Implementation from ActiveModel::MassAssignmentSecurity::LoggerSanitizer
------------------------------------------------------------------------------
  new(target)

------------------------------------------------------------------------------


(from gem activemodel-3.2.9)
=== Implementation from ActiveModel::MassAssignmentSecurity::Sanitizer
------------------------------------------------------------------------------
  new(target=nil)

------------------------------------------------------------------------------


(from gem activemodel-3.2.9)
=== Implementation from ActiveModel::Name
------------------------------------------------------------------------------
  new(klass, namespace = nil, name = nil)

------------------------------------------------------------------------------


(from gem activemodel-3.2.9)
=== Implementation from ActiveModel::Observer
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Start observing the declared classes and their subclasses.


(from gem activemodel-3.2.9)
=== Implementation from ActiveModel::ObserverArray
------------------------------------------------------------------------------
  new(model_class, *args)

------------------------------------------------------------------------------


(from gem activemodel-3.2.9)
=== Implementation from ActiveModel::Validations::AcceptanceValidator
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------


(from gem activemodel-3.2.9)
=== Implementation from ActiveModel::Validations::LengthValidator
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------


(from gem activemodel-3.2.9)
=== Implementation from ActiveModel::Validator
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------

Accepts options that will be made available through the <tt>options</tt>
reader.


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::AttributeAssignmentError
------------------------------------------------------------------------------
  new(message, exception, attribute)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::Base
------------------------------------------------------------------------------
  new(attributes = nil, options = {}) { |self| ... }

------------------------------------------------------------------------------

New objects can be instantiated as either empty (pass no construction
parameter) or pre-set with attributes but not yet saved (pass a hash with key
names matching the associated table column names). In both instances, valid
attribute keys are determined by the column names of the associated table --
hence you can't have attributes that aren't part of the table columns.

<tt>initialize</tt> respects mass-assignment security and accepts either
<tt>:as</tt> or <tt>:without_protection</tt> options in the <tt>options</tt>
parameter.

==== Examples
  # Instantiates a single new object
  User.new(:first_name => 'Jamie')

  # Instantiates a single new object using the :admin mass-assignment security role
  User.new({ :first_name => 'Jamie', :is_admin => true }, :as => :admin)

  # Instantiates a single new object bypassing mass-assignment security
  User.new({ :first_name => 'Jamie', :is_admin => true }, :without_protection => true)


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter
------------------------------------------------------------------------------
  new(connection, logger, connection_options, config)

------------------------------------------------------------------------------

FIXME: Make the first parameter more similar for the two adapters


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::ConnectionAdapters::ConnectionHandler
------------------------------------------------------------------------------
  new(pools = {})

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::ConnectionAdapters::ConnectionManagement
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::ConnectionAdapters::ConnectionPool
------------------------------------------------------------------------------
  new(spec)

------------------------------------------------------------------------------

Creates a new ConnectionPool object. <tt>spec</tt> is a
ConnectionSpecification object which describes database connection information
(e.g. adapter, host name, username, password, etc), as well as the maximum
size for this ConnectionPool.

The default ConnectionPool maximum size is 5.


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::ConnectionAdapters::Mysql2Adapter
------------------------------------------------------------------------------
  new(connection, logger, connection_options, config)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::ConnectionAdapters::MysqlAdapter
------------------------------------------------------------------------------
  new(connection, logger, connection_options, config)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool
------------------------------------------------------------------------------
  new(connection, max = 1000)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::ConnectionAdapters::PostgreSQLAdapter
------------------------------------------------------------------------------
  new(connection, logger, connection_parameters, config)

------------------------------------------------------------------------------

Initializes and connects a PostgreSQL adapter.


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool
------------------------------------------------------------------------------
  new(connection, max)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::ConnectionAdapters::SQLiteAdapter
------------------------------------------------------------------------------
  new(connection, logger, config)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::ConnectionAdapters::SQLiteAdapter::StatementPool
------------------------------------------------------------------------------
  new(connection, max)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::ConnectionAdapters::SQLiteAdapter::Version
------------------------------------------------------------------------------
  new(version_string)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::ConnectionAdapters::SchemaCache
------------------------------------------------------------------------------
  new(conn)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::ConnectionAdapters::StatementPool
------------------------------------------------------------------------------
  new(connection, max = 1000)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::ConnectionAdapters::Table
------------------------------------------------------------------------------
  new(table_name, base)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::ConnectionAdapters::TableDefinition
------------------------------------------------------------------------------
  new(base)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::DynamicFinderMatch
------------------------------------------------------------------------------
  new(finder, instantiator, bang, attribute_names)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::DynamicScopeMatch
------------------------------------------------------------------------------
  new(scope, attribute_names)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::Fixtures
------------------------------------------------------------------------------
  new(connection, table_name, class_name, fixture_path)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::Fixtures::File
------------------------------------------------------------------------------
  new(file)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::IdentityMap::Middleware
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::LogSubscriber
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::Migration
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::Migration::CommandRecorder
------------------------------------------------------------------------------
  new(delegate = nil)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::MigrationProxy
------------------------------------------------------------------------------
  new(name, version, filename, scope)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::MultiparameterAssignmentErrors
------------------------------------------------------------------------------
  new(errors)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::QueryCache
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::RecordInvalid
------------------------------------------------------------------------------
  new(record)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::Reflection::MacroReflection
------------------------------------------------------------------------------
  new(macro, name, options, active_record)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::Relation
------------------------------------------------------------------------------
  new(klass, table)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::Relation
------------------------------------------------------------------------------
  new(*args, &block)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::Result
------------------------------------------------------------------------------
  new(columns, rows)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::SessionStore::Session
------------------------------------------------------------------------------
  new(attributes = nil, options = {})

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::SessionStore::SqlBypass
------------------------------------------------------------------------------
  new(attributes)

------------------------------------------------------------------------------

Look for normal and marshaled data, self.find_by_session_id's way of telling
us to postpone unmarshaling until the data is requested. We need to handle a
normal data attribute in case of a new record.


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::StaleObjectError
------------------------------------------------------------------------------
  new(record, attempted_action)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::UnknownPrimaryKey
------------------------------------------------------------------------------
  new(model)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::Validations::UniquenessValidator
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------


(from gem activerecord-3.2.9)
=== Implementation from ActiveRecord::WrappedDatabaseException
------------------------------------------------------------------------------
  new(message, original_exception)

------------------------------------------------------------------------------


(from gem activeresource-2.3.5)
=== Implementation from ActiveResource::Base
------------------------------------------------------------------------------
  new(attributes = {})

------------------------------------------------------------------------------

Constructor method for new resources; the optional <tt>attributes</tt>
parameter takes a hash of attributes for the new resource.

==== Examples
  my_course = Course.new
  my_course.name = "Western Civilization"
  my_course.lecturer = "Don Trotter"
  my_course.save

  my_other_course = Course.new(:name => "Philosophy: Reason and Being", :lecturer => "Ralph Cling")
  my_other_course.save


(from gem activeresource-2.3.5)
=== Implementation from ActiveResource::Connection
------------------------------------------------------------------------------
  new(site, format = ActiveResource::Formats[:xml])

------------------------------------------------------------------------------

The <tt>site</tt> parameter is required and will set the <tt>site</tt>
attribute to the URI for the remote resource service.


(from gem activeresource-2.3.5)
=== Implementation from ActiveResource::Request
------------------------------------------------------------------------------
  new(method, path, body = nil, headers = {})

------------------------------------------------------------------------------


(from gem activeresource-2.3.5)
=== Implementation from ActiveResource::Response
------------------------------------------------------------------------------
  new(body, message = 200, headers = {})

------------------------------------------------------------------------------


(from gem activeresource-2.3.5)
=== Implementation from ActiveResource::SSLError
------------------------------------------------------------------------------
  new(message)

------------------------------------------------------------------------------


(from gem activeresource-2.3.5)
=== Implementation from ActiveResource::TimeoutError
------------------------------------------------------------------------------
  new(message)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::BacktraceCleaner
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::BufferedLogger
------------------------------------------------------------------------------
  new(log, level = DEBUG)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Cache::Entry
------------------------------------------------------------------------------
  new(value, options = {})

------------------------------------------------------------------------------

Create a new cache entry for the specified value. Options supported are
<tt>:compress</tt>, <tt>:compress_threshold</tt>, and <tt>:expires_in</tt>.


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Cache::FileStore
------------------------------------------------------------------------------
  new(cache_path, options = nil)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Cache::MemCacheStore
------------------------------------------------------------------------------
  new(*addresses)

------------------------------------------------------------------------------

Creates a new MemCacheStore object, with the given memcached server addresses.
Each address is either a host name, or a host-with-port string in the form of
"host_name:port". For example:

  ActiveSupport::Cache::MemCacheStore.new("localhost", "server-downstairs.localnetwork:8229")

If no addresses are specified, then MemCacheStore will connect to localhost
port 11211 (the default memcached port).

Instead of addresses one can pass in a MemCache-like object. For example:

  require 'memcached' # gem install memcached; uses C bindings to libmemcached
  ActiveSupport::Cache::MemCacheStore.new(Memcached::Rails.new("localhost:11211"))


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Cache::MemoryStore
------------------------------------------------------------------------------
  new(options = nil)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Cache::NullStore
------------------------------------------------------------------------------
  new(options = nil)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Cache::Store
------------------------------------------------------------------------------
  new(options = nil)

------------------------------------------------------------------------------

Create a new cache. The options will be passed to any write method calls
except for :namespace which can be used to set the global namespace for the
cache.


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Cache::Strategy::LocalCache::LocalStore
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Dependencies::ClassCache
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Dependencies::WatchStack
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

@watching is a stack of lists of constants being watched. For instance, if
parent.rb is autoloaded, the stack will look like [[Object]]. If parent.rb
then requires namespace/child.rb, the stack will look like [[Object],
[Namespace]].


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::FileUpdateChecker
------------------------------------------------------------------------------
  new(files, dirs={}, &block)

------------------------------------------------------------------------------

It accepts two parameters on initialization. The first is an array of files
and the second is an optional hash of directories. The hash must have
directories as keys and the value is an array of extensions to be watched
under that directory.

This method must also receive a block that will be called once a path changes.

== Implementation details

This particular implementation checks for added and updated files, but not
removed files. Directories lookup are compiled to a glob for performance.
Therefore, while someone can add new files to the <tt>files</tt> array after
initialization (and parts of Rails do depend on this feature), adding new
directories after initialization is not allowed.

Notice that other objects that implements FileUpdateChecker API may not even
allow new files to be added after initialization. If this is the case, we
recommend freezing the <tt>files</tt> after initialization to avoid changes
that won't make effect.


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::FileWatcher
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::FileWatcher::Backend
------------------------------------------------------------------------------
  new(path, watcher)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Gzip::Stream
------------------------------------------------------------------------------
  new(*)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::HashWithIndifferentAccess
------------------------------------------------------------------------------
  new(constructor = {})

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Inflector::Inflections
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::InheritableOptions
------------------------------------------------------------------------------
  new(parent = nil)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::JSON::Encoding::Encoder
------------------------------------------------------------------------------
  new(options = nil)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::LogSubscriber::TestHelper::MockLogger
------------------------------------------------------------------------------
  new(level = DEBUG)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::MessageEncryptor
------------------------------------------------------------------------------
  new(secret, options = {})

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::MessageVerifier
------------------------------------------------------------------------------
  new(secret, options = {})

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Multibyte::Chars
------------------------------------------------------------------------------
  new(string)

------------------------------------------------------------------------------

Creates a new Chars instance by wrapping <em>string</em>.


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Multibyte::Unicode::UnicodeDatabase
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Notifications::Event
------------------------------------------------------------------------------
  new(name, start, ending, transaction_id, payload)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Notifications::Fanout
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Notifications::Instrumenter
------------------------------------------------------------------------------
  new(notifier)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::OrderedHash
------------------------------------------------------------------------------
  new(*args, &block)

------------------------------------------------------------------------------

In MRI the Hash class is core and written in C. In particular, methods are
programmed with explicit C function calls and polymorphism is not honored.

For example, []= is crucial in this implementation to maintain the @keys array
but hash.c invokes rb_hash_aset() originally. This prevents method reuse
through inheritance and forces us to reimplement stuff.

For instance, we cannot use the inherited #merge! because albeit the algorithm
itself would work, our []= is not being called at all by the C code.


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::SafeBuffer
------------------------------------------------------------------------------
  new(*)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::SafeBuffer::SafeConcatError
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::TaggedLogging
------------------------------------------------------------------------------
  new(logger)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Testing::Performance::Benchmarker
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Testing::Performance::Metrics::Base
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Testing::Performance::Metrics::CpuTime
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Testing::Performance::Performer
------------------------------------------------------------------------------
  new(harness, metric)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Testing::Performance::Profiler
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Testing::ProxyTestResult
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::Testing::RemoteError
------------------------------------------------------------------------------
  new(exception)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::TimeWithZone
------------------------------------------------------------------------------
  new(utc_time, time_zone, local_time = nil, period = nil)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::TimeZone
------------------------------------------------------------------------------
  new(name, utc_offset = nil, tzinfo = nil)

------------------------------------------------------------------------------

Create a new TimeZone object with the given name and offset. The offset is the
number of seconds that this time zone is offset from UTC (GMT). Seconds were
chosen as the offset unit because that is the unit that Ruby uses to represent
time zone offsets (see Time#utc_offset).


(from gem addressable-2.3.2)
=== Implementation from Addressable::Template
------------------------------------------------------------------------------
  new(pattern)

------------------------------------------------------------------------------

Creates a new <tt>Addressable::Template</tt> object.

@param [#to_str] pattern The URI Template pattern.

@return [Addressable::Template] The initialized Template object.


(from gem addressable-2.3.2)
=== Implementation from Addressable::Template::MatchData
------------------------------------------------------------------------------
  new(uri, template, mapping)

------------------------------------------------------------------------------

Creates a new MatchData object. MatchData objects should never be instantiated
directly.

@param [Addressable::URI] uri
  The URI that the template was matched against.


(from gem addressable-2.3.2)
=== Implementation from Addressable::URI
------------------------------------------------------------------------------
  new(options={})

------------------------------------------------------------------------------

Creates a new uri object from component parts.

@option [String, #to_str] scheme The scheme component. @option [String,
#to_str] user The user component. @option [String, #to_str] password The
password component. @option [String, #to_str] userinfo
  The userinfo component. If this is supplied, the user and password
  components must be omitted.

@option [String, #to_str] host The host component. @option [String, #to_str]
port The port component. @option [String, #to_str] authority
  The authority component. If this is supplied, the user, password,
  userinfo, host, and port components must be omitted.

@option [String, #to_str] path The path component. @option [String, #to_str]
query The query component. @option [String, #to_str] fragment The fragment
component.

@return [Addressable::URI] The constructed URI object.


(from ruby site)
=== Implementation from Addrinfo
------------------------------------------------------------------------------
  Addrinfo.new(sockaddr)                             => addrinfo
  Addrinfo.new(sockaddr, family)                     => addrinfo
  Addrinfo.new(sockaddr, family, socktype)           => addrinfo
  Addrinfo.new(sockaddr, family, socktype, protocol) => addrinfo

------------------------------------------------------------------------------

returns a new instance of Addrinfo. The instance contains sockaddr, family,
socktype, protocol. sockaddr means struct sockaddr which can be used for
connect(2), etc. family, socktype and protocol are integers which is used for
arguments of socket(2).

sockaddr is specified as an array or a string. The array should be compatible
to the value of IPSocket#addr or UNIXSocket#addr. The string should be struct
sockaddr as generated by Socket.sockaddr_in or Socket.unpack_sockaddr_un.

sockaddr examples:

"AF_INET", 46102, "localhost.localdomain", "127.0.0.1":

"AF_INET6", 42304, "ip6-localhost", "::1":

"AF_UNIX", "/tmp/sock":
* Socket.sockaddr_in("smtp", "2001:DB8::1")
* Socket.sockaddr_in(80, "172.18.22.42")
* Socket.sockaddr_in(80, "www.ruby-lang.org")
* Socket.sockaddr_un("/tmp/sock")

In an AF_INET/AF_INET6 sockaddr array, the 4th element, numeric IP address, is
used to construct socket address in the Addrinfo instance. If the 3rd element,
textual host name, is non-nil, it is also recorded but used only for
Addrinfo#inspect.

family is specified as an integer to specify the protocol family such as
Socket::PF_INET. It can be a symbol or a string which is the constant name
with or without PF_ prefix such as :INET, :INET6, :UNIX, "PF_INET", etc. If
omitted, PF_UNSPEC is assumed.

socktype is specified as an integer to specify the socket type such as
Socket::SOCK_STREAM. It can be a symbol or a string which is the constant name
with or without SOCK_ prefix such as :STREAM, :DGRAM, :RAW, "SOCK_STREAM",
etc. If omitted, 0 is assumed.

protocol is specified as an integer to specify the protocol such as
Socket::IPPROTO_TCP. It must be an integer, unlike family and socktype. If
omitted, 0 is assumed. Note that 0 is reasonable value for most protocols,
except raw socket.


(from gem albino-1.3.3)
=== Implementation from Albino
------------------------------------------------------------------------------
  new(target, lexer = :text, format = :html, encoding = self.class.default_encoding)

------------------------------------------------------------------------------


(from gem albino-1.3.3)
=== Implementation from Albino::Multi
------------------------------------------------------------------------------
  new(target, lexer = :text, *args)

------------------------------------------------------------------------------

This method accepts two forms of input:

DEFAULT

target - The Array of two-element [lexer, code] Arrays:
  lexer - The String lexer for the upcoming block of code.
  code  - The String block of code to highlight.

LEGACY

target - The String block of code to highlight. lexer  - The String lexer for
the block of code.

Albino#initialize also takes format and encoding which are ignored.


(from gem activerecord-3.2.9)
=== Implementation from ArJdbcMySQL::Error
------------------------------------------------------------------------------
  new(msg)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::DeleteManager
------------------------------------------------------------------------------
  new(engine)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::InsertManager
------------------------------------------------------------------------------
  new(engine)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::Addition
------------------------------------------------------------------------------
  new(left, right)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::And
------------------------------------------------------------------------------
  new(children, right = nil)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::Binary
------------------------------------------------------------------------------
  new(left, right)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::Count
------------------------------------------------------------------------------
  new(expr, distinct = false, aliaz = nil)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::DeleteStatement
------------------------------------------------------------------------------
  new(relation = nil, wheres = [])

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::Division
------------------------------------------------------------------------------
  new(left, right)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::Function
------------------------------------------------------------------------------
  new(expr, aliaz = nil)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::InfixOperation
------------------------------------------------------------------------------
  new(operator, left, right)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::InsertStatement
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::JoinSource
------------------------------------------------------------------------------
  new(single_source, joinop = [])

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::Multiplication
------------------------------------------------------------------------------
  new(left, right)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::NamedFunction
------------------------------------------------------------------------------
  new(name, expr, aliaz = nil)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::SelectCore
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::SelectStatement
------------------------------------------------------------------------------
  new(cores = [SelectCore.new])

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::StringJoin
------------------------------------------------------------------------------
  new(left, right = nil)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::Subtraction
------------------------------------------------------------------------------
  new(left, right)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::Unary
------------------------------------------------------------------------------
  new(expr)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::UpdateStatement
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Nodes::Values
------------------------------------------------------------------------------
  new(exprs, columns = [])

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::SelectManager
------------------------------------------------------------------------------
  new(engine, table = nil)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Sql::Engine
------------------------------------------------------------------------------
  new(thing)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Table
------------------------------------------------------------------------------
  new(name, engine = Table.engine)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::TreeManager
------------------------------------------------------------------------------
  new(engine)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::UpdateManager
------------------------------------------------------------------------------
  new(engine)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Visitors::BindVisitor
------------------------------------------------------------------------------
  new(target)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Visitors::DepthFirst
------------------------------------------------------------------------------
  new(block = nil)

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Visitors::Dot
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem arel-3.0.2)
=== Implementation from Arel::Visitors::ToSql
------------------------------------------------------------------------------
  new(connection)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Array
------------------------------------------------------------------------------
  Array.new(size=0, obj=nil)
  Array.new(array)
  Array.new(size) {|index| block }

------------------------------------------------------------------------------

Returns a new array.

In the first form, if no arguments are sent, the new array will be empty. When
a <tt>size</tt> and an optional <tt>obj</tt> are sent, an array is created
with <tt>size</tt> copies of <tt>obj</tt>.  Take notice that all elements will
reference the same object <tt>obj</tt>.

The second form creates a copy of the array passed as a parameter (the array
is generated by calling to_ary on the parameter).

  first_array = ["Matz", "Guido"]

  second_array = Array.new(first_array) #=> ["Matz", "Guido"]

  first_array.equal? second_array       #=> false

In the last form, an array of the given size is created.  Each element in this
array is created by passing the element's index to the given block and storing
the return value.

  Array.new(3){ |index| index ** 2 }
  # => [0, 1, 4]

== Common gotchas

When sending the second parameter, the same object will be used as the value
for all the array elements:

  a = Array.new(2, Hash.new)
  # => [{}, {}]

  a[0]['cat'] = 'feline'
  a # => [{"cat"=>"feline"}, {"cat"=>"feline"}]

  a[1]['cat'] = 'Felix'
  a # => [{"cat"=>"Felix"}, {"cat"=>"Felix"}]

Since all the Array elements store the same hash, changes to one of them will
affect them all.

If multiple copies are what you want, you should use the block version which
uses the result of that block each time an element of the array needs to be
initialized:

  a = Array.new(2) { Hash.new }
  a[0]['cat'] = 'feline'
  a # => [{"cat"=>"feline"}, {}]


(from gem artii-2.0.3)
=== Implementation from Artii::Base
------------------------------------------------------------------------------
  new(params={})

------------------------------------------------------------------------------


(from gem artii-2.0.3)
=== Implementation from Artii::CLI
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem artii-2.0.3)
=== Implementation from Artii::Figlet::Font
------------------------------------------------------------------------------
  new(filename, load_german = true)

------------------------------------------------------------------------------


(from gem artii-2.0.3)
=== Implementation from Artii::Figlet::Smusher
------------------------------------------------------------------------------
  new(font)

------------------------------------------------------------------------------


(from gem artii-2.0.3)
=== Implementation from Artii::Figlet::Typesetter
------------------------------------------------------------------------------
  new(font, options = nil)

------------------------------------------------------------------------------


(from gem ZenTest-4.7.0)
=== Implementation from Autotest
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Initialize the instance and then load the user's .autotest file, if any.


(from gem rspec-core-2.12.1)
=== Implementation from Autotest::Rspec2
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from BasicObject
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Not documented


(from ruby site)
=== Implementation from Benchmark::Tms
------------------------------------------------------------------------------
  new(utime = 0.0, stime = 0.0, cutime = 0.0, cstime = 0.0, real = 0.0, label = nil)

------------------------------------------------------------------------------

Returns an initialized Tms object which has <em>utime</em> as the user CPU
time, <em>stime</em> as the system CPU time, <em>cutime</em> as the children's
user CPU time, <em>cstime</em> as the children's system CPU time,
<em>real</em> as the elapsed real time and <em>label</em> as the label.


(from ruby site)
=== Implementation from BigDecimal
------------------------------------------------------------------------------
  new(initial, digits)

------------------------------------------------------------------------------

Create a new BigDecimal object.

initial:
  The initial value, as an Integer, a Float, a Rational, a BigDecimal, or a
  String. If it is a String, spaces are ignored and unrecognized characters
  terminate the value.


digits:
  The number of significant digits, as a Fixnum. If omitted or 0, the number
  of significant digits is determined from the initial value.


The actual number of significant digits used in computation is usually larger
than the specified number.


(from gem bourbon-1.4.0)
=== Implementation from Bourbon::Generator
------------------------------------------------------------------------------
  new(arguments)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from BufferedTokenizer
------------------------------------------------------------------------------
  new(delimiter = "\n", size_limit = nil)

------------------------------------------------------------------------------

@param [String] delimiter @param [Integer] size_limit


(from gem builder-3.0.4)
=== Implementation from Builder::XmlBase
------------------------------------------------------------------------------
  new(indent=0, initial=0, encoding='utf-8')

------------------------------------------------------------------------------

Create an XML markup builder.

out:
  Object receiving the markup.  <tt>out</tt> must respond to <tt><<</tt>.

indent:
  Number of spaces used for indentation (0 implies no indentation and no line
  breaks).

initial:
  Level of initial indentation.

encoding:
  When <tt>encoding</tt> and $KCODE are set to 'utf-8' characters aren't
  converted to character entities in the output stream.



(from gem builder-3.0.4)
=== Implementation from Builder::XmlMarkup
------------------------------------------------------------------------------
  new(options={})

------------------------------------------------------------------------------

Create an XML markup builder.  Parameters are specified by an option hash.

:target=><em>target_object</em>:
  Object receiving the markup.  <tt>target_object</tt> must respond to the
  <tt><<(<em>a_string</em>)</tt> operator and return itself.  The default
  target is a plain string target.


:indent=><em>indentation</em>:
  Number of spaces used for indentation.  The default is no indentation and no
  line breaks.


:margin=><em>initial_indentation_level</em>:
  Amount of initial indentation (specified in levels, not spaces).


:escape_attrs=><em>OBSOLETE</em>:
  The :escape_attrs option is no longer supported by builder (and will be
  quietly ignored).  String attribute values are now automatically escaped. 
  If you need unescaped attribute values (perhaps you are using entities in
  the attribute values), then give the value as a Symbol.  This allows much
  finer control over escaping attribute values.



(from gem bundler-1.2.3)
=== Implementation from Bundler::CLI
------------------------------------------------------------------------------
  new(*)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::Definition
------------------------------------------------------------------------------
  new(lockfile, dependencies, sources, unlock, ruby_version = nil)

------------------------------------------------------------------------------

How does the new system work?
=== 

* Load information from Gemfile and Lockfile
* Invalidate stale locked specs
  * All specs from stale source are stale
  * All specs that are reachable only through a stale dependency are stale.
* If all fresh dependencies are satisfied by the locked specs, then we can try
  to resolve locally.


(from gem bundler-1.2.3)
=== Implementation from Bundler::DepProxy
------------------------------------------------------------------------------
  new(dep, platform)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::Dependency
------------------------------------------------------------------------------
  new(name, version, options = {}, &blk)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::Dsl
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::EndpointSpecification
------------------------------------------------------------------------------
  new(name, version, platform, dependencies)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::Environment
------------------------------------------------------------------------------
  new(root, definition)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::Fetcher
------------------------------------------------------------------------------
  new(remote_uri)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::GemHelper
------------------------------------------------------------------------------
  new(base = nil, name = nil)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::Graph
------------------------------------------------------------------------------
  new(env, output_file, show_version = false, show_requirements = false, output_format = "png")

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::Graph::GraphVizClient
------------------------------------------------------------------------------
  new(graph_instance)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::Index
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::LazySpecification
------------------------------------------------------------------------------
  new(name, version, platform, source = nil)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::LockfileParser
------------------------------------------------------------------------------
  new(lockfile)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::RemoteSpecification
------------------------------------------------------------------------------
  new(name, version, platform, spec_fetcher)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::Resolver
------------------------------------------------------------------------------
  new(index, source_requirements, base)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::Resolver::SpecGroup
------------------------------------------------------------------------------
  new(a)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::RubyVersion
------------------------------------------------------------------------------
  new(version, engine, engine_version)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::RubygemsIntegration
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::RubygemsIntegration::Ancient
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::RubygemsIntegration::Legacy
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::Settings
------------------------------------------------------------------------------
  new(root)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::Source::Git
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::Source::Git::GitProxy
------------------------------------------------------------------------------
  new(path, uri, ref, revision=nil, &allow)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::Source::Path
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::Source::Path::Installer
------------------------------------------------------------------------------
  new(spec, options = {})

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::Source::Rubygems
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::SpecSet
------------------------------------------------------------------------------
  new(specs)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::SystemRubyVersion
------------------------------------------------------------------------------
  new(*)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::UI::RGProxy
------------------------------------------------------------------------------
  new(ui)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::UI::Shell
------------------------------------------------------------------------------
  new(shell)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Bundler::VersionConflict
------------------------------------------------------------------------------
  new(conflicts, msg = nil)

------------------------------------------------------------------------------


(from gem rubycas-client-2.3.9)
=== Implementation from CASClient::Client
------------------------------------------------------------------------------
  new(conf = nil)

------------------------------------------------------------------------------


(from gem rubycas-client-2.3.9)
=== Implementation from CASClient::Logger
------------------------------------------------------------------------------
  new(logdev, shift_age = 0, shift_size = 1048576)

------------------------------------------------------------------------------


(from gem rubycas-client-2.3.9)
=== Implementation from CASClient::LoggerWrapper
------------------------------------------------------------------------------
  new(real_logger=nil)

------------------------------------------------------------------------------


(from gem rubycas-client-2.3.9)
=== Implementation from CASClient::LoginResponse
------------------------------------------------------------------------------
  new(http_response = nil, options={})

------------------------------------------------------------------------------


(from gem rubycas-client-2.3.9)
=== Implementation from CASClient::ProxyGrantingTicket
------------------------------------------------------------------------------
  new(ticket, iou)

------------------------------------------------------------------------------


(from gem rubycas-client-2.3.9)
=== Implementation from CASClient::ProxyResponse
------------------------------------------------------------------------------
  new(raw_text, options={})

------------------------------------------------------------------------------


(from gem rubycas-client-2.3.9)
=== Implementation from CASClient::ServiceTicket
------------------------------------------------------------------------------
  new(ticket, service, renew = false)

------------------------------------------------------------------------------


(from gem rubycas-client-2.3.9)
=== Implementation from CASClient::Tickets::Storage::ActiveRecordTicketStore
------------------------------------------------------------------------------
  new(config={})

------------------------------------------------------------------------------


(from gem rubycas-client-2.3.9)
=== Implementation from CASClient::Tickets::Storage::ActiveRecordTicketStore
------------------------------------------------------------------------------
  new(config={})

------------------------------------------------------------------------------


(from gem rubycas-client-2.3.9)
=== Implementation from CASClient::Tickets::Storage::LocalDirTicketStore
------------------------------------------------------------------------------
  new(config={})

------------------------------------------------------------------------------


(from gem rubycas-client-2.3.9)
=== Implementation from CASClient::ValidationResponse
------------------------------------------------------------------------------
  new(raw_text, options={})

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from CGI
------------------------------------------------------------------------------
  CGI.new(tag_maker) { block }
  CGI.new(options_hash = {}) { block }

------------------------------------------------------------------------------

Create a new CGI instance.

<tt>tag_maker</tt>:
  This is the same as using the <tt>options_hash</tt> form with the value
  <tt>{ :tag_maker => tag_maker }</tt> Note that it is recommended to use the
  <tt>options_hash</tt> form, since it also allows you specify the charset you
  will accept.

<tt>options_hash</tt>:
  A Hash that recognizes two options:

  <tt>:accept_charset</tt>:
    specifies encoding of received query string.  If omitted,
    <tt>@@accept_charset</tt> is used.  If the encoding is not valid, a
    CGI::InvalidEncoding will be raised.

    Example. Suppose <tt>@@accept_charset</tt> is "UTF-8"

    when not specified:

      cgi=CGI.new      # @accept_charset # => "UTF-8"

    when specified as "EUC-JP":

      cgi=CGI.new(:accept_charset => "EUC-JP") # => "EUC-JP"


  <tt>:tag_maker</tt>:
    String that specifies which version of the HTML generation methods to use.
     If not specified, no HTML generation methods will be loaded.

    The following values are supported:

    "html3":
      HTML 3.x

    "html4":
      HTML 4.0

    "html4Tr":
      HTML 4.0 Transitional

    "html4Fr":
      HTML 4.0 with Framesets




<tt>block</tt>:
  If provided, the block is called when an invalid encoding is encountered.
  For example:

    encoding_errors={}
    cgi=CGI.new(:accept_charset=>"EUC-JP") do |name,value|
      encoding_errors[name] = value
    end


Finally, if the CGI object is not created in a standard CGI call environment
(that is, it can't locate REQUEST_METHOD in its environment), then it will run
in "offline" mode.  In this mode, it reads its parameters from the command
line or (failing that) from standard input.  Otherwise, cookies and other
parameters are parsed automatically from the standard CGI locations, which
varies according to the REQUEST_METHOD.


(from gem actionpack-2.3.5)
=== Implementation from CGI::Cookie
------------------------------------------------------------------------------
  new(name = '', *value)

------------------------------------------------------------------------------

Creates a new CGI::Cookie object.

The contents of the cookie can be specified as a <tt>name</tt> and one or more
<tt>value</tt> arguments.  Alternatively, the contents can be specified as a
single hash argument.  The possible keywords of this hash are as follows:

* <tt>:name</tt> - The name of the cookie.  Required.
* <tt>:value</tt> - The cookie's value or list of values.
* <tt>:path</tt> - The path for which this cookie applies.  Defaults to the
  base directory of the CGI script.
* <tt>:domain</tt> - The domain for which this cookie applies.
* <tt>:expires</tt> - The time at which this cookie expires, as a Time object.
* <tt>:secure</tt> - Whether this cookie is a secure cookie or not (defaults
  to <tt>false</tt>). Secure cookies are only transmitted to HTTPS servers.
* <tt>:http_only</tt> - Whether this cookie can be accessed by client side
  scripts (e.g. document.cookie) or only over HTTP. More details in
  http://msdn2.microsoft.com/en-us/library/system.web.httpcookie.httponly.aspx
  . Defaults to <tt>false</tt>. 

These keywords correspond to attributes of the cookie object.


(from ruby site)
=== Implementation from CGI::Cookie
------------------------------------------------------------------------------
  Cookie.new(name_string,*value)
  Cookie.new(options_hash)

------------------------------------------------------------------------------

Create a new CGI::Cookie object.

<tt>name_string</tt>:
  The name of the cookie; in this form, there is no #domain or #expiration. 
  The #path is gleaned from the <tt>SCRIPT_NAME</tt> environment variable, and
  #secure is false.

<tt>*value</tt>:
  value or list of values of the cookie

<tt>options_hash</tt>:
  A Hash of options to initialize this Cookie.  Possible options are:

  name:
    the name of the cookie.  Required.

  value:
    the cookie's value or list of values.

  path:
    the path for which this cookie applies.  Defaults to the the value of the
    <tt>SCRIPT_NAME</tt> environment variable.

  domain:
    the domain for which this cookie applies.

  expires:
    the time at which this cookie expires, as a <tt>Time</tt> object.

  secure:
    whether this cookie is a secure cookie or not (default to false).  Secure
    cookies are only transmitted to HTTPS servers.


  These keywords correspond to attributes of the cookie object.



(from ruby site)
=== Implementation from CGI::Session
------------------------------------------------------------------------------
  new(request, option={})

------------------------------------------------------------------------------

Create a new CGI::Session object for <tt>request</tt>.

<tt>request</tt> is an instance of the <tt>CGI</tt> class (see cgi.rb).
<tt>option</tt> is a hash of options for initialising this CGI::Session
instance.  The following options are recognised:

session_key:
  the parameter name used for the session id. Defaults to '_session_id'.

session_id:
  the session id to use.  If not provided, then it is retrieved from the
  <tt>session_key</tt> parameter of the request, or automatically generated
  for a new session.

new_session:
  if true, force creation of a new session.  If not set, a new session is only
  created if none currently exists.  If false, a new session is never created,
  and if none currently exists and the <tt>session_id</tt> option is not set,
  an ArgumentError is raised.

database_manager:
  the name of the class providing storage facilities for session state
  persistence.  Built-in support is provided for <tt>FileStore</tt> (the
  default), <tt>MemoryStore</tt>, and <tt>PStore</tt> (from
  cgi/session/pstore.rb).  See the documentation for these classes for more
  details.


The following options are also recognised, but only apply if the session id is
stored in a cookie.

session_expires:
  the time the current session expires, as a <tt>Time</tt> object.  If not
  set, the session will terminate when the user's browser is closed.

session_domain:
  the hostname domain for which this session is valid. If not set, defaults to
  the hostname of the server.

session_secure:
  if <tt>true</tt>, this session will only work over HTTPS.

session_path:
  the path for which this session applies.  Defaults to the directory of the
  CGI script.


<tt>option</tt> is also passed on to the session storage class initializer;
see the documentation for each session storage class for the options they
support.

The retrieved or created session is automatically added to <tt>request</tt> as
a cookie, and also to its <tt>output_hidden</tt> table, which is used to add
hidden input elements to forms.

<b>WARNING</b> the <tt>output_hidden</tt> fields are surrounded by a
<fieldset> tag in HTML 4 generation, which is <em>not</em> invisible on many
browsers; you may wish to disable the use of fieldsets with code similar to
the following (see
http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/37805)

  cgi = CGI.new("html4")
  class << cgi
      undef_method :fieldset
  end


(from ruby site)
=== Implementation from CGI::Session::FileStore
------------------------------------------------------------------------------
  new(session, option={})

------------------------------------------------------------------------------

Create a new FileStore instance.

This constructor is used internally by CGI::Session.  The user does not
generally need to call it directly.

<tt>session</tt> is the session for which this instance is being created.  The
session id must only contain alphanumeric characters; automatically generated
session ids observe this requirement.

<tt>option</tt> is a hash of options for the initializer.  The following
options are recognised:

tmpdir:
  the directory to use for storing the FileStore file.  Defaults to
  Dir::tmpdir (generally "/tmp" on Unix systems).

prefix:
  the prefix to add to the session id when generating the filename for this
  session's FileStore file. Defaults to "cgi_sid_".

suffix:
  the prefix to add to the session id when generating the filename for this
  session's FileStore file. Defaults to the empty string.


This session's FileStore file will be created if it does not exist, or opened
if it does.


(from ruby site)
=== Implementation from CGI::Session::MemoryStore
------------------------------------------------------------------------------
  new(session, option=nil)

------------------------------------------------------------------------------

Create a new MemoryStore instance.

<tt>session</tt> is the session this instance is associated with.
<tt>option</tt> is a list of initialisation options.  None are currently
recognised.


(from ruby site)
=== Implementation from CGI::Session::NullStore
------------------------------------------------------------------------------
  new(session, option=nil)

------------------------------------------------------------------------------

Create a new NullStore instance.

<tt>session</tt> is the session this instance is associated with.
<tt>option</tt> is a list of initialisation options.  None are currently
recognised.


(from ruby site)
=== Implementation from CGI::Session::PStore
------------------------------------------------------------------------------
  new(session, option={})

------------------------------------------------------------------------------

Create a new CGI::Session::PStore instance

This constructor is used internally by CGI::Session.  The user does not
generally need to call it directly.

<tt>session</tt> is the session for which this instance is being created.  The
session id must only contain alphanumeric characters; automatically generated
session ids observe this requirement.

<tt>option</tt> is a hash of options for the initializer.  The following
options are recognised:

tmpdir:
  the directory to use for storing the PStore file.  Defaults to Dir::tmpdir
  (generally "/tmp" on Unix systems).

prefix:
  the prefix to add to the session id when generating the filename for this
  session's PStore file. Defaults to the empty string.


This session's PStore file will be created if it does not exist, or opened if
it does.


(from gem chipmunk-5.3.4.5)
=== Implementation from CP::BodyStatic
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from CSV
------------------------------------------------------------------------------
  new(data, options = Hash.new)

------------------------------------------------------------------------------

This constructor will wrap either a String or IO object passed in
<tt>data</tt> for reading and/or writing.  In addition to the CSV instance
methods, several IO methods are delegated.  (See CSV::open() for a complete
list.)  If you pass a String for <tt>data</tt>, you can later retrieve it
(after writing to it, for example) with CSV.string().

Note that a wrapped String will be positioned at at the beginning (for
reading).  If you want it at the end (for writing), use CSV::generate(). If
you want any other positioning, pass a preset StringIO object instead.

You may set any reading and/or writing preferences in the <tt>options</tt>
Hash. Available options are:

<b><tt>:col_sep</tt></b>:
  The String placed between each field. This String will be transcoded into
  the data's Encoding before parsing.

<b><tt>:row_sep</tt></b>:
  The String appended to the end of each row.  This can be set to the special
  <tt>:auto</tt> setting, which requests that CSV automatically discover this
  from the data.  Auto-discovery reads ahead in the data looking for the next
  <tt>"\r\n"</tt>, <tt>"\n"</tt>, or <tt>"\r"</tt> sequence.  A sequence will
  be selected even if it occurs in a quoted field, assuming that you would
  have the same line endings there.  If none of those sequences is found,
  <tt>data</tt> is <tt>ARGF</tt>, <tt>STDIN</tt>, <tt>STDOUT</tt>, or
  <tt>STDERR</tt>, or the stream is only available for output, the default
  <tt>$INPUT_RECORD_SEPARATOR</tt> (<tt>$/</tt>) is used.  Obviously,
  discovery takes a little time.  Set manually if speed is important.  Also
  note that IO objects should be opened in binary mode on Windows if this
  feature will be used as the line-ending translation can cause problems with
  resetting the document position to where it was before the read ahead. This
  String will be transcoded into the data's Encoding before parsing.

<b><tt>:quote_char</tt></b>:
  The character used to quote fields. This has to be a single character
  String.  This is useful for application that incorrectly use <tt>'</tt> as
  the quote character instead of the correct <tt>"</tt>. CSV will always
  consider a double sequence this character to be an escaped quote. This
  String will be transcoded into the data's Encoding before parsing.

<b><tt>:field_size_limit</tt></b>:
  This is a maximum size CSV will read ahead looking for the closing quote for
  a field.  (In truth, it reads to the first line ending beyond this size.) 
  If a quote cannot be found within the limit CSV will raise a
  MalformedCSVError, assuming the data is faulty.  You can use this limit to
  prevent what are effectively DoS attacks on the parser.  However, this limit
  can cause a legitimate parse to fail and thus is set to <tt>nil</tt>, or
  off, by default.

<b><tt>:converters</tt></b>:
  An Array of names from the Converters Hash and/or lambdas that handle custom
  conversion.  A single converter doesn't have to be in an Array.  All
  built-in converters try to transcode fields to UTF-8 before converting. The
  conversion will fail if the data cannot be transcoded, leaving the field
  unchanged.

<b><tt>:unconverted_fields</tt></b>:
  If set to <tt>true</tt>, an unconverted_fields() method will be added to all
  returned rows (Array or CSV::Row) that will return the fields as they were
  before conversion.  Note that <tt>:headers</tt> supplied by Array or String
  were not fields of the document and thus will have an empty Array attached.

<b><tt>:headers</tt></b>:
  If set to <tt>:first_row</tt> or <tt>true</tt>, the initial row of the CSV
  file will be treated as a row of headers.  If set to an Array, the contents
  will be used as the headers. If set to a String, the String is run through a
  call of CSV::parse_line() with the same <tt>:col_sep</tt>,
  <tt>:row_sep</tt>, and <tt>:quote_char</tt> as this instance to produce an
  Array of headers.  This setting causes CSV#shift() to return rows as
  CSV::Row objects instead of Arrays and CSV#read() to return CSV::Table
  objects instead of an Array of Arrays.

<b><tt>:return_headers</tt></b>:
  When <tt>false</tt>, header rows are silently swallowed.  If set to
  <tt>true</tt>, header rows are returned in a CSV::Row object with identical
  headers and fields (save that the fields do not go through the converters).

<b><tt>:write_headers</tt></b>:
  When <tt>true</tt> and <tt>:headers</tt> is set, a header row will be added
  to the output.

<b><tt>:header_converters</tt></b>:
  Identical in functionality to <tt>:converters</tt> save that the conversions
  are only made to header rows.  All built-in converters try to transcode
  headers to UTF-8 before converting.  The conversion will fail if the data
  cannot be transcoded, leaving the header unchanged.

<b><tt>:skip_blanks</tt></b>:
  When set to a <tt>true</tt> value, CSV will skip over any rows with no
  content.

<b><tt>:force_quotes</tt></b>:
  When set to a <tt>true</tt> value, CSV will quote all CSV fields it creates.


See CSV::DEFAULT_OPTIONS for the default settings.

Options cannot be overridden in the instance methods for performance reasons,
so be sure to set what you want here.


(from ruby site)
=== Implementation from CSV::Row
------------------------------------------------------------------------------
  new(headers, fields, header_row = false)

------------------------------------------------------------------------------

Construct a new CSV::Row from <tt>headers</tt> and <tt>fields</tt>, which are
expected to be Arrays.  If one Array is shorter than the other, it will be
padded with <tt>nil</tt> objects.

The optional <tt>header_row</tt> parameter can be set to <tt>true</tt> to
indicate, via CSV::Row.header_row?() and CSV::Row.field_row?(), that this is a
header row.  Otherwise, the row is assumes to be a field row.

A CSV::Row object supports the following Array methods through delegation:

* empty?()
* length()
* size()


(from ruby site)
=== Implementation from CSV::Table
------------------------------------------------------------------------------
  new(array_of_rows)

------------------------------------------------------------------------------

Construct a new CSV::Table from <tt>array_of_rows</tt>, which are expected to
be CSV::Row objects.  All rows are assumed to have the same headers.

A CSV::Table object supports the following Array methods through delegation:

* empty?()
* length()
* size()


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::CLI
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------

Create a new CLI instance using the given array of command-line parameters to
initialize it. By default, <tt>ARGV</tt> is used, but you can specify a
different set of parameters (such as when embedded cap in a program):

  require 'capistrano/cli'
  Capistrano::CLI.parse(%W(-vvvv -f config/deploy update_code)).execute!

Note that you can also embed cap directly by creating a new Configuration
instance and setting it up, The above snippet, redone using the  Configuration
class directly, would look like:

  require 'capistrano'
  require 'capistrano/cli'
  config = Capistrano::Configuration.new
  config.logger.level = Capistrano::Logger::TRACE
  config.set(:password) { Capistrano::CLI.password_prompt }
  config.load "config/deploy"
  config.update_code

There may be times that you want/need the additional control offered by
manipulating the Configuration directly, but generally interfacing with the
CLI class is recommended.


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Callback
------------------------------------------------------------------------------
  new(source, options={})

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Command
------------------------------------------------------------------------------
  new(tree, sessions, options={}, &block)

------------------------------------------------------------------------------

Instantiates a new command object. The <tt>command</tt> must be a string
containing the command to execute. <tt>sessions</tt> is an array of Net::SSH
session instances, and <tt>options</tt> must be a hash containing any of the
following keys:

* <tt>logger</tt>: (optional), a Capistrano::Logger instance
* <tt>data</tt>: (optional), a string to be sent to the command via it's stdin
* <tt>env</tt>: (optional), a string or hash to be interpreted as environment
  variables that should be defined for this command invocation.


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Command::Tree
------------------------------------------------------------------------------
  new(config) { |self| ... }

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Command::Tree::Branch
------------------------------------------------------------------------------
  new(command, options, callback)

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Command::Tree::ConditionBranch
------------------------------------------------------------------------------
  new(configuration, condition, command, options, callback)

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Command::Tree::ConditionBranch::Evaluator
------------------------------------------------------------------------------
  new(config, condition, server)

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Configuration::Namespaces::Namespace
------------------------------------------------------------------------------
  new(name, parent)

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Deploy::Dependencies
------------------------------------------------------------------------------
  new(configuration) { |self| ... }

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Deploy::LocalDependency
------------------------------------------------------------------------------
  new(configuration)

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Deploy::RemoteDependency
------------------------------------------------------------------------------
  new(configuration)

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Deploy::SCM
------------------------------------------------------------------------------
  new(scm, config={})

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Deploy::SCM::Accurev::InternalRevision
------------------------------------------------------------------------------
  new(stream, transaction_id)

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Deploy::SCM::Base
------------------------------------------------------------------------------
  new(configuration={})

------------------------------------------------------------------------------

Creates a new SCM instance with the given configuration options.


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Deploy::SCM::Base::LocalProxy
------------------------------------------------------------------------------
  new(scm)

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Deploy::Strategy
------------------------------------------------------------------------------
  new(strategy, config={})

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Deploy::Strategy::Base
------------------------------------------------------------------------------
  new(config={})

------------------------------------------------------------------------------

Instantiates a strategy with a reference to the given configuration.


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Role
------------------------------------------------------------------------------
  new(*list)

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Role::DynamicServerList
------------------------------------------------------------------------------
  new(block, options)

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::ServerDefinition
------------------------------------------------------------------------------
  new(string, options={})

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Shell
------------------------------------------------------------------------------
  new(config)

------------------------------------------------------------------------------

Instantiate a new shell


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::TaskCallback
------------------------------------------------------------------------------
  new(config, source, options={})

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::TaskDefinition
------------------------------------------------------------------------------
  new(name, namespace, options={}, &block)

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Transfer
------------------------------------------------------------------------------
  new(direction, from, to, sessions, options={}, &block)

------------------------------------------------------------------------------


(from gem capistrano-2.13.5)
=== Implementation from Capistrano::Transfer::SFTPTransferWrapper
------------------------------------------------------------------------------
  new(session, &callback)

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::Driver::Node
------------------------------------------------------------------------------
  new(driver, native)

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::Driver::RackTest
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::Driver::Selenium
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::Node::Base
------------------------------------------------------------------------------
  new(session, base)

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::Node::Element
------------------------------------------------------------------------------
  new(session, base, parent, query)

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::Node::Simple
------------------------------------------------------------------------------
  new(native)

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::Query
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::RSpecMatchers::HaveSelector
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::RSpecMatchers::HaveText
------------------------------------------------------------------------------
  new(text)

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::RackTest::Browser
------------------------------------------------------------------------------
  new(driver)

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::RackTest::Driver
------------------------------------------------------------------------------
  new(app, options={})

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::RackTest::Form::NilUploadedFile
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::Result
------------------------------------------------------------------------------
  new(elements, query)

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::Selector
------------------------------------------------------------------------------
  new(name, &block)

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::Selenium::Driver
------------------------------------------------------------------------------
  new(app, options={})

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::Server
------------------------------------------------------------------------------
  new(app, port=Capybara.server_port)

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::Server::Middleware
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem capybara-2.0.1)
=== Implementation from Capybara::Session
------------------------------------------------------------------------------
  new(mode, app=nil)

------------------------------------------------------------------------------


(from gem childprocess-0.3.6)
=== Implementation from ChildProcess
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem childprocess-0.3.6)
=== Implementation from ChildProcess::AbstractProcess
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------

Create a new process with the given args.

@api private @see ChildProcess.build


(from gem childprocess-0.3.6)
=== Implementation from ChildProcess::JRuby::Process
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------


(from gem childprocess-0.3.6)
=== Implementation from ChildProcess::JRuby::Pump
------------------------------------------------------------------------------
  new(input, output)

------------------------------------------------------------------------------


(from gem childprocess-0.3.6)
=== Implementation from ChildProcess::MissingPlatformError
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem childprocess-0.3.6)
=== Implementation from ChildProcess::Tools::Generator
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem childprocess-0.3.6)
=== Implementation from ChildProcess::Unix::Lib::Attrs
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem childprocess-0.3.6)
=== Implementation from ChildProcess::Unix::Lib::FileActions
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem childprocess-0.3.6)
=== Implementation from ChildProcess::Unix::PosixSpawnProcess::Argv
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------


(from gem childprocess-0.3.6)
=== Implementation from ChildProcess::Unix::PosixSpawnProcess::Envp
------------------------------------------------------------------------------
  new(env)

------------------------------------------------------------------------------


(from gem childprocess-0.3.6)
=== Implementation from ChildProcess::Windows::Handle
------------------------------------------------------------------------------
  new(handle, pid)

------------------------------------------------------------------------------


(from gem childprocess-0.3.6)
=== Implementation from ChildProcess::Windows::ProcessBuilder
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------


(from gem childprocess-0.3.6)
=== Implementation from ChildProcess::Windows::SecurityAttributes
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Class
------------------------------------------------------------------------------
  Class.new(super_class=Object)               -> a_class
  Class.new(super_class=Object) { |mod| ... } -> a_class

------------------------------------------------------------------------------

Creates a new anonymous (unnamed) class with the given superclass (or
<tt>Object</tt> if no parameter is given). You can give a class a name by
assigning the class object to a constant.

If a block is given, it is passed the class object, and the block is evaluated
in the context of this class using <tt>class_eval</tt>.

  fred = Class.new do
    def meth1
      "hello"
    end
    def meth2
      "bye"
    end
  end

  a = fred.new     #=> #<#<Class:0x100381890>:0x100376b98>
  a.meth1          #=> "hello"
  a.meth2          #=> "bye"

Assign the class to a constant (name starting uppercase) if you want to treat
it like a regular class.


(from ruby site)
=== Implementation from Class
------------------------------------------------------------------------------
  class.new(args, ...)    ->  obj

------------------------------------------------------------------------------

Calls <tt>allocate</tt> to create a new object of <em>class</em>'s class, then
invokes that object's <tt>initialize</tt> method, passing it <em>args</em>.
This is the method that ends up getting called whenever an object is
constructed using .new.


(from gem classifier-1.3.3)
=== Implementation from Classifier::Bayes
------------------------------------------------------------------------------
  new(*categories)

------------------------------------------------------------------------------

The class can be created with one or more categories, each of which will be
initialized and given a training method. E.g., 
  b = Classifier::Bayes.new 'Interesting', 'Uninteresting', 'Spam'


(from gem classifier-1.3.3)
=== Implementation from Classifier::ContentNode
------------------------------------------------------------------------------
  new( word_hash, *categories )

------------------------------------------------------------------------------

If text_proc is not specified, the source will be duck-typed via source.to_s


(from gem classifier-1.3.3)
=== Implementation from Classifier::LSI
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------

Create a fresh index. If you want to call #build_index manually, use
  Classifier::LSI.new :auto_rebuild => false


(from gem classifier-1.3.3)
=== Implementation from Classifier::WordList
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem coderay-1.0.5)
=== Implementation from CodeRay::Duo
------------------------------------------------------------------------------
  new(lang = nil, format = nil, options = {})

------------------------------------------------------------------------------

Create a new Duo, holding a lang and a format to highlight code.

simple:
  CodeRay::Duo[:ruby, :html].highlight 'bla 42'

with options:
  CodeRay::Duo[:ruby, :html, :hint => :debug].highlight '????::??'

alternative syntax without options:
  CodeRay::Duo[:ruby => :statistic].encode 'class << self; end'

alternative syntax with options:
  CodeRay::Duo[{ :ruby => :statistic }, :do => :something].encode 'abc'

The options are forwarded to scanner and encoder (see
CodeRay.get_scanner_options).


(from gem coderay-1.0.5)
=== Implementation from CodeRay::Encoders::Debug
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------


(from gem coderay-1.0.5)
=== Implementation from CodeRay::Encoders::Encoder
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------

Creates a new Encoder. <tt>options</tt> is saved and used for all encode
operations, as long as you don't overwrite it there by passing additional
options.

Encoder objects provide three encode methods:
* encode simply takes a <tt>code</tt> string and a <tt>lang</tt>
* encode_tokens expects a <tt>tokens</tt> object instead

Each method has an optional <tt>options</tt> parameter. These are added to the
options you passed at creation.


(from gem coderay-1.0.5)
=== Implementation from CodeRay::Scanners::Scanner
------------------------------------------------------------------------------
  new(code = '', options = {})

------------------------------------------------------------------------------

Create a new Scanner.

* <tt>code</tt> is the input String and is handled by the superclass
  StringScanner.
* <tt>options</tt> is a Hash with Symbols as keys. It is merged with the
  default options of the class (you can overwrite default options here.)

Else, a Tokens object is used.


(from gem coderay-1.0.5)
=== Implementation from CodeRay::TokensProxy
------------------------------------------------------------------------------
  new(input, lang, options = {})

------------------------------------------------------------------------------

Create a new TokensProxy with the arguments of CodeRay.scan.


(from gem coderay-1.0.5)
=== Implementation from CodeRay::WordList
------------------------------------------------------------------------------
  new(default = false)

------------------------------------------------------------------------------

Create a new WordList with <tt>default</tt> as default value.


(from ruby site)
=== Implementation from CompositePublisher
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem rake-10.0.2)
=== Implementation from CompositePublisher
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from ConditionVariable
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a new ConditionVariable


(from ruby site)
=== Implementation from Curses::Window
------------------------------------------------------------------------------
  new(height, width, top, left)

------------------------------------------------------------------------------

Contruct a new Curses::Window with constraints of <tt>height</tt> lines,
<tt>width</tt> columns, begin at <tt>top</tt> line, and begin <tt>left</tt>
most column.

A new window using full screen is called as
  Curses::Window.new(0,0,0,0)


(from ruby site)
=== Implementation from DBM
------------------------------------------------------------------------------
  DBM.new(filename[, mode[, flags]]) -> dbm

------------------------------------------------------------------------------

Open a dbm database with the specified name, which can include a directory
path. Any file extensions needed will be supplied automatically by the dbm
library. For example, Berkeley DB appends '.db', and GNU gdbm uses two
physical files with extensions '.dir' and '.pag'.

The mode should be an integer, as for Unix chmod.

Flags should be one of READER, WRITER, WRCREAT or NEWDB.


(from ruby site)
=== Implementation from DEBUGGER__::Context
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from DL::CFunc
------------------------------------------------------------------------------
  DL::CFunc.new(address, type=DL::TYPE_VOID, name=nil, calltype=:cdecl)

------------------------------------------------------------------------------

Create a new function that points to <tt>address</tt> with an optional return
type of <tt>type</tt>, a name of <tt>name</tt> and a calltype of
<tt>calltype</tt>.


(from ruby site)
=== Implementation from DL::CPtr
------------------------------------------------------------------------------
  DL::CPtr.new(address)                   => dl_cptr
  DL::CPtr.new(address, size)             => dl_cptr
  DL::CPtr.new(address, size, freefunc)   => dl_cptr

------------------------------------------------------------------------------

Create a new pointer to <tt>address</tt> with an optional <tt>size</tt> and
<tt>freefunc</tt>. <tt>freefunc</tt> will be called when the instance is
garbage collected.


(from ruby site)
=== Implementation from DL::CStructEntity
------------------------------------------------------------------------------
  new(addr, types, func = nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from DL::CarriedFunction
------------------------------------------------------------------------------
  new(cfunc, argtypes, n)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from DL::CompositeHandler
------------------------------------------------------------------------------
  new(handlers)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from DL::Function
------------------------------------------------------------------------------
  new(cfunc, argtypes, abi = nil, &block)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from DL::Handle
------------------------------------------------------------------------------
  initialize(lib = nil, flags = DL::RTLD_LAZY | DL::RTLD_GLOBAL)

------------------------------------------------------------------------------

Create a new handler that opens library named <tt>lib</tt> with
<tt>flags</tt>.  If no library is specified, RTLD_DEFAULT is used.


(from ruby site)
=== Implementation from DL::Packer
------------------------------------------------------------------------------
  new(types)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from DL::Stack
------------------------------------------------------------------------------
  new(types)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from DRb::DRbArray
------------------------------------------------------------------------------
  new(ary)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from DRb::DRbObject
------------------------------------------------------------------------------
  new(obj, uri=nil)

------------------------------------------------------------------------------

Create a new remote object stub.

<tt>obj</tt> is the (local) object we want to create a stub for.  Normally
this is <tt>nil</tt>.  <tt>uri</tt> is the URI of the remote object that this
will be a stub for.


(from ruby site)
=== Implementation from DRb::DRbRemoteError
------------------------------------------------------------------------------
  new(error)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from DRb::DRbSSLSocket
------------------------------------------------------------------------------
  new(uri, soc, config, is_established)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from DRb::DRbSSLSocket::SSLConfig
------------------------------------------------------------------------------
  new(config)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from DRb::DRbServer
------------------------------------------------------------------------------
  new(uri=nil, front=nil, config_or_acl=nil)

------------------------------------------------------------------------------

Create a new DRbServer instance.

<tt>uri</tt> is the URI to bind to.  This is normally of the form
'druby://<hostname>:<port>' where <hostname> is a hostname of the local
machine.  If nil, then the system's default hostname will be bound to, on a
port selected by the system; these value can be retrieved from the
<tt>uri</tt> attribute.  'druby:' specifies the default dRuby transport
protocol: another protocol, such as 'drbunix:', can be specified instead.

<tt>front</tt> is the front object for the server, that is, the object to
which remote method calls on the server will be passed.  If nil, then the
server will not accept remote method calls.

If <tt>config_or_acl</tt> is a hash, it is the configuration to use for this
server.  The following options are recognised:

:idconv:
  an id-to-object conversion object.  This defaults to an instance of the
  class DRb::DRbIdConv.

:verbose:
  if true, all unsuccessful remote calls on objects in the server will be
  logged to $stdout. false by default.

:tcp_acl:
  the access control list for this server.  See the ACL class from the main
  dRuby distribution.

:load_limit:
  the maximum message size in bytes accepted by the server.  Defaults to 25 MB
  (26214400).

:argc_limit:
  the maximum number of arguments to a remote method accepted by the server. 
  Defaults to 256.


The default values of these options can be modified on a class-wide basis by
the class methods #default_argc_limit, #default_load_limit, #default_acl,
#default_id_conv, and #verbose=

If <tt>config_or_acl</tt> is not a hash, but is not nil, it is assumed to be
the access control list for this server. See the :tcp_acl option for more
details.

If no other server is currently set as the primary server, this will become
the primary server.

The server will immediately start running in its own thread.


(from ruby site)
=== Implementation from DRb::DRbTCPSocket
------------------------------------------------------------------------------
  new(uri, soc, config={})

------------------------------------------------------------------------------

Create a new DRbTCPSocket instance.

<tt>uri</tt> is the URI we are connected to. <tt>soc</tt> is the tcp socket we
are bound to.  <tt>config</tt> is our configuration.


(from ruby site)
=== Implementation from DRb::DRbUNIXSocket
------------------------------------------------------------------------------
  new(uri, soc, config={}, server_mode = false)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from DRb::DRbUnknown
------------------------------------------------------------------------------
  new(err, buf)

------------------------------------------------------------------------------

Create a new DRbUnknown object.

<tt>buf</tt> is a string containing a marshalled object that could not be
unmarshalled.  <tt>err</tt> is the error message that was raised when the
unmarshalling failed.  It is used to determine the name of the unmarshalled
object.


(from ruby site)
=== Implementation from DRb::DRbUnknownError
------------------------------------------------------------------------------
  new(unknown)

------------------------------------------------------------------------------

Create a new DRbUnknownError for the DRb::DRbUnknown object <tt>unknown</tt>


(from ruby site)
=== Implementation from DRb::ExtServ
------------------------------------------------------------------------------
  new(there, name, server=nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from DRb::ExtServManager
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from DRb::GW
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from DRb::TimerIdConv
------------------------------------------------------------------------------
  new(timeout=600)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from DRb::TimerIdConv::TimerHolder2
------------------------------------------------------------------------------
  new(timeout=600)

------------------------------------------------------------------------------


(from gem daemon_controller-1.1.0)
=== Implementation from DaemonController
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------

Create a new DaemonController object.

=== Mandatory options

:identifier:
  A human-readable, unique name for this daemon, e.g. "Sphinx search server".
  This identifier will be used in some error messages. On some platforms, it
  will be used for concurrency control: on such platforms, no two
  DaemonController objects will operate on the same identifier on the same
  time.


:start_command:
  The command to start the daemon. This must be a a String, e.g.
  "mongrel_rails start -e production", or a Proc which returns a String.

  If the value is a Proc, and the <tt>before_start</tt> option is given too,
  then the <tt>start_command</tt> Proc is guaranteed to be called after the
  <tt>before_start</tt> Proc is called.


:ping_command:
  The ping command is used to check whether the daemon can be connected to. It
  is also used to ensure that #start only returns when the daemon can be
  connected to.

  The value may be a command string. This command must exit with an exit code
  of 0 if the daemon can be successfully connected to, or exit with a non-0
  exit code on failure.

  The value may also be an Array which specifies the socket address of the
  daemon. It must be in one of the following forms:

:tcp, host_name, port:

:unix, filename:
  The value may also be a Proc, which returns an expression that evaluates to
  true (indicating that the daemon can be connected to) or false (failure). If
  the Proc raises Errno::ECONNREFUSED, Errno::ENETUNREACH, Errno::ETIMEDOUT
  Errno::ECONNRESET, Errno::EINVAL or Errno::EADDRNOTAVAIL then that also
  means that the daemon cannot be connected to. <b>NOTE:</b> if the ping
  command returns an object which responds to <tt>#close</tt>, then that
  method will be called on it. This makes it possible to specify a ping
  command such as <tt>lambda { TCPSocket.new('localhost', 1234) }</tt>,
  without having to worry about closing it afterwards. Any exceptions raised
  by #close are ignored.


:pid_file:
  The PID file that the daemon will write to. Used to check whether the daemon
  is running.


:lock_file:
  The lock file to use for serializing concurrent daemon management
  operations. Defaults to "(filename of PID file).lock".


:log_file:
  The log file that the daemon will write to. It will be consulted to see
  whether the daemon has printed any error messages during startup.


=== Optional options
:stop_command:
  A command to stop the daemon with, e.g. "/etc/rc.d/nginx stop". If no stop
  command is given (i.e. <tt>nil</tt>), then DaemonController will stop the
  daemon by killing the PID written in the PID file.

  The default value is <tt>nil</tt>.


:restart_command:
  A command to restart the daemon with, e.g. "/etc/rc.d/nginx restart". If no
  restart command is given (i.e. <tt>nil</tt>), then DaemonController will
  restart the daemon by calling #stop and #start.

  The default value is <tt>nil</tt>.


:before_start:
  This may be a Proc. It will be called just before running the start command.
  The before_start proc is not subject to the start timeout.


:start_timeout:
  The maximum amount of time, in seconds, that #start may take to start the
  daemon. Since #start also waits until the daemon can be connected to, that
  wait time is counted as well. If the daemon does not start in time, then
  #start will raise an exception.

  The default value is 15.


:stop_timeout:
  The maximum amount of time, in seconds, that #stop may take to stop the
  daemon. Since #stop also waits until the daemon is no longer running, that
  wait time is counted as well. If the daemon does not stop in time, then
  #stop will raise an exception.

  The default value is 15.


:log_file_activity_timeout:
  Once a daemon has gone into the background, it will become difficult to know
  for certain whether it is still initializing or whether it has failed and
  exited, until it has written its PID file. Suppose that it failed with an
  error after daemonizing but before it has written its PID file; not many
  system administrators want to wait 15 seconds (the default start timeout) to
  be notified of whether the daemon has terminated with an error.

  An alternative way to check whether the daemon has terminated with an error,
  is by checking whether its log file has been recently updated. If, after the
  daemon has started, the log file hasn't been updated for the amount of
  seconds given by the :log_file_activity_timeout option, then the daemon is
  assumed to have terminated with an error.

  The default value is 7.


:daemonize_for_me:
  Normally daemon_controller will wait until the daemon has daemonized into
  the background, in order to capture any errors that it may print on stdout
  or stderr before daemonizing. However, if the daemon doesn't support
  daemonization for some reason, then setting this option to true will cause
  daemon_controller to do the daemonization for the daemon.

  The default is false.


:keep_ios:
  Upon spawning the daemon, daemon_controller will normally close all file
  descriptors except stdin, stdout and stderr. However if there are any file
  descriptors you want to keep open, specify the IO objects here. This must be
  an array of IO objects.


:env:
  This must be a Hash.  The hash will contain the environment variables
  available to be made available to the daemon. Hash keys must be strings, not
  symbols.



(from gem daemon_controller-1.1.0)
=== Implementation from DaemonController::LockFile
------------------------------------------------------------------------------
  new(filename)

------------------------------------------------------------------------------

Create a LockFile object. The lock file is initially not locked.

<tt>filename</tt> may point to a nonexistant file. In that case, the lock file
will not be created until one's trying to obtain a lock.

Note that LockFile will use this exact filename. So if <tt>filename</tt> is a
relative filename, then the actual lock file that will be used depends on the
current working directory.


(from gem daemons-1.1.9)
=== Implementation from Daemons::Application
------------------------------------------------------------------------------
  new(group, add_options = {}, pid = nil)

------------------------------------------------------------------------------


(from gem daemons-1.1.9)
=== Implementation from Daemons::ApplicationGroup
------------------------------------------------------------------------------
  new(app_name, options = {})

------------------------------------------------------------------------------


(from gem daemons-1.1.9)
=== Implementation from Daemons::Controller
------------------------------------------------------------------------------
  new(options = {}, argv = [])

------------------------------------------------------------------------------


(from gem daemons-1.1.9)
=== Implementation from Daemons::Monitor
------------------------------------------------------------------------------
  new(an_app)

------------------------------------------------------------------------------


(from gem daemons-1.1.9)
=== Implementation from Daemons::Optparse
------------------------------------------------------------------------------
  new(controller)

------------------------------------------------------------------------------


(from gem daemons-1.1.9)
=== Implementation from Daemons::Pid
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Initialization method


(from gem daemons-1.1.9)
=== Implementation from Daemons::PidFile
------------------------------------------------------------------------------
  new(dir, progname, multiple = false)

------------------------------------------------------------------------------


(from gem daemons-1.1.9)
=== Implementation from Daemons::SystemError
------------------------------------------------------------------------------
  new(msg, system_error)

------------------------------------------------------------------------------


(from gem database_cleaner-0.9.1)
=== Implementation from DatabaseCleaner::Base
------------------------------------------------------------------------------
  new(desired_orm = nil,opts = {})

------------------------------------------------------------------------------


(from gem database_cleaner-0.9.1)
=== Implementation from DatabaseCleaner::CouchPotato::Truncation
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------


(from gem database_cleaner-0.9.1)
=== Implementation from DatabaseCleaner::Generic::Transaction
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------


(from gem database_cleaner-0.9.1)
=== Implementation from DatabaseCleaner::Generic::Truncation
------------------------------------------------------------------------------
  new(opts={})

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Date
------------------------------------------------------------------------------
  Date.civil([year=-4712[, month=1[, mday=1[, start=Date::ITALY]]]])  ->  date
  Date.new([year=-4712[, month=1[, mday=1[, start=Date::ITALY]]]])    ->  date

------------------------------------------------------------------------------

Creates a date object denoting the given calendar date.

In this class, BCE years are counted astronomically.  Thus, the year before
the year 1 is the year zero, and the year preceding the year zero is the year
-1.  The month and the day of month should be a negative or a positive number
(as a relative month/day from the end of year/month when negative).  They
should not be zero.

The last argument should be a Julian day number which denotes the day of
calendar reform.  Date::ITALY (2299161=1582-10-15), Date::ENGLAND
(2361222=1752-09-14), Date::GREGORIAN (the proleptic Gregorian calendar) and
Date::JULIAN (the proleptic Julian calendar) can be specified as a day of
calendar reform.

For example:

  Date.new(2001)            #=> #<Date: 2001-01-01 ...>
  Date.new(2001,2,3)        #=> #<Date: 2001-02-03 ...>
  Date.new(2001,2,-1)       #=> #<Date: 2001-02-28 ...>

See also jd.


(from ruby site)
=== Implementation from DateTime
------------------------------------------------------------------------------
  DateTime.civil([year=-4712[, month=1[, mday=1[, hour=0[, minute=0[, second=0[, offset=0[, start=Date::ITALY]]]]]]]])  ->  datetime
  DateTime.new([year=-4712[, month=1[, mday=1[, hour=0[, minute=0[, second=0[, offset=0[, start=Date::ITALY]]]]]]]])    ->  datetime

------------------------------------------------------------------------------

Creates a date-time object denoting the given calendar date.

For example:

  DateTime.new(2001,2,3)    #=> #<DateTime: 2001-02-03T00:00:00+00:00 ...>
  DateTime.new(2001,2,3,4,5,6,'+7')
                            #=> #<DateTime: 2001-02-03T04:05:06+07:00 ...>
  DateTime.new(2001,-11,-26,-20,-55,-54,'+7')
                            #=> #<DateTime: 2001-02-03T04:05:06+07:00 ...>


(from gem deckrb-0.3.0)
=== Implementation from Deck::RackApp
------------------------------------------------------------------------------
  new(slide_files)

------------------------------------------------------------------------------


(from gem deckrb-0.3.0)
=== Implementation from Deck::Slide
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Delegator
------------------------------------------------------------------------------
  new(obj)

------------------------------------------------------------------------------

Pass in the <em>obj</em> to delegate method calls to.  All methods supported
by <em>obj</em> will be delegated to.


(from gem diff-lcs-1.1.3)
=== Implementation from Diff::LCS::Block
------------------------------------------------------------------------------
  new(chunk)

------------------------------------------------------------------------------


(from gem diff-lcs-1.1.3)
=== Implementation from Diff::LCS::Change
------------------------------------------------------------------------------
  new(action, position, element)

------------------------------------------------------------------------------


(from gem diff-lcs-1.1.3)
=== Implementation from Diff::LCS::ContextChange
------------------------------------------------------------------------------
  new(action, old_position, old_element, new_position, new_element)

------------------------------------------------------------------------------


(from gem diff-lcs-1.1.3)
=== Implementation from Diff::LCS::DiffCallbacks
------------------------------------------------------------------------------
  new() { |self| ... }

------------------------------------------------------------------------------


(from gem diff-lcs-1.1.3)
=== Implementation from Diff::LCS::HTMLDiff
------------------------------------------------------------------------------
  new(left, right, options = nil)

------------------------------------------------------------------------------


(from gem diff-lcs-1.1.3)
=== Implementation from Diff::LCS::HTMLDiff::Callbacks
------------------------------------------------------------------------------
  new(output, options = {})

------------------------------------------------------------------------------


(from gem diff-lcs-1.1.3)
=== Implementation from Diff::LCS::Hunk
------------------------------------------------------------------------------
  new(data_old, data_new, piece, context, file_length_difference)

------------------------------------------------------------------------------

Create a hunk using references to both the old and new data, as well as the
piece of data


(from gem diff-lcs-1.1.3)
=== Implementation from Diff::LCS::SDiffCallbacks
------------------------------------------------------------------------------
  new() { |self| ... }

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Digest::HMAC
------------------------------------------------------------------------------
  new(key, digester)

------------------------------------------------------------------------------

Creates a Digest::HMAC instance.


(from ruby site)
=== Implementation from Digest::Instance
------------------------------------------------------------------------------
  digest_obj.new -> another_digest_obj

------------------------------------------------------------------------------

Returns a new, initialized copy of the digest object.  Equivalent to
digest_obj.clone().reset().


(from ruby site)
=== Implementation from Dir
------------------------------------------------------------------------------
  Dir.new( string ) -> aDir

------------------------------------------------------------------------------

Returns a new directory object for the named directory.


(from gem directory_watcher-1.4.1)
=== Implementation from DirectoryWatcher
------------------------------------------------------------------------------
  DirectoryWatcher.new( directory, options )

------------------------------------------------------------------------------

Create a new <tt>DirectoryWatcher</tt> that will generate events when file
changes are detected in the given <em>directory</em>. If the
<em>directory</em> does not exist, it will be created. The following options
can be passed to this method:

  :glob      =>  '*'      file glob pattern to restrict scanning
  :interval  =>  30.0     the directory scan interval (in seconds)
  :stable    =>  nil      the number of intervals a file must remain
                          unchanged for it to be considered "stable"
  :pre_load  =>  false    setting this option to true will pre-load the
                          file list effectively skipping the initial
                          round of file added events that would normally
                          be generated (glob pattern must also be
                          specified otherwise odd things will happen)
  :persist   =>  file     the state will be persisted to and restored
                          from the file when the directory watcher is
                          stopped and started (respectively)
  :scanner   =>  nil      the directory scanning strategy to use with
                          the directory watcher (either :coolio, :em, :rev or nil)

The default glob pattern will scan all files in the configured directory.
Setting the :stable option to <tt>nil</tt> will prevent stable events from
being generated.


(from gem directory_watcher-1.4.1)
=== Implementation from DirectoryWatcher::CoolioScanner
------------------------------------------------------------------------------
  CoolioScanner.new { |events| block }

------------------------------------------------------------------------------

Create a Coolio based scanner that will generate file events and pass those
events (as an array) to the given <em>block</em>.


(from gem directory_watcher-1.4.1)
=== Implementation from DirectoryWatcher::EmScanner
------------------------------------------------------------------------------
  EmScanner.new { |events| block }

------------------------------------------------------------------------------

Create an EventMachine based scanner that will generate file events and pass
those events (as an array) to the given <em>block</em>.


(from gem directory_watcher-1.4.1)
=== Implementation from DirectoryWatcher::RevScanner
------------------------------------------------------------------------------
  RevScanner.new { |events| block }

------------------------------------------------------------------------------

Create a Rev based scanner that will generate file events and pass those
events (as an array) to the given <em>block</em>.


(from gem directory_watcher-1.4.1)
=== Implementation from DirectoryWatcher::Scanner
------------------------------------------------------------------------------
  Scanner.new { |events| block }

------------------------------------------------------------------------------

Create a thread-based scanner that will generate file events and pass those
events (as an array) to the given <em>block</em>.


(from ruby site)
=== Implementation from ERB
------------------------------------------------------------------------------
  new(str, safe_level=nil, trim_mode=nil, eoutvar='_erbout')

------------------------------------------------------------------------------

Constructs a new ERB object with the template specified in <em>str</em>.

An ERB object works by building a chunk of Ruby code that will output the
completed template when run. If <em>safe_level</em> is set to a non-nil value,
ERB code will be run in a separate thread with <b>$SAFE</b> set to the
provided level.

If <em>trim_mode</em> is passed a String containing one or more of the
following modifiers, ERB will adjust its code generation as listed:

  %  enables Ruby code processing for lines beginning with %
  <> omit newline for lines starting with <% and ending in %>
  >  omit newline for lines ending in %>

<em>eoutvar</em> can be used to set the name of the variable ERB will build up
its output in.  This is useful when you need to run multiple ERB templates
through the same binding and/or when you want to control where output ends up.
 Pass the name of the variable to be used inside a String.

=== Example

  require "erb"

  # build data class
  class Listings
    PRODUCT = { :name => "Chicken Fried Steak",
                :desc => "A well messages pattie, breaded and fried.",
                :cost => 9.95 }

    attr_reader :product, :price

    def initialize( product = "", price = "" )
      @product = product
      @price = price
    end

    def build
      b = binding
      # create and run templates, filling member data variables
      ERB.new(<<-'END_PRODUCT'.gsub(/^\s+/, ""), 0, "", "@product").result b
        <%= PRODUCT[:name] %>
        <%= PRODUCT[:desc] %>
      END_PRODUCT
      ERB.new(<<-'END_PRICE'.gsub(/^\s+/, ""), 0, "", "@price").result b
        <%= PRODUCT[:name] %> -- <%= PRODUCT[:cost] %>
        <%= PRODUCT[:desc] %>
      END_PRICE
    end
  end

  # setup template data
  listings = Listings.new
  listings.build

  puts listings.product + "\n" + listings.price

<em>Generates</em>

  Chicken Fried Steak
  A well messages pattie, breaded and fried.

  Chicken Fried Steak -- 9.95
  A well messages pattie, breaded and fried.


(from ruby site)
=== Implementation from Encoding::Converter
------------------------------------------------------------------------------
  Encoding::Converter.new(source_encoding, destination_encoding)
  Encoding::Converter.new(source_encoding, destination_encoding, opt)
  Encoding::Converter.new(convpath)

------------------------------------------------------------------------------

possible options elements:
  hash form:
    :invalid => nil            # raise error on invalid byte sequence (default)
    :invalid => :replace       # replace invalid byte sequence
    :undef => nil              # raise error on undefined conversion (default)
    :undef => :replace         # replace undefined conversion
    :replace => string         # replacement string ("?" or "\uFFFD" if not specified)
    :newline => :universal     # decorator for converting CRLF and CR to LF
    :newline => :crlf          # decorator for converting LF to CRLF
    :newline => :cr            # decorator for converting LF to CR
    :universal_newline => true # decorator for converting CRLF and CR to LF
    :crlf_newline => true      # decorator for converting LF to CRLF
    :cr_newline => true        # decorator for converting LF to CR
    :xml => :text              # escape as XML CharData.
    :xml => :attr              # escape as XML AttValue
  integer form:
    Encoding::Converter::INVALID_REPLACE
    Encoding::Converter::UNDEF_REPLACE
    Encoding::Converter::UNDEF_HEX_CHARREF
    Encoding::Converter::UNIVERSAL_NEWLINE_DECORATOR
    Encoding::Converter::CRLF_NEWLINE_DECORATOR
    Encoding::Converter::CR_NEWLINE_DECORATOR
    Encoding::Converter::XML_TEXT_DECORATOR
    Encoding::Converter::XML_ATTR_CONTENT_DECORATOR
    Encoding::Converter::XML_ATTR_QUOTE_DECORATOR

Encoding::Converter.new creates an instance of Encoding::Converter.

Source_encoding and destination_encoding should be a string or Encoding
object.

opt should be nil, a hash or an integer.

convpath should be an array. convpath may contain
* two-element arrays which contain encodings or encoding names, or
* strings representing decorator names.

Encoding::Converter.new optionally takes an option. The option should be a
hash or an integer. The option hash can contain :invalid => nil, etc. The
option integer should be logical-or of constants such as
Encoding::Converter::INVALID_REPLACE, etc.

:invalid => nil:
  Raise error on invalid byte sequence.  This is a default behavior.

:invalid => :replace:
  Replace invalid byte sequence by replacement string.

:undef => nil:
  Raise an error if a character in source_encoding is not defined in
  destination_encoding. This is a default behavior.

:undef => :replace:
  Replace undefined character in destination_encoding with replacement string.

:replace => string:
  Specify the replacement string. If not specified, "uFFFD" is used for
  Unicode encodings and "?" for others.

:universal_newline => true:
  Convert CRLF and CR to LF.

:crlf_newline => true:
  Convert LF to CRLF.

:cr_newline => true:
  Convert LF to CR.

:xml => :text:
  Escape as XML CharData. This form can be used as a HTML 4.0 #PCDATA.
  * '&' -> '&amp;'
  * '<' -> '&lt;'
  * '>' -> '&gt;'
  * undefined characters in destination_encoding -> hexadecimal CharRef such
    as &#xHH;

:xml => :attr:
  Escape as XML AttValue. The converted result is quoted as "...". This form
  can be used as a HTML 4.0 attribute value.
  * '&' -> '&amp;'
  * '<' -> '&lt;'
  * '>' -> '&gt;'
  * '"' -> '&quot;'
  * undefined characters in destination_encoding -> hexadecimal CharRef such
    as &#xHH;


Examples:
  # UTF-16BE to UTF-8
  ec = Encoding::Converter.new("UTF-16BE", "UTF-8")

  # Usually, decorators such as newline conversion are inserted last.
  ec = Encoding::Converter.new("UTF-16BE", "UTF-8", :universal_newline => true)
  p ec.convpath #=> [[#<Encoding:UTF-16BE>, #<Encoding:UTF-8>],
                #    "universal_newline"]

  # But, if the last encoding is ASCII incompatible,
  # decorators are inserted before the last conversion.
  ec = Encoding::Converter.new("UTF-8", "UTF-16BE", :crlf_newline => true)
  p ec.convpath #=> ["crlf_newline",
                #    [#<Encoding:UTF-8>, #<Encoding:UTF-16BE>]]

  # Conversion path can be specified directly.
  ec = Encoding::Converter.new(["universal_newline", ["EUC-JP", "UTF-8"], ["UTF-8", "UTF-16BE"]])
  p ec.convpath #=> ["universal_newline",
                #    [#<Encoding:EUC-JP>, #<Encoding:UTF-8>],
                #    [#<Encoding:UTF-8>, #<Encoding:UTF-16BE>]]


(from ruby site)
=== Implementation from Enumerator
------------------------------------------------------------------------------
  Enumerator.new { |yielder| ... }
  Enumerator.new(obj, method = :each, *args)

------------------------------------------------------------------------------

Creates a new Enumerator object, which can be used as an Enumerable.

In the first form, iteration is defined by the given block, in which a
"yielder" object, given as block parameter, can be used to yield a value by
calling the <tt>yield</tt> method (aliased as +<<+):

  fib = Enumerator.new do |y|
    a = b = 1
    loop do
      y << a
      a, b = b, a + b
    end
  end

  p fib.take(10) # => [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

In the second, deprecated, form, a generated Enumerator iterates over the
given object using the given method with the given arguments passed.

Use of this form is discouraged.  Use Kernel#enum_for or Kernel#to_enum
instead.

  e = Enumerator.new(ObjectSpace, :each_object)
      #-> ObjectSpace.enum_for(:each_object)

  e.select { |obj| obj.is_a?(Class) }  #=> array of all classes


(from gem erector-0.9.0.pre1)
=== Implementation from Erector::AbstractWidget
------------------------------------------------------------------------------
  new(assigns = {}, &block)

------------------------------------------------------------------------------


(from gem erector-0.9.0.pre1)
=== Implementation from Erector::AfterInitialize
------------------------------------------------------------------------------
  new(*args, &blk)

------------------------------------------------------------------------------


(from gem erector-0.9.0.pre1)
=== Implementation from Erector::Cache
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem erector-0.9.0.pre1)
=== Implementation from Erector::Dependency
------------------------------------------------------------------------------
  new(type, text, options = {})

------------------------------------------------------------------------------


(from gem erector-0.9.0.pre1)
=== Implementation from Erector::Erect
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------


(from gem erector-0.9.0.pre1)
=== Implementation from Erector::Erected
------------------------------------------------------------------------------
  new(in_file, superklass = 'Erector::Widget', method_name = 'content')

------------------------------------------------------------------------------


(from gem erector-0.9.0.pre1)
=== Implementation from Erector::Needs
------------------------------------------------------------------------------
  new(assigns = {})

------------------------------------------------------------------------------


(from gem erector-0.9.0.pre1)
=== Implementation from Erector::Output
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------


(from gem erector-0.9.0.pre1)
=== Implementation from Erector::Promise
------------------------------------------------------------------------------
  new(output, tag_name, attributes = {}, self_closing = false, newliney = true, &inside_renderer)

------------------------------------------------------------------------------


(from gem erector-0.9.0.pre1)
=== Implementation from Erector::Rails::FormBuilder
------------------------------------------------------------------------------
  new(object_name, object, template, options, proc)

------------------------------------------------------------------------------


(from gem erector-0.9.0.pre1)
=== Implementation from Erector::RailsFormBuilder
------------------------------------------------------------------------------
  new(object_name, object, template, options, proc)

------------------------------------------------------------------------------


(from gem erector-0.9.0.pre1)
=== Implementation from Erector::Tag
------------------------------------------------------------------------------
  new(name, *params)

------------------------------------------------------------------------------

Pass the self_closing and inline params as symbols, e.g.

Tag.new("i", :inline) Tag.new("input", :inline, :self_closing)

@param name the name of the tag, e.g. "div" @param self_closing whether it can
(false) or cannot (true) contain text or other elements. Default: false @param
inline whether it should appear in line with other elements (true) or on a
line by itself (false) in pretty mode. Default: false @param snake whether to
covert the method name into "snake case" (aka underscorized). Default: false


(from gem erector-0.9.0.pre1)
=== Implementation from Erector::UnicodeBuilder
------------------------------------------------------------------------------
  new(input, output)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Channel
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Completion
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Connection
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------

Stubbed initialize so legacy superclasses can safely call super

@private


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::DNS::Request
------------------------------------------------------------------------------
  new(socket, hostname)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::DNS::Socket
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::DatagramObject
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::DeferrableChildProcess
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

@private


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::EvmaKeyboard
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::EvmaTCPClient
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::EvmaTCPServer
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::EvmaUNIXClient
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::EvmaUNIXServer
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::FileStreamer
------------------------------------------------------------------------------
  new(connection, filename, args = {})

------------------------------------------------------------------------------

@param [EventMachine::Connection] connection @param [String] filename File
path

@option args [Boolean] :http_chunks (false) Use HTTP 1.1 style
chunked-encoding semantics.


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Iterator
------------------------------------------------------------------------------
  new(list, concurrency = 1)

------------------------------------------------------------------------------

Create a new parallel async iterator with specified concurrency.

  i = EM::Iterator.new(1..100, 10)

will create an iterator over the range that processes 10 items at a time.
Iteration is started via #each, #map or #inject


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::PeriodicTimer
------------------------------------------------------------------------------
  new(interval, callback=nil, &block)

------------------------------------------------------------------------------

Create a new periodic timer that executes every interval seconds


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Pool
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Protocols::HeaderAndContentProtocol
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Protocols::HttpClient
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Protocols::HttpClient2
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Protocols::HttpClient2::Request
------------------------------------------------------------------------------
  new(conn, args)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Protocols::LineAndTextProtocol
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Protocols::Memcache
------------------------------------------------------------------------------
  new(host, port = 11211)

------------------------------------------------------------------------------

@private


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Protocols::Postgres3
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Protocols::SmtpClient
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Protocols::SmtpServer
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Protocols::Socks4
------------------------------------------------------------------------------
  new(host, port)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Protocols::Stomp::Message
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

@private


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Queue
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Reactor
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Selectable
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::StreamObject
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::SystemCmd
------------------------------------------------------------------------------
  new(cb)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::ThreadedResource
------------------------------------------------------------------------------
  new() { || ... }

------------------------------------------------------------------------------

The block should return the resource that will be yielded in a dispatch.


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::TickLoop
------------------------------------------------------------------------------
  new(*a, &b)

------------------------------------------------------------------------------

Arguments: A callback (EM::Callback) to call each tick. If the call returns
<tt>:stop</tt> then the loop will be stopped. Any other value is  ignored.


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::Timer
------------------------------------------------------------------------------
  new(interval, callback=nil, &block)

------------------------------------------------------------------------------

Create a new timer that fires after a given number of seconds


(from gem eventmachine-1.0.0)
=== Implementation from EventMachine::YieldBlockFromSpawnedProcess
------------------------------------------------------------------------------
  new(block, notify)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Exception
------------------------------------------------------------------------------
  Exception.new(msg = nil)   ->  exception

------------------------------------------------------------------------------

Construct a new Exception object, optionally passing in a message.


(from gem ffi-1.2.0)
=== Implementation from FFI::AutoPointer
------------------------------------------------------------------------------
  new(ptr, proc=nil, &block)

------------------------------------------------------------------------------

@overload initialize(pointer, method)
  @param [Pointer] pointer
  @param [Method] method
  @return [self]
  The passed Method will be invoked at GC time.

@overload initialize(pointer, proc)
  @param [Pointer] pointer
  @return [self]
  The passed Proc will be invoked at GC time (SEE WARNING BELOW!)
  @note WARNING: passing a proc _may_ cause your pointer to never be GC'd, unless you're 
   careful to avoid trapping a reference to the pointer in the proc. See the test 
   specs for examples.

@overload initialize(pointer) { |p| ... }
  @param [Pointer] pointer
  @yieldparam [Pointer] p +pointer+ passed to the block
  @return [self]
  The passed block will be invoked at GC time.
  @note WARNING: passing a block will cause your pointer to never be GC'd. This is bad.

@overload initialize(pointer)
  @param [Pointer] pointer
  @return [self]
  The pointer's release() class method will be invoked at GC time.

@note The safest, and therefore preferred, calling
  idiom is to pass a Method as the second parameter. Example usage:

   class PointerHelper
     def self.release(pointer)
       ...
     end
   end

   p = AutoPointer.new(other_pointer, PointerHelper.method(:release))

  The above code will cause PointerHelper#release to be invoked at GC time.

@note
  The last calling idiom (only one parameter) is generally only
  going to be useful if you subclass {AutoPointer}, and override
  #release, which by default does nothing.


(from gem ffi-1.2.0)
=== Implementation from FFI::AutoPointer::Releaser
------------------------------------------------------------------------------
  new(ptr, proc)

------------------------------------------------------------------------------

@param [Pointer] ptr @param [#call] proc @return [nil] A new instance of
Releaser.


(from gem ffi-1.2.0)
=== Implementation from FFI::ConstGenerator
------------------------------------------------------------------------------
  new(prefix = nil, options = {}) { |self| ... }

------------------------------------------------------------------------------

Creates a new constant generator that uses <tt>prefix</tt> as a name, and an
options hash.

The only option is <tt>:required</tt>, which if set to <tt>true</tt> raises an
error if a constant you have requested was not found.

@param [#to_s] prefix @param [Hash] options @return  @option options [Boolean]
:required @overload initialize(prefix, options) @overload initialize(prefix,
options) { |gen| ... }
  @yieldparam [ConstGenerator] gen new generator is passed to the block
  When passed a block, {#calculate} is automatically called at the end of
  the block, otherwise you must call it yourself.


(from gem ffi-1.2.0)
=== Implementation from FFI::ConstGenerator::Constant
------------------------------------------------------------------------------
  new(name, format, cast, ruby_name = nil, converter=nil)

------------------------------------------------------------------------------

@param [#to_s] name @param [String] format a printf format string to print the
value out @param [String] cast a C cast for the value @param ruby_name
alternate ruby name for {#to_ruby} @param [#call] converter convert the value
from a string to the appropriate
  type for {#to_ruby}.


(from gem ffi-1.2.0)
=== Implementation from FFI::Enum
------------------------------------------------------------------------------
  new(info, tag=nil)

------------------------------------------------------------------------------

@param [nil, Enumerable] info @param tag enum tag


(from gem ffi-1.2.0)
=== Implementation from FFI::Enums
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

@return [nil]


(from gem ffi-1.2.0)
=== Implementation from FFI::Function
------------------------------------------------------------------------------
  new(p1, p2, p3 = v3, p4 = v4)

------------------------------------------------------------------------------

@param [Type, Symbol] return_type return type for the function @param
[Array<Type, Symbol>] param_types array of parameters types @param [Hash]
options see {FFI::FunctionType} for available options @return [self] A new
Function instance.

Define a function from a Proc or a block.

@overload initialize(return_type, param_types, options = {}) { |i| ... }
  @yieldparam i parameters for the function

@overload initialize(return_type, param_types, proc, options = {})
  @param [Proc] proc


(from gem ffi-1.2.0)
=== Implementation from FFI::FunctionType
------------------------------------------------------------------------------
  new(p1, p2, p3 = v3)

------------------------------------------------------------------------------


(from gem ffi-1.2.0)
=== Implementation from FFI::Generator
------------------------------------------------------------------------------
  new(ffi_name, rb_name, options = {})

------------------------------------------------------------------------------


(from gem ffi-1.2.0)
=== Implementation from FFI::Generator::Task
------------------------------------------------------------------------------
  new(rb_names)

------------------------------------------------------------------------------


(from gem ffi-1.2.0)
=== Implementation from FFI::ManagedStruct
------------------------------------------------------------------------------
  ManagedStruct.new(pointer)
  ManagedStruct.new

------------------------------------------------------------------------------

When passed a pointer, create a new ManagedStruct which will invoke the class
method release() on 


(from gem ffi-1.2.0)
=== Implementation from FFI::MemoryPointer
------------------------------------------------------------------------------
  new(p1, p2 = v2, p3 = v3)

------------------------------------------------------------------------------


(from gem ffi-1.2.0)
=== Implementation from FFI::NotFoundError
------------------------------------------------------------------------------
  new(function, *libraries)

------------------------------------------------------------------------------


(from gem ffi-1.2.0)
=== Implementation from FFI::Pointer
------------------------------------------------------------------------------
  new(p1, p2 = v2)

------------------------------------------------------------------------------

@overload initialize(pointer)
  @param [Pointer] pointer another pointer to initialize from
  Create a new pointer from another {Pointer}.

@overload initialize(type, address)
  @param [Type] type type for pointer
  @param [Integer] address base address for pointer
  Create a new pointer from a {Type} and a base adresse

@return [self] A new instance of Pointer.


(from gem ffi-1.2.0)
=== Implementation from FFI::Struct
------------------------------------------------------------------------------
  new(p1 = v1, *args)

------------------------------------------------------------------------------


(from gem ffi-1.2.0)
=== Implementation from FFI::Struct::ManagedStructConverter
------------------------------------------------------------------------------
  new(struct_class)

------------------------------------------------------------------------------


(from gem ffi-1.2.0)
=== Implementation from FFI::StructByReference
------------------------------------------------------------------------------
  new(p1)

------------------------------------------------------------------------------


(from gem ffi-1.2.0)
=== Implementation from FFI::StructByValue
------------------------------------------------------------------------------
  new(p1)

------------------------------------------------------------------------------


(from gem ffi-1.2.0)
=== Implementation from FFI::StructGenerator
------------------------------------------------------------------------------
  new(name, options = {}) { |self| ... }

------------------------------------------------------------------------------


(from gem ffi-1.2.0)
=== Implementation from FFI::StructGenerator::Field
------------------------------------------------------------------------------
  new(name, type)

------------------------------------------------------------------------------


(from gem ffi-1.2.0)
=== Implementation from FFI::StructLayout
------------------------------------------------------------------------------
  new(p1, p2, p3)

------------------------------------------------------------------------------


(from gem ffi-1.2.0)
=== Implementation from FFI::StructLayout::Field
------------------------------------------------------------------------------
  new(p1, p2, p3)

------------------------------------------------------------------------------


(from gem ffi-1.2.0)
=== Implementation from FFI::StructLayout::Mapped
------------------------------------------------------------------------------
  new(name, offset, type, orig_field)

------------------------------------------------------------------------------


(from gem ffi-1.2.0)
=== Implementation from FFI::StructLayoutBuilder
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem ffi-1.2.0)
=== Implementation from FFI::Type
------------------------------------------------------------------------------
  initialize(value)
  @param [Fixnum,Type] value
  @return [self]

------------------------------------------------------------------------------


(from gem ffi-1.2.0)
=== Implementation from FFI::VariadicInvoker
------------------------------------------------------------------------------
  new(p1, p2, p3, p4)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Fiddle::Closure
------------------------------------------------------------------------------
  new(ret, *args, abi = Fiddle::DEFAULT)

------------------------------------------------------------------------------

Construct a new Closure object.

* <tt>ret</tt> is the C type to be returned
* <tt>args</tt> are passed the callback
* <tt>abi</tt> is the abi of the closure

If there is an error in preparing the ffi_cif or ffi_prep_closure, then a
RuntimeError will be raised.


(from ruby site)
=== Implementation from Fiddle::Closure::BlockCaller
------------------------------------------------------------------------------
  new(ctype, args, abi = Fiddle::Function::DEFAULT, &block)

------------------------------------------------------------------------------

== Description

Construct a new BlockCaller object.

* <tt>ctype</tt> is the C type to be returned
* <tt>args</tt> are passed the callback
* <tt>abi</tt> is the abi of the closure

If there is an error in preparing the <tt>ffi_cif</tt> or
<tt>ffi_prep_closure</tt>, then a RuntimeError will be raised.

== Example

  include Fiddle

  cb = Closure::BlockCaller.new(TYPE_INT, [TYPE_INT]) do |one|
    one
  end

  func = Function.new(cb, [TYPE_INT], TYPE_INT)


(from ruby site)
=== Implementation from Fiddle::Function
------------------------------------------------------------------------------
  new(ptr, *args, ret_type, abi = DEFAULT)

------------------------------------------------------------------------------

Constructs a Function object.
* <tt>ptr</tt> is a referenced function, of a DL::Handle
* <tt>args</tt> is an Array of arguments, passed to the <tt>ptr</tt> function
* <tt>ret_type</tt> is the return type of the function
* <tt>abi</tt> is the ABI of the function


(from ruby site)
=== Implementation from DL::CPtr
------------------------------------------------------------------------------
  DL::CPtr.new(address)                   => dl_cptr
  DL::CPtr.new(address, size)             => dl_cptr
  DL::CPtr.new(address, size, freefunc)   => dl_cptr

------------------------------------------------------------------------------

Create a new pointer to <tt>address</tt> with an optional <tt>size</tt> and
<tt>freefunc</tt>. <tt>freefunc</tt> will be called when the instance is
garbage collected.


(from gem erector-0.9.0.pre1)
=== Implementation from FieldTable
------------------------------------------------------------------------------
  new(*args) { |self| ... }

------------------------------------------------------------------------------

Pass in a block and it'll get called with a pointer to this table, so you can
call 'field' and 'button' to configure it


(from ruby site)
=== Implementation from File
------------------------------------------------------------------------------
  File.new(filename, mode="r" [, opt])            -> file
  File.new(filename [, mode [, perm]] [, opt])    -> file

------------------------------------------------------------------------------

Opens the file named by <tt>filename</tt> according to <tt>mode</tt> (default
is "r") and returns a new <tt>File</tt> object.

=== Parameters

See the description of class IO for a description of <tt>mode</tt>.  The file
mode may optionally be specified as a Fixnum by <tt>or</tt>-ing together the
flags (O_RDONLY etc, again described under <tt>IO</tt>).

Optional permission bits may be given in <tt>perm</tt>.  These mode and
permission bits are platform dependent; on Unix systems, see <tt>open(2)</tt>
for details.

Optional <tt>opt</tt> parameter is same as in IO.open.

=== Examples

  f = File.new("testfile", "r")
  f = File.new("newfile",  "w+")
  f = File.new("newfile", File::CREAT|File::TRUNC|File::RDWR, 0644)


(from ruby site)
=== Implementation from File::Stat
------------------------------------------------------------------------------
  File::Stat.new(file_name)  -> stat

------------------------------------------------------------------------------

Create a File::Stat object for the given file name (raising an exception if
the file doesn't exist).


(from gem file-tail-1.0.8)
=== Implementation from File::Tail::Group
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------

Creates a new File::Tail::Group instance.

The following options can be given as arguments:
:files:
  an array of files (or filenames to open) that are placed into the group.



(from gem file-tail-1.0.8)
=== Implementation from File::Tail::ReopenException
------------------------------------------------------------------------------
  new(mode = :bottom)

------------------------------------------------------------------------------

Creates an ReopenException object. The mode defaults to <tt>:bottom</tt> which
indicates that the file should be tailed beginning from the end. <tt>:top</tt>
indicates, that it should be tailed from the beginning from the start.


(from gem files-0.3.0)
=== Implementation from Files::Files
------------------------------------------------------------------------------
  new(path, block, options)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Foo
------------------------------------------------------------------------------
  new(str)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from GDBM
------------------------------------------------------------------------------
  GDBM.new(filename, mode = 0666, flags = nil)

------------------------------------------------------------------------------

Creates a new GDBM instance by opening a gdbm file named <em>filename</em>. If
the file does not exist, a new file with file mode <em>mode</em> will be
created. <em>flags</em> may be one of the following:
* <b>READER</b>  - open as a reader
* <b>WRITER</b>  - open as a writer
* <b>WRCREAT</b> - open as a writer; if the database does not exist, create a
  new one
* <b>NEWDB</b>   - open as a writer; overwrite any existing databases

The values <b>WRITER</b>, <b>WRCREAT</b> and <b>NEWDB</b> may be combined with
the following values by bitwise or:
* <b>SYNC</b>    - cause all database operations to be synchronized to the
  disk
* <b>NOLOCK</b>  - do not lock the database file

If no <em>flags</em> are specified, the GDBM object will try to open the
database file as a writer and will create it if it does not already exist (cf.
flag <tt>WRCREAT</tt>). If this fails (for instance, if another process has
already opened the database as a reader), it will try to open the database
file as a reader (cf. flag <tt>READER</tt>).


(from ruby site)
=== Implementation from GServer
------------------------------------------------------------------------------
  new(port, host = DEFAULT_HOST, maxConnections = 4, stdlog = $stderr, audit = false, debug = false)

------------------------------------------------------------------------------

Create a new server

<tt>port</tt>:
  the port, as a FixNum, on which to listen.

<tt>host</tt>:
  the host to bind to

<tt>maxConnections</tt>:
  The maximum number of simultaneous connections to accept

<tt>stdlog</tt>:
  IO device on which to log messages

<tt>audit</tt>:
  if true, lifecycle callbacks will be called.  See #audit

<tt>debug</tt>:
  if true, error messages are logged.  See #debug



(from ruby site)
=== Implementation from Gem::Builder
------------------------------------------------------------------------------
  new(spec)

------------------------------------------------------------------------------

Constructs a builder instance for the provided specification

  Gem::Specification:
    The specification instance




(from ruby site)
=== Implementation from Gem::Command
------------------------------------------------------------------------------
  new(command, summary=nil, defaults={})

------------------------------------------------------------------------------

Initializes a generic gem command named <tt>command</tt>.  <tt>summary</tt> is
a short description displayed in `gem help commands`.  <tt>defaults</tt> are
the default options.  Defaults should be mirrored in #defaults_str, unless
there are none.

When defining a new command subclass, use add_option to add command-line
switches.

Unhandled arguments (gem names, files, etc.) are left in
<tt>options[:args]</tt>.


(from ruby site)
=== Implementation from Gem::CommandManager
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Register all the subcommands supported by the gem command.


(from ruby site)
=== Implementation from Gem::Commands::BuildCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::CertCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::CheckCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::CleanupCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::ContentsCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::DependencyCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::EnvironmentCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::FetchCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::GenerateIndexCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::HelpCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::InstallCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::ListCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::LockCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::OutdatedCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::OwnerCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::PristineCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::PushCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::QueryCommand
------------------------------------------------------------------------------
  new(name = 'query', summary = 'Query gem information in local or remote repositories')

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::RdocCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::SearchCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::ServerCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::SetupCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::SourcesCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::SpecificationCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::StaleCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::UninstallCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::UnpackCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::UpdateCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Commands::WhichCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::ConfigFile
------------------------------------------------------------------------------
  new(arg_list)

------------------------------------------------------------------------------

Create the config file object.  <tt>args</tt> is the list of arguments from
the command line.

The following command line options are handled early here rather than later at
the time most command options are processed.

<tt>--config-file</tt>, <tt>--config-file==NAME</tt>:
  Obviously these need to be handled by the ConfigFile object to ensure we get
  the right config file.


<tt>--backtrace</tt>:
  Backtrace needs to be turned on early so that errors before normal option
  parsing can be properly handled.


<tt>--debug</tt>:
  Enable Ruby level debug messages.  Handled early for the same reason as
  --backtrace.



(from ruby site)
=== Implementation from Gem::ConsoleUI
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Dependency
------------------------------------------------------------------------------
  new(name, *requirements)

------------------------------------------------------------------------------

Constructs a dependency with <tt>name</tt> and <tt>requirements</tt>. The last
argument can optionally be the dependency type, which defaults to
<tt>:runtime</tt>.


(from ruby site)
=== Implementation from Gem::DependencyInstaller
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------

Creates a new installer instance.

Options are:
:cache_dir:
  Alternate repository path to store .gem files in.

:domain:
  :local, :remote, or :both.  :local only searches gems in the current
  directory.  :remote searches only gems in Gem::sources. :both searches both.

:env_shebang:
  See Gem::Installer::new.

:force:
  See Gem::Installer#install.

:format_executable:
  See Gem::Installer#initialize.

:ignore_dependencies:
  Don't install any dependencies.

:install_dir:
  See Gem::Installer#install.

:prerelease:
  Allow prerelease versions.  See #install.

:security_policy:
  See Gem::Installer::new and Gem::Security.

:user_install:
  See Gem::Installer.new

:wrappers:
  See Gem::Installer::new



(from ruby site)
=== Implementation from Gem::DependencyList
------------------------------------------------------------------------------
  new(development = false)

------------------------------------------------------------------------------

Creates a new DependencyList.  If <tt>development</tt> is true, development
dependencies will be included.


(from ruby site)
=== Implementation from Gem::DocManager
------------------------------------------------------------------------------
  new(spec, rdoc_args="")

------------------------------------------------------------------------------

Create a document manager for <tt>spec</tt>. <tt>rdoc_args</tt> contains
arguments for RDoc (template etc.) as a String.


(from ruby site)
=== Implementation from Gem::FakeFetcher
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::FilePermissionError
------------------------------------------------------------------------------
  new(path)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Format
------------------------------------------------------------------------------
  new(gem_path)

------------------------------------------------------------------------------

Constructs a Format representing the gem's data which came from
<tt>gem_path</tt>


(from ruby site)
=== Implementation from Gem::GemNotFoundException
------------------------------------------------------------------------------
  new(msg, name=nil, version=nil, errors=nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::GemPathSearcher
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Initialise the data we need to make searches later.


(from ruby site)
=== Implementation from Gem::GemRunner
------------------------------------------------------------------------------
  new(options={})

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Indexer
------------------------------------------------------------------------------
  new(directory, options = {})

------------------------------------------------------------------------------

Create an indexer that will index the gems in <tt>directory</tt>.


(from ruby site)
=== Implementation from Gem::Installer
------------------------------------------------------------------------------
  new(gem, options={})

------------------------------------------------------------------------------

Constructs an Installer instance that will install the gem located at
<tt>gem</tt>.  <tt>options</tt> is a Hash with the following keys:

:env_shebang:
  Use /usr/bin/env in bin wrappers.

:force:
  Overrides all version checks and security policy checks, except for a
  signed-gems-only policy.

:ignore_dependencies:
  Don't raise if a dependency is missing.

:install_dir:
  The directory to install the gem into.

:format_executable:
  Format the executable the same as the ruby executable. If your ruby is
  ruby18, foo_exec will be installed as foo_exec18.

:security_policy:
  Use the specified security policy.  See Gem::Security

:wrappers:
  Install wrappers if true, symlinks if false.



(from ruby site)
=== Implementation from Gem::MockGemUi
------------------------------------------------------------------------------
  new(input = "")

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::MockGemUi::TermError
------------------------------------------------------------------------------
  new(exit_code)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::OldFormat
------------------------------------------------------------------------------
  new(gem_path)

------------------------------------------------------------------------------

Constructs an instance of a Format object, representing the gem's data
structure.

  String:
    The file name of the gem




(from ruby site)
=== Implementation from Gem::Package::FormatError
------------------------------------------------------------------------------
  new(message, path = nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Package::TarHeader
------------------------------------------------------------------------------
  new(vals)

------------------------------------------------------------------------------

Creates a new TarHeader using <tt>vals</tt>


(from ruby site)
=== Implementation from Gem::Package::TarOutput
------------------------------------------------------------------------------
  new(io, signer)

------------------------------------------------------------------------------

Creates a new TarOutput that will write a gem-format tar file to <tt>io</tt>. 
If <tt>signer</tt> is given, the data.tar.gz and metadata.gz will be signed
and the signatures will be added to the tar file.


(from ruby site)
=== Implementation from Gem::Package::TarReader
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------

Creates a new tar file reader on <tt>io</tt> which needs to respond to #pos,
#eof?, #read, #getc and #pos=


(from ruby site)
=== Implementation from Gem::Package::TarReader::Entry
------------------------------------------------------------------------------
  new(header, io)

------------------------------------------------------------------------------

Creates a new tar entry for <tt>header</tt> that will be read from <tt>io</tt>


(from ruby site)
=== Implementation from Gem::Package::TarWriter
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------

Creates a new TarWriter that will write to <tt>io</tt>


(from ruby site)
=== Implementation from Gem::Package::TarWriter::BoundedStream
------------------------------------------------------------------------------
  new(io, limit)

------------------------------------------------------------------------------

Wraps <tt>io</tt> and allows up to <tt>limit</tt> bytes to be written


(from ruby site)
=== Implementation from Gem::Package::TarWriter::RestrictedStream
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------

Creates a new RestrictedStream wrapping <tt>io</tt>


(from ruby site)
=== Implementation from Gem::PackageTask
------------------------------------------------------------------------------
  new(gem_spec) { |self| ... }

------------------------------------------------------------------------------

Create a Gem Package task library.  Automatically define the gem if a block is
given.  If no block is supplied, then #define needs to be called to define the
task.


(from ruby site)
=== Implementation from Gem::PathSupport
------------------------------------------------------------------------------
  new(env=ENV)

------------------------------------------------------------------------------

Constructor. Takes a single argument which is to be treated like a hashtable,
or defaults to ENV, the system environment.


(from ruby site)
=== Implementation from Gem::Platform
------------------------------------------------------------------------------
  new(arch)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::PlatformMismatch
------------------------------------------------------------------------------
  new(name, version)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::RemoteFetcher
------------------------------------------------------------------------------
  new(proxy = nil)

------------------------------------------------------------------------------

Initialize a remote fetcher using the source URI and possible proxy
information.

<tt>proxy</tt>
* [String]: explicit specification of proxy; overrides any environment
    variable setting

* nil: respect environment variables (HTTP_PROXY, HTTP_PROXY_USER,
    HTTP_PROXY_PASS)

* <tt>:no_proxy</tt>: ignore environment variables and _don't_ use a proxy


(from ruby site)
=== Implementation from Gem::RemoteFetcher::FetchError
------------------------------------------------------------------------------
  new(message, uri)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Requirement
------------------------------------------------------------------------------
  new(*requirements)

------------------------------------------------------------------------------

Constructs a requirement from <tt>requirements</tt>. Requirements can be
Strings, Gem::Versions, or Arrays of those. <tt>nil</tt> and duplicate
requirements are ignored. An empty set of <tt>requirements</tt> is the same as
<tt>">= 0"</tt>.


(from ruby site)
=== Implementation from Gem::Security::Policy
------------------------------------------------------------------------------
  new(policy = {}, opt = {})

------------------------------------------------------------------------------

Create a new Gem::Security::Policy object with the given mode and options.


(from ruby site)
=== Implementation from Gem::Security::Signer
------------------------------------------------------------------------------
  new(key, cert_chain)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Server
------------------------------------------------------------------------------
  new(gem_dirs, port, daemon, launch = nil, addresses = nil)

------------------------------------------------------------------------------

Only the first directory in gem_dirs is used for serving gems


(from ruby site)
=== Implementation from Gem::SilentUI
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::SourceIndex
------------------------------------------------------------------------------
  new(specs_or_dirs = [])

------------------------------------------------------------------------------

Constructs a source index instance from the provided specifications, which is
a Hash of gem full names and Gem::Specifications.


(from ruby site)
=== Implementation from Gem::SpecFetcher
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Specification
------------------------------------------------------------------------------
  new(name = nil, version = nil) { |self| ... }

------------------------------------------------------------------------------

Specification constructor. Assigns the default values to the attributes and
yields itself for further initialization.  Optionally takes <tt>name</tt> and
<tt>version</tt>.


(from ruby site)
=== Implementation from Gem::StreamUI
------------------------------------------------------------------------------
  new(in_stream, out_stream, err_stream=STDERR, usetty=true)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::StreamUI::SilentDownloadReporter
------------------------------------------------------------------------------
  new(out_stream, *args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::StreamUI::SilentProgressReporter
------------------------------------------------------------------------------
  new(out_stream, size, initial_message, terminal_message = nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::StreamUI::SimpleProgressReporter
------------------------------------------------------------------------------
  new(out_stream, size, initial_message, terminal_message = "complete")

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::StreamUI::VerboseDownloadReporter
------------------------------------------------------------------------------
  new(out_stream, *args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::StreamUI::VerboseProgressReporter
------------------------------------------------------------------------------
  new(out_stream, size, initial_message, terminal_message = 'complete')

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::SystemExitException
------------------------------------------------------------------------------
  new(exit_code)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Uninstaller
------------------------------------------------------------------------------
  new(gem, options = {})

------------------------------------------------------------------------------

Constructs an uninstaller that will uninstall <tt>gem</tt>


(from ruby site)
=== Implementation from Gem::Validator
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Gem::Version
------------------------------------------------------------------------------
  new(version)

------------------------------------------------------------------------------

Constructs a Version from the <tt>version</tt> string.  A version string is a
series of digits or ASCII letters separated by dots.


(from ruby site)
=== Implementation from GetoptLong
------------------------------------------------------------------------------
  new(*arguments)

------------------------------------------------------------------------------

Set up option processing.

The options to support are passed to new() as an array of arrays. Each
sub-array contains any number of String option names which carry the same
meaning, and one of the following flags:

GetoptLong::NO_ARGUMENT:
  Option does not take an argument.


GetoptLong::REQUIRED_ARGUMENT:
  Option always takes an argument.


GetoptLong::OPTIONAL_ARGUMENT:
  Option may or may not take an argument.


The first option name is considered to be the preferred (canonical) name.
Other than that, the elements of each sub-array can be in any order.


(from gem git-1.2.5)
=== Implementation from Git::Author
------------------------------------------------------------------------------
  new(author_string)

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Base
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Branch
------------------------------------------------------------------------------
  new(base, name)

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Branches
------------------------------------------------------------------------------
  new(base)

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Diff
------------------------------------------------------------------------------
  new(base, from = nil, to = nil)

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Diff::DiffFile
------------------------------------------------------------------------------
  new(base, hash)

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Lib
------------------------------------------------------------------------------
  new(base = nil, logger = nil)

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Log
------------------------------------------------------------------------------
  new(base, count = 30)

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Object
------------------------------------------------------------------------------
  new(base, objectish, type = nil, is_tag = false)

------------------------------------------------------------------------------

if we're calling this, we don't know what type it is yet so this is our little
factory method


(from gem git-1.2.5)
=== Implementation from Git::Object::AbstractObject
------------------------------------------------------------------------------
  new(base, objectish)

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Object::Blob
------------------------------------------------------------------------------
  new(base, sha, mode = nil)

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Object::Commit
------------------------------------------------------------------------------
  new(base, sha, init = nil)

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Object::Tag
------------------------------------------------------------------------------
  new(base, sha, name)

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Object::Tree
------------------------------------------------------------------------------
  new(base, sha, mode = nil)

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Path
------------------------------------------------------------------------------
  new(path, check_path = true)

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Remote
------------------------------------------------------------------------------
  new(base, name)

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Stash
------------------------------------------------------------------------------
  new(base, message, existing=false)

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Stashes
------------------------------------------------------------------------------
  new(base)

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Status
------------------------------------------------------------------------------
  new(base)

------------------------------------------------------------------------------


(from gem git-1.2.5)
=== Implementation from Git::Status::StatusFile
------------------------------------------------------------------------------
  new(base, hash)

------------------------------------------------------------------------------


(from gem glynn-1.0.11)
=== Implementation from Glynn::Ftp
------------------------------------------------------------------------------
  new(host, port = 21, options = Hash.new)

------------------------------------------------------------------------------


(from gem glynn-1.0.11)
=== Implementation from Glynn::Jekyll
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------


(from gem gosu-0.7.45-universal-darwin)
=== Implementation from Gosu::Color
------------------------------------------------------------------------------
  new(a, r, g, b)

------------------------------------------------------------------------------

a:
  Integer from 0..255

r:
  Integer from 0..255

g:
  Integer from 0..255

b:
  Integer from 0..255



(from gem metro-0.3.3)
=== Implementation from Gosu::Color
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------

Monkey-patching the initialize to allow for another Gosu::Color and Strings.


(from gem gosu-0.7.45-universal-darwin)
=== Implementation from Gosu::Font
------------------------------------------------------------------------------
  new(window, font_name, height)

------------------------------------------------------------------------------

font_name:
  Name of a system font, or a filename to a TTF file (must contain '/').

height:
  Height of the font, in pixels.



(from gem gosu-0.7.45-universal-darwin)
=== Implementation from Gosu::Image
------------------------------------------------------------------------------
  new(window, filename_or_rmagick_image, tileable)

------------------------------------------------------------------------------

Loads an image from a given filename that can be drawn onto the given window.
See the Gosu wiki for a list of supported formats.

A color key of #ff00ff is automatically applied to BMP type images.


(from gem texplay-0.4.3)
=== Implementation from Gosu::Image
------------------------------------------------------------------------------
  new(*args, &block)

------------------------------------------------------------------------------


(from gem gosu-0.7.45-universal-darwin)
=== Implementation from Gosu::Sample
------------------------------------------------------------------------------
  new(window, filename)

------------------------------------------------------------------------------


(from gem gosu-0.7.45-universal-darwin)
=== Implementation from Gosu::Song
------------------------------------------------------------------------------
  new(window, filename)

------------------------------------------------------------------------------


(from gem gosu-0.7.45-universal-darwin)
=== Implementation from Gosu::Window
------------------------------------------------------------------------------
  new(width, height, fullscreen, update_interval=16.666666)

------------------------------------------------------------------------------

update_interval:
  Interval in milliseconds between two calls

to the update member function. The default means the game will run at 60 FPS,
which is ideal on standard 60 Hz TFT screens.


(from gem actionpack-2.3.5)
=== Implementation from HTML::Selector
------------------------------------------------------------------------------
  Selector.new(string, [values ...]) => selector

------------------------------------------------------------------------------

Creates a new selector from a CSS 2 selector expression.

The first argument is the selector expression. All other arguments are used
for value substitution.

Throws InvalidSelectorError is the selector expression is invalid.


(from gem httpclient-2.3.0.1)
=== Implementation from HTTP::Message::Body
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a Message::Body.  Use init_request or init_response for acutual
initialize.


(from gem httpclient-2.3.0.1)
=== Implementation from HTTP::Message::Body::Parts
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem httpclient-2.3.0.1)
=== Implementation from HTTP::Message::Headers
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a Message::Headers.  Use init_request, init_response, or
init_connect_request for acutual initialize.


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------

Creates a HTTPClient instance which manages sessions, cookies, etc.

HTTPClient.new takes 3 optional arguments for proxy url string, User-Agent
String and From header String.  User-Agent and From are embedded in HTTP
request Header if given.  No User-Agent and From header added without setting
it explicitly.

  proxy = 'http://myproxy:8080'
  agent_name = 'MyAgent/0.1'
  from = 'from@example.com'
  HTTPClient.new(proxy, agent_name, from)

You can use a keyword argument style Hash.  Keys are :proxy, :agent_name and
:from.

  HTTPClient.new(:agent_name => 'MyAgent/0.1')


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient::BasicAuth
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates new BasicAuth filter.


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient::DigestAuth
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates new DigestAuth filter.


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient::LoopBackSocket
------------------------------------------------------------------------------
  new(host, port, response)

------------------------------------------------------------------------------


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient::NegotiateAuth
------------------------------------------------------------------------------
  new(scheme = "Negotiate")

------------------------------------------------------------------------------

Creates new NegotiateAuth filter.


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient::OAuth
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates new DigestAuth filter.


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient::OAuth::Config
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient::ProxyAuth
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates new ProxyAuth.


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient::SSLConfig
------------------------------------------------------------------------------
  new(client)

------------------------------------------------------------------------------

Creates a SSLConfig.


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient::SSLSocketWrap
------------------------------------------------------------------------------
  new(socket, context, debug_dev = nil)

------------------------------------------------------------------------------


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient::SSPINegotiateAuth
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates new SSPINegotiateAuth filter.


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient::Session
------------------------------------------------------------------------------
  new(client, dest, agent_name, from)

------------------------------------------------------------------------------


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient::SessionManager
------------------------------------------------------------------------------
  new(client)

------------------------------------------------------------------------------


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient::Site
------------------------------------------------------------------------------
  new(uri = nil)

------------------------------------------------------------------------------

Creates a new Site based on the given URI.


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient::SocketWrap
------------------------------------------------------------------------------
  new(socket, *args)

------------------------------------------------------------------------------


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient::TimeoutScheduler
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates new TimeoutScheduler.


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient::TimeoutScheduler::Period
------------------------------------------------------------------------------
  new(thread, time, ex)

------------------------------------------------------------------------------

Creates new Period.


(from gem httpclient-2.3.0.1)
=== Implementation from HTTPClient::WWWAuth
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates new WWWAuth.


(from gem haml-3.0.13)
=== Implementation from Haml::Engine
------------------------------------------------------------------------------
  new(template, options = {})

------------------------------------------------------------------------------

Precompiles the Haml template.

@param template [String] The Haml template @param options [{Symbol => Object}]
An options hash;
  see {file:HAML_REFERENCE.md#haml_options the Haml options documentation}

@raise [Haml::Error] if there's a Haml syntax error in the template


(from gem haml-3.0.13)
=== Implementation from Haml::Error
------------------------------------------------------------------------------
  new(message = nil, line = nil)

------------------------------------------------------------------------------

@param message [String] The error message @param line [Fixnum] See {#line}


(from gem haml-3.0.13)
=== Implementation from Haml::Exec::Generic
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------

@param args [Array<String>] The command-line arguments


(from gem haml-3.0.13)
=== Implementation from Haml::Exec::HTML2Haml
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------

@param args [Array<String>] The command-line arguments


(from gem haml-3.0.13)
=== Implementation from Haml::Exec::Haml
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------

@param args [Array<String>] The command-line arguments


(from gem haml-3.0.13)
=== Implementation from Haml::Exec::HamlSass
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------

@param args [Array<String>] The command-line arguments


(from gem haml-3.0.13)
=== Implementation from Haml::Exec::Sass
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------

@param args [Array<String>] The command-line arguments


(from gem haml-3.0.13)
=== Implementation from Haml::Exec::SassConvert
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------

@param args [Array<String>] The command-line arguments


(from gem haml-3.0.13)
=== Implementation from Haml::HTML
------------------------------------------------------------------------------
  new(template, options = {})

------------------------------------------------------------------------------

@param template [String, Hpricot::Node] The HTML template to convert @option
options :erb [Boolean] (false) Whether or not to parse
  ERB's `<%= %>` and `<% %>` into Haml's `=` and `-`

@option options :xhtml [Boolean] (false) Whether or not to parse
  the HTML strictly as XHTML


(from gem haml-3.0.13)
=== Implementation from Haml::Helpers::ErrorReturn
------------------------------------------------------------------------------
  new(method)

------------------------------------------------------------------------------

@param message [String] The error message to raise when {#to_s} is called


(from gem haml-3.0.13)
=== Implementation from Haml::Util::StaticConditionalContext
------------------------------------------------------------------------------
  new(set)

------------------------------------------------------------------------------

@param set [#include?] The set of variables that are defined for this context.


(from gem haml-3.0.13)
=== Implementation from Haml::Util::SubsetMap
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a new, empty SubsetMap.


(from ruby site)
=== Implementation from Hash
------------------------------------------------------------------------------
  Hash.new                          -> new_hash
  Hash.new(obj)                     -> new_hash
  Hash.new {|hash, key| block }     -> new_hash

------------------------------------------------------------------------------

Returns a new, empty hash. If this hash is subsequently accessed by a key that
doesn't correspond to a hash entry, the value returned depends on the style of
<tt>new</tt> used to create the hash. In the first form, the access returns
<tt>nil</tt>. If <em>obj</em> is specified, this single object will be used
for all <em>default values</em>. If a block is specified, it will be called
with the hash object and the key, and should return the default value. It is
the block's responsibility to store the value in the hash if required.

  h = Hash.new("Go Fish")
  h["a"] = 100
  h["b"] = 200
  h["a"]           #=> 100
  h["c"]           #=> "Go Fish"
  # The following alters the single default object
  h["c"].upcase!   #=> "GO FISH"
  h["d"]           #=> "GO FISH"
  h.keys           #=> ["a", "b"]

  # While this creates a new default object each time
  h = Hash.new { |hash, key| hash[key] = "Go Fish: #{key}" }
  h["c"]           #=> "Go Fish: c"
  h["c"].upcase!   #=> "GO FISH: C"
  h["d"]           #=> "Go Fish: d"
  h.keys           #=> ["c", "d"]


(from gem highline-1.6.15)
=== Implementation from HighLine
------------------------------------------------------------------------------
  new( input = $stdin, output = $stdout, wrap_at = nil, page_at = nil )

------------------------------------------------------------------------------

Create an instance of HighLine, connected to the streams <em>input</em> and
<em>output</em>.


(from gem highline-1.6.15)
=== Implementation from HighLine::ColorScheme
------------------------------------------------------------------------------
  new( h = nil ) { |self| ... }

------------------------------------------------------------------------------

Create an instance of HighLine::ColorScheme. The customization can happen as a
passed in Hash or via the yielded block.  Key's are converted to
<tt>:symbols</tt> and values are converted to HighLine constants.


(from gem highline-1.6.15)
=== Implementation from HighLine::Menu
------------------------------------------------------------------------------
  new( ) { |self| ... }

------------------------------------------------------------------------------

Create an instance of HighLine::Menu.  All customization is done through the
passed block, which should call accessors and choice() and choices() as needed
to define the Menu.  Note that Menus are also Questions, so all that
functionality is available to the block as well.


(from gem highline-1.6.15)
=== Implementation from HighLine::Question
------------------------------------------------------------------------------
  new( question, answer_type ) { |self| ... }

------------------------------------------------------------------------------

Create an instance of HighLine::Question.  Expects a <em>question</em> to ask
(can be <tt>""</tt>) and an <em>answer_type</em> to convert the answer to. The
<em>answer_type</em> parameter must be a type recognized by
Question.convert(). If given, a block is yeilded the new Question object to
allow custom initializaion.


(from gem highline-1.6.15)
=== Implementation from HighLine::SampleColorScheme
------------------------------------------------------------------------------
  new( h = nil )

------------------------------------------------------------------------------

Builds the sample scheme with settings for <tt>:critical</tt>,
<tt>:error</tt>, <tt>:warning</tt>, <tt>:notice</tt>, <tt>:info</tt>,
<tt>:debug</tt>, <tt>:row_even</tt>, and <tt>:row_odd</tt> colors.


(from gem highline-1.6.15)
=== Implementation from HighLine::Simulate
------------------------------------------------------------------------------
  new(strings)

------------------------------------------------------------------------------

Creates a simulator with an array of Strings as a script


(from gem highline-1.6.15)
=== Implementation from HighLine::Style
------------------------------------------------------------------------------
  new(defn = {})

------------------------------------------------------------------------------

Single color/styles have :name, :code, :rgb (possibly), :builtin Compound
styles have :name, :list, :builtin


(from gem highline-1.6.15)
=== Implementation from HighLine::SystemExtensions
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem hpricot-0.8.2)
=== Implementation from Hpricot::CssProxy
------------------------------------------------------------------------------
  new(builder, sym)

------------------------------------------------------------------------------

Creates a CssProxy object.


(from ruby site)
=== Implementation from HttpServer
------------------------------------------------------------------------------
  new(handle_obj, port = 8080, host = DEFAULT_HOST, maxConnections = 4, stdlog = $stdout, audit = true, debug = true)

------------------------------------------------------------------------------

handle_obj specifies the object, that receives calls to request_handler and
ip_auth_handler


(from ruby site)
=== Implementation from HttpServer::Request
------------------------------------------------------------------------------
  new(data, method=nil, path=nil, proto=nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from HttpServer::Response
------------------------------------------------------------------------------
  new(status=200)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from HttpServer::Table
------------------------------------------------------------------------------
  new(hash={})

------------------------------------------------------------------------------


(from gem i18n-0.6.1)
=== Implementation from I18n::Backend::Chain::Implementation
------------------------------------------------------------------------------
  new(*backends)

------------------------------------------------------------------------------


(from gem i18n-0.6.1)
=== Implementation from I18n::Backend::KeyValue::Implementation
------------------------------------------------------------------------------
  new(store, subtrees=true)

------------------------------------------------------------------------------


(from gem i18n-0.6.1)
=== Implementation from I18n::Backend::Transliterator::HashTransliterator
------------------------------------------------------------------------------
  new(rule = nil)

------------------------------------------------------------------------------


(from gem i18n-0.6.1)
=== Implementation from I18n::Backend::Transliterator::ProcTransliterator
------------------------------------------------------------------------------
  new(rule)

------------------------------------------------------------------------------


(from gem i18n-0.6.1)
=== Implementation from I18n::InvalidLocale
------------------------------------------------------------------------------
  new(locale)

------------------------------------------------------------------------------


(from gem i18n-0.6.1)
=== Implementation from I18n::InvalidLocaleData
------------------------------------------------------------------------------
  new(filename)

------------------------------------------------------------------------------


(from gem i18n-0.6.1)
=== Implementation from I18n::InvalidPluralizationData
------------------------------------------------------------------------------
  new(entry, count)

------------------------------------------------------------------------------


(from gem i18n-0.6.1)
=== Implementation from I18n::Locale::Fallbacks
------------------------------------------------------------------------------
  new(*mappings)

------------------------------------------------------------------------------


(from gem i18n-0.6.1)
=== Implementation from I18n::Locale::Tag::Simple
------------------------------------------------------------------------------
  new(*tag)

------------------------------------------------------------------------------


(from gem i18n-0.6.1)
=== Implementation from I18n::MissingInterpolationArgument
------------------------------------------------------------------------------
  new(values, string)

------------------------------------------------------------------------------


(from gem i18n-0.6.1)
=== Implementation from I18n::MissingTranslation::Base
------------------------------------------------------------------------------
  new(locale, key, options = nil)

------------------------------------------------------------------------------


(from gem i18n-0.6.1)
=== Implementation from I18n::ReservedInterpolationKey
------------------------------------------------------------------------------
  new(key, string)

------------------------------------------------------------------------------


(from gem i18n-0.6.1)
=== Implementation from I18n::UnknownFileType
------------------------------------------------------------------------------
  new(type, filename)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IO
------------------------------------------------------------------------------
  IO.new(fd [, mode] [, opt])   -> io

------------------------------------------------------------------------------

Returns a new IO object (a stream) for the given IO object or integer file
descriptor and mode string.  See also IO.sysopen and IO.for_fd.

=== Parameters

fd:
  numeric file descriptor or IO object

mode:
  file mode. a string or an integer

opt:
  hash for specifying <tt>mode</tt> by name.


==== Mode

When mode is an integer it must be combination of the modes defined in
File::Constants.

When mode is a string it must be in one of the following forms:
* "fmode",
* "fmode:extern",
* "fmode:extern:intern".
<tt>extern</tt> is the external encoding name for the IO. <tt>intern</tt> is
the internal encoding. <tt>fmode</tt> must be a file open mode string. See the
description of class IO for mode string directives.

When the mode of original IO is read only, the mode cannot be changed to be
writable.  Similarly, the mode cannot be changed from write only to readable.

When such a change is attempted the error is raised in different locations
according to the platform.

==== Options
<tt>opt</tt> can have the following keys
:mode:
  Same as <tt>mode</tt> parameter

:external_encoding:
  External encoding for the IO.  "-" is a synonym for the default external
  encoding.

:internal_encoding:
  Internal encoding for the IO.  "-" is a synonym for the default internal
  encoding.

  If the value is nil no conversion occurs.

:encoding:
  Specifies external and internal encodings as "extern:intern".

:textmode:
  If the value is truth value, same as "t" in argument <tt>mode</tt>.

:binmode:
  If the value is truth value, same as "b" in argument <tt>mode</tt>.

:autoclose:
  If the value is <tt>false</tt>, the <tt>fd</tt> will be kept open after this
  IO instance gets finalized.


Also <tt>opt</tt> can have same keys in String#encode for controlling
conversion between the external encoding and the internal encoding.

=== Example 1

  fd = IO.sysopen("/dev/tty", "w")
  a = IO.new(fd,"w")
  $stderr.puts "Hello"
  a.puts "World"

<em>produces:</em>

  Hello
  World

=== Example 2

  require 'fcntl'

  fd = STDERR.fcntl(Fcntl::F_DUPFD)
  io = IO.new(fd, mode: 'w:UTF-16LE', cr_newline: true)
  io.puts "Hello, World!"

  fd = STDERR.fcntl(Fcntl::F_DUPFD)
  io = IO.new(fd, mode: 'w', cr_newline: true,
              external_encoding: Encoding::UTF_16LE)
  io.puts "Hello, World!"

Both of above print "Hello, World!" in UTF-16LE to standard error output with
converting EOL generated by <tt>puts</tt> to CR.


(from gem ruby-ole-1.2.11.1)
=== Implementation from IO::Mode
------------------------------------------------------------------------------
  new(flags)

------------------------------------------------------------------------------


(from gem rubyzip-0.9.9)
=== Implementation from IOExtras::AbstractInputStream
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IPAddr
------------------------------------------------------------------------------
  new(addr = '::', family = Socket::AF_UNSPEC)

------------------------------------------------------------------------------

Creates a new ipaddr object either from a human readable IP address
representation in string, or from a packed in_addr value followed by an
address family.

In the former case, the following are the valid formats that will be
recognized: "address", "address/prefixlen" and "address/mask", where IPv6
address may be enclosed in square brackets (`[' and `]').  If a prefixlen or a
mask is specified, it returns a masked IP address.  Although the address
family is determined automatically from a specified string, you can specify
one explicitly by the optional second argument.

Otherwise an IP address is generated from a packed in_addr value and an
address family.

The IPAddr class defines many methods and operators, and some of those, such
as &, |, include? and ==, accept a string, or a packed in_addr value instead
of an IPAddr object.


(from ruby site)
=== Implementation from IRB::Context
------------------------------------------------------------------------------
  new(irb, workspace = nil, input_method = nil, output_method = nil)

------------------------------------------------------------------------------

Arguments:
  input_method: nil -- stdin or readline
                String -- File
                other -- using this as InputMethod


(from ruby site)
=== Implementation from IRB::ExtendCommand::Nop
------------------------------------------------------------------------------
  new(conf)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IRB::FileInputMethod
------------------------------------------------------------------------------
  new(file)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IRB::Frame
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IRB::History
------------------------------------------------------------------------------
  new(size = 16)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IRB::InputMethod
------------------------------------------------------------------------------
  new(file = STDIN_FILE_NAME)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IRB::Inspector
------------------------------------------------------------------------------
  new(inspect_proc, init_proc = nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IRB::Irb
------------------------------------------------------------------------------
  new(workspace = nil, input_method = nil, output_method = nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IRB::JobManager
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IRB::Locale
------------------------------------------------------------------------------
  new(locale = nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IRB::Notifier::AbstractNotifier
------------------------------------------------------------------------------
  new(prefix, base_notifier)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IRB::Notifier::CompositeNotifier
------------------------------------------------------------------------------
  new(prefix, base_notifier)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IRB::Notifier::LeveledNotifier
------------------------------------------------------------------------------
  new(base, level, prefix)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IRB::Notifier::NoMsgNotifier
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IRB::ReadlineInputMethod
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IRB::SLex
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IRB::SLex::Node
------------------------------------------------------------------------------
  new(preproc = nil, postproc = nil)

------------------------------------------------------------------------------

if postproc is nil, this node is an abstract node. if postproc is non-nil,
this node is a real node.


(from ruby site)
=== Implementation from IRB::StdioInputMethod
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from IRB::WorkSpace
------------------------------------------------------------------------------
  new(*main)

------------------------------------------------------------------------------

create new workspace. set self to main if specified, otherwise inherit main
from TOPLEVEL_BINDING.


(from ruby site)
=== Implementation from Iconv
------------------------------------------------------------------------------
  Iconv.new(to, from, [options])

------------------------------------------------------------------------------

Creates new code converter from a coding-system designated with <tt>from</tt>
to another one designated with <tt>to</tt>.

=== Parameters

<tt>to</tt>:
  encoding name for destination

<tt>from</tt>:
  encoding name for source

<tt>options</tt>:
  options for converter


=== Exceptions

TypeError:
  if <tt>to</tt> or <tt>from</tt> aren't String

InvalidEncoding:
  if designated converter couldn't find out

SystemCallError:
  if <tt>iconv_open(3)</tt> fails



(from ruby site)
=== Implementation from Iconv::Failure
------------------------------------------------------------------------------
  Iconv.new(to, from, [options])

------------------------------------------------------------------------------

Creates new code converter from a coding-system designated with <tt>from</tt>
to another one designated with <tt>to</tt>.

=== Parameters

<tt>to</tt>:
  encoding name for destination

<tt>from</tt>:
  encoding name for source

<tt>options</tt>:
  options for converter


=== Exceptions

TypeError:
  if <tt>to</tt> or <tt>from</tt> aren't String

InvalidEncoding:
  if designated converter couldn't find out

SystemCallError:
  if <tt>iconv_open(3)</tt> fails



(from gem RubyInline-3.11.2)
=== Implementation from Inline::C
------------------------------------------------------------------------------
  new(mod)

------------------------------------------------------------------------------


(from gem treetop-1.4.10)
=== Implementation from IntervalSkipList
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem treetop-1.4.10)
=== Implementation from IntervalSkipList::HeadNode
------------------------------------------------------------------------------
  new(height)

------------------------------------------------------------------------------


(from gem treetop-1.4.10)
=== Implementation from IntervalSkipList::Node
------------------------------------------------------------------------------
  new(key, height, path)

------------------------------------------------------------------------------


(from gem json-1.7.5)
=== Implementation from JSON::Pure::Generator::State
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------

Instantiates a new State object, configured by <em>opts</em>.

<em>opts</em> can have the following keys:

* <b>indent</b>: a string used to indent levels (default: ''),
* <b>space</b>: a string that is put after, a : or , delimiter (default: ''),
* <b>space_before</b>: a string that is put before a : pair delimiter
  (default: ''),
* <b>object_nl</b>: a string that is put at the end of a JSON object (default:
  ''),
* <b>array_nl</b>: a string that is put at the end of a JSON array (default:
  ''),
* <b>check_circular</b>: is deprecated now, use the :max_nesting option
  instead,
* <b>max_nesting</b>: sets the maximum level of data structure nesting in the
  generated JSON, max_nesting = 0 if no maximum should be checked.
* <b>allow_nan</b>: true if NaN, Infinity, and -Infinity should be generated,
  otherwise an exception is thrown, if these values are encountered. This
  options defaults to false.
* <b>quirks_mode</b>: Enables quirks_mode for parser, that is for example
  generating single JSON values instead of documents is possible.


(from gem json-1.7.5)
=== Implementation from JSON::Pure::Parser
------------------------------------------------------------------------------
  new(source, opts = {})

------------------------------------------------------------------------------

Creates a new JSON::Pure::Parser instance for the string <em>source</em>.

It will be configured by the <em>opts</em> hash. <em>opts</em> can have the
following keys:
* <b>max_nesting</b>: The maximum depth of nesting allowed in the parsed data
  structures. Disable depth checking with :max_nesting => false|nil|0, it
  defaults to 19.
* <b>allow_nan</b>: If set to true, allow NaN, Infinity and -Infinity in
  defiance of RFC 4627 to be parsed by the Parser. This option defaults to
  false.
* <b>symbolize_names</b>: If set to true, returns symbols for the names (keys)
  in a JSON object. Otherwise strings are returned, which is also the default.
* <b>create_additions</b>: If set to false, the Parser doesn't create
  additions even if a matchin class and create_id was found. This option
  defaults to true.
* <b>object_class</b>: Defaults to Hash
* <b>array_class</b>: Defaults to Array
* <b>quirks_mode</b>: Enables quirks_mode for parser, that is for example
  parsing single JSON values instead of documents is possible.


(from gem jekyll-0.11.2)
=== Implementation from Jekyll::Converter
------------------------------------------------------------------------------
  new(config = {})

------------------------------------------------------------------------------

Initialize the converter.

Returns an initialized Converter.


(from gem jekyll-0.11.2)
=== Implementation from Jekyll::HighlightBlock
------------------------------------------------------------------------------
  new(tag_name, markup, tokens)

------------------------------------------------------------------------------


(from gem jekyll-0.11.2)
=== Implementation from Jekyll::IncludeTag
------------------------------------------------------------------------------
  new(tag_name, file, tokens)

------------------------------------------------------------------------------


(from gem jekyll-0.11.2)
=== Implementation from Jekyll::Layout
------------------------------------------------------------------------------
  new(site, base, name)

------------------------------------------------------------------------------

Initialize a new Layout.

site - The Site. base - The String path to the source. name - The String
filename of the post file.


(from gem jekyll-0.11.2)
=== Implementation from Jekyll::Page
------------------------------------------------------------------------------
  new(site, base, dir, name)

------------------------------------------------------------------------------

Initialize a new Page.

site - The Site object. base - The String path to the source. dir  - The
String path between the source and the file. name - The String filename of the
file.


(from gem jekyll-0.11.2)
=== Implementation from Jekyll::Pager
------------------------------------------------------------------------------
  new(config, page, all_posts, num_pages = nil)

------------------------------------------------------------------------------

Initialize a new Pager.

config    - The Hash configuration of the site. page      - The Integer page
number. all_posts - The Array of all the site's Posts. num_pages - The Integer
number of pages or nil if you'd like the number
  of pages calculated.


(from gem jekyll-0.11.2)
=== Implementation from Jekyll::Plugin
------------------------------------------------------------------------------
  new(config = {})

------------------------------------------------------------------------------

Initialize a new plugin. This should be overridden by the subclass.

config - The Hash of configuration options.

Returns a new instance.


(from gem jekyll-0.11.2)
=== Implementation from Jekyll::Post
------------------------------------------------------------------------------
  new(site, source, dir, name)

------------------------------------------------------------------------------

Initialize this Post instance.
  +site+ is the Site
  +base+ is the String path to the dir containing the post file
  +name+ is the String filename of the post file
  +categories+ is an Array of Strings for the categories for this post

Returns <Post>


(from gem jekyll-0.11.2)
=== Implementation from Jekyll::Site
------------------------------------------------------------------------------
  new(config)

------------------------------------------------------------------------------

Public: Initialize a new Site.

config - A Hash containing site configuration details.


(from gem jekyll-0.11.2)
=== Implementation from Jekyll::StaticFile
------------------------------------------------------------------------------
  new(site, base, dir, name)

------------------------------------------------------------------------------

Initialize a new StaticFile.

site - The Site. base - The String path to the <source>. dir  - The String
path between <source> and the file. name - The String filename of the file.


(from gem i18n-0.6.1)
=== Implementation from KeyError
------------------------------------------------------------------------------
  new(message = nil)

------------------------------------------------------------------------------


(from gem kramdown-0.14.0)
=== Implementation from Kramdown::Converter::Html
------------------------------------------------------------------------------
  new(root, options)

------------------------------------------------------------------------------

Initialize the HTML converter with the given Kramdown document <tt>doc</tt>.


(from gem kramdown-0.14.0)
=== Implementation from Kramdown::Converter::Latex
------------------------------------------------------------------------------
  new(root, options)

------------------------------------------------------------------------------

Initialize the LaTeX converter with the <tt>root</tt> element and the
conversion <tt>options</tt>.


(from gem kramdown-0.14.0)
=== Implementation from Kramdown::Converter::RemoveHtmlTags
------------------------------------------------------------------------------
  new(root, options)

------------------------------------------------------------------------------


(from gem kramdown-0.14.0)
=== Implementation from Kramdown::Converter::Toc
------------------------------------------------------------------------------
  new(root, options)

------------------------------------------------------------------------------


(from gem kramdown-0.14.0)
=== Implementation from Kramdown::Document
------------------------------------------------------------------------------
  new(source, options = {})

------------------------------------------------------------------------------

Create a new Kramdown document from the string <tt>source</tt> and use the
provided <tt>options</tt>. The options that can be used are defined in the
Options module.

The special options key :input can be used to select the parser that should
parse the <tt>source</tt>. It has to be the name of a class in the
Kramdown::Parser module. For example, to select the kramdown parser, one would
set the :input key to <tt>Kramdown</tt>. If this key is not set, it defaults
to <tt>Kramdown</tt>.

The <tt>source</tt> is immediately parsed by the selected parser so that the
root element is immediately available and the output can be generated.


(from gem kramdown-0.14.0)
=== Implementation from Kramdown::Element
------------------------------------------------------------------------------
  new(type, value = nil, attr = nil, options = nil)

------------------------------------------------------------------------------

Create a new Element object of type <tt>type</tt>. The optional parameters
<tt>value</tt>, <tt>attr</tt> and <tt>options</tt> can also be set in this
constructor for convenience.


(from gem kramdown-0.14.0)
=== Implementation from Kramdown::Utils::OrderedHash
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Initialize the OrderedHash object.


(from gem haml-3.0.13)
=== Implementation from Less::Node::SassNode
------------------------------------------------------------------------------
  new(node)

------------------------------------------------------------------------------


(from gem sass-3.1.15)
=== Implementation from Less::Node::SassNode
------------------------------------------------------------------------------
  new(node)

------------------------------------------------------------------------------


(from gem libwebsocket-0.1.7.1)
=== Implementation from LibWebSocket::Frame
------------------------------------------------------------------------------
  new(buffer = nil)

------------------------------------------------------------------------------


(from gem libwebsocket-0.1.7.1)
=== Implementation from LibWebSocket::Frame
------------------------------------------------------------------------------
  new(buffer = nil)

------------------------------------------------------------------------------

Create new frame without modification of current


(from gem libwebsocket-0.1.7.1)
=== Implementation from LibWebSocket::OpeningHandshake::Client
------------------------------------------------------------------------------
  new(hash = {})

------------------------------------------------------------------------------


(from gem libwebsocket-0.1.7.1)
=== Implementation from LibWebSocket::OpeningHandshake::Server
------------------------------------------------------------------------------
  new(hash = {})

------------------------------------------------------------------------------


(from gem libwebsocket-0.1.7.1)
=== Implementation from LibWebSocket::URL
------------------------------------------------------------------------------
  new(hash = {})

------------------------------------------------------------------------------


(from gem liquid-2.4.1)
=== Implementation from Liquid::Assign
------------------------------------------------------------------------------
  new(tag_name, markup, tokens)

------------------------------------------------------------------------------


(from gem liquid-2.4.1)
=== Implementation from Liquid::Capture
------------------------------------------------------------------------------
  new(tag_name, markup, tokens)

------------------------------------------------------------------------------


(from gem liquid-2.4.1)
=== Implementation from Liquid::Case
------------------------------------------------------------------------------
  new(tag_name, markup, tokens)

------------------------------------------------------------------------------


(from gem liquid-2.4.1)
=== Implementation from Liquid::Context
------------------------------------------------------------------------------
  new(environments = {}, outer_scope = {}, registers = {}, rethrow_errors = false)

------------------------------------------------------------------------------


(from gem liquid-2.4.1)
=== Implementation from Liquid::Cycle
------------------------------------------------------------------------------
  new(tag_name, markup, tokens)

------------------------------------------------------------------------------


(from gem liquid-2.4.1)
=== Implementation from Liquid::Decrement
------------------------------------------------------------------------------
  new(tag_name, markup, tokens)

------------------------------------------------------------------------------


(from gem liquid-2.4.1)
=== Implementation from Liquid::Document
------------------------------------------------------------------------------
  new(tokens)

------------------------------------------------------------------------------

we don't need markup to open this block


(from gem liquid-2.4.1)
=== Implementation from Liquid::For
------------------------------------------------------------------------------
  new(tag_name, markup, tokens)

------------------------------------------------------------------------------


(from gem liquid-2.4.1)
=== Implementation from Liquid::If
------------------------------------------------------------------------------
  new(tag_name, markup, tokens)

------------------------------------------------------------------------------


(from gem liquid-2.4.1)
=== Implementation from Liquid::Include
------------------------------------------------------------------------------
  new(tag_name, markup, tokens)

------------------------------------------------------------------------------


(from gem liquid-2.4.1)
=== Implementation from Liquid::Increment
------------------------------------------------------------------------------
  new(tag_name, markup, tokens)

------------------------------------------------------------------------------


(from gem liquid-2.4.1)
=== Implementation from Liquid::LocalFileSystem
------------------------------------------------------------------------------
  new(root)

------------------------------------------------------------------------------


(from gem liquid-2.4.1)
=== Implementation from Liquid::TableRow
------------------------------------------------------------------------------
  new(tag_name, markup, tokens)

------------------------------------------------------------------------------


(from gem liquid-2.4.1)
=== Implementation from Liquid::Tag
------------------------------------------------------------------------------
  new(tag_name, markup, tokens)

------------------------------------------------------------------------------


(from gem liquid-2.4.1)
=== Implementation from Liquid::Template
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

creates a new <tt>Template</tt> from an array of tokens. Use
<tt>Template.parse</tt> instead


(from gem liquid-2.4.1)
=== Implementation from Liquid::Variable
------------------------------------------------------------------------------
  new(markup)

------------------------------------------------------------------------------


(from gem liquid-2.4.1)
=== Implementation from LiquidView
------------------------------------------------------------------------------
  new(view)

------------------------------------------------------------------------------


(from gem listen-0.6.0)
=== Implementation from Listen::Adapter
------------------------------------------------------------------------------
  new(directories, options = {}, &callback)

------------------------------------------------------------------------------

Initializes the adapter.

@param [String, Array<String>] directories the directories to watch @param
[Hash] options the adapter options @option options [Float] latency the delay
between checking for changes in seconds @option options [Boolean]
report_changes whether or not to automatically report changes (run the
callback)

@yield [changed_dirs, options] callback Callback called when a change happens
@yieldparam [Array<String>] changed_dirs the changed directories @yieldparam
[Hash] options callback options (like :recursive => true)

@return [Listen::Adapter] the adapter


(from gem listen-0.6.0)
=== Implementation from Listen::Adapters::Darwin
------------------------------------------------------------------------------
  new(directories, options = {}, &callback)

------------------------------------------------------------------------------

Initializes the Adapter. See {Listen::Adapter#initialize} for more info.


(from gem listen-0.6.0)
=== Implementation from Listen::Adapters::Linux
------------------------------------------------------------------------------
  new(directories, options = {}, &callback)

------------------------------------------------------------------------------

Initializes the Adapter. See {Listen::Adapter#initialize} for more info.


(from gem listen-0.6.0)
=== Implementation from Listen::Adapters::Polling
------------------------------------------------------------------------------
  new(directories, options = {}, &callback)

------------------------------------------------------------------------------

Initialize the Adapter. See {Listen::Adapter#initialize} for more info.


(from gem listen-0.6.0)
=== Implementation from Listen::Adapters::Windows
------------------------------------------------------------------------------
  new(directories, options = {}, &callback)

------------------------------------------------------------------------------

Initializes the Adapter. See {Listen::Adapter#initialize} for more info.


(from gem listen-0.6.0)
=== Implementation from Listen::DirectoryRecord
------------------------------------------------------------------------------
  new(directory)

------------------------------------------------------------------------------

Initializes a directory record.

@option [String] directory the directory to keep track of


(from gem listen-0.6.0)
=== Implementation from Listen::Listener
------------------------------------------------------------------------------
  new(directory, options = {}, &block)

------------------------------------------------------------------------------

Initializes the directory listener.

@param [String] directory the directory to listen to @param [Hash] options the
listen options @option options [Regexp] ignore a pattern for ignoring paths
@option options [Regexp] filter a pattern for filtering paths @option options
[Float] latency the delay between checking for changes in seconds @option
options [Boolean] relative_paths whether or not to use relative-paths in the
callback @option options [Boolean] force_polling whether to force the polling
adapter or not @option options [String, Boolean] polling_fallback_message to
change polling fallback message or remove it

@yield [modified, added, removed] the changed files @yieldparam
[Array<String>] modified the list of modified files @yieldparam
[Array<String>] added the list of added files @yieldparam [Array<String>]
removed the list of removed files


(from gem listen-0.6.0)
=== Implementation from Listen::MultiListener
------------------------------------------------------------------------------
  new(*args, &block)

------------------------------------------------------------------------------

Initializes the multiple directories listener.

@param [String] directories the directories to listen to @param [Hash] options
the listen options @option options [Regexp] ignore a pattern for ignoring
paths @option options [Regexp] filter a pattern for filtering paths @option
options [Float] latency the delay between checking for changes in seconds
@option options [Boolean] force_polling whether to force the polling adapter
or not @option options [String, Boolean] polling_fallback_message to change
polling fallback message or remove it

@yield [modified, added, removed] the changed files @yieldparam
[Array<String>] modified the list of modified files @yieldparam
[Array<String>] added the list of added files @yieldparam [Array<String>]
removed the list of removed files


(from gem listen-0.6.0)
=== Implementation from Listen::Turnstile
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Initialize the turnstile.


(from ruby site)
=== Implementation from Logger
------------------------------------------------------------------------------
  new(logdev, shift_age = 0, shift_size = 1048576)

------------------------------------------------------------------------------

=== Synopsis

  Logger.new(name, shift_age = 7, shift_size = 1048576)
  Logger.new(name, shift_age = 'weekly')

=== Args

<tt>logdev</tt>:
  The log device.  This is a filename (String) or IO object (typically
  <tt>STDOUT</tt>, <tt>STDERR</tt>, or an open file).

<tt>shift_age</tt>:
  Number of old log files to keep, <b>or</b> frequency of rotation
  (<tt>daily</tt>, <tt>weekly</tt> or <tt>monthly</tt>).

<tt>shift_size</tt>:
  Maximum logfile size (only applies when <tt>shift_age</tt> is a number).


=== Description

Create an instance.


(from ruby site)
=== Implementation from Logger::Application
------------------------------------------------------------------------------
  new(appname = nil)

------------------------------------------------------------------------------

== Synopsis

  Application.new(appname = '')

== Args

<tt>appname</tt>:
  Name of the application.


== Description

Create an instance.  Log device is <tt>STDERR</tt> by default.  This can be
changed with #set_log.


(from ruby site)
=== Implementation from Logger::Formatter
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Logger::LogDevice
------------------------------------------------------------------------------
  new(log = nil, opt = {})

------------------------------------------------------------------------------


(from gem mime-types-1.19)
=== Implementation from MIME::Type
------------------------------------------------------------------------------
  new(content_type) { |self| ... }

------------------------------------------------------------------------------

Builds a MIME::Type object from the provided MIME Content Type value (e.g.,
'text/plain' or 'applicaton/x-eruby'). The constructed object is yielded to an
optional block for additional configuration, such as associating extensions
and encoding information.


(from gem mime-types-1.19)
=== Implementation from MIME::Types
------------------------------------------------------------------------------
  new(data_version = nil)

------------------------------------------------------------------------------


(from gem maruku-0.6.1)
=== Implementation from Maruku
------------------------------------------------------------------------------
  new(s=nil, meta={})

------------------------------------------------------------------------------


(from gem maruku-0.6.1)
=== Implementation from MaRuKu::In::Markdown::BlockLevelParser::LineSource
------------------------------------------------------------------------------
  new(lines, parent=nil, parent_offset=nil)

------------------------------------------------------------------------------


(from gem maruku-0.6.1)
=== Implementation from MaRuKu::In::Markdown::SpanLevelParser::CharSourceDebug
------------------------------------------------------------------------------
  new(s, parent)

------------------------------------------------------------------------------


(from gem maruku-0.6.1)
=== Implementation from MaRuKu::In::Markdown::SpanLevelParser::CharSourceManual
------------------------------------------------------------------------------
  new(s, parent=nil)

------------------------------------------------------------------------------


(from gem maruku-0.6.1)
=== Implementation from MaRuKu::In::Markdown::SpanLevelParser::CharSourceStrscan
------------------------------------------------------------------------------
  new(s, parent=nil)

------------------------------------------------------------------------------


(from gem maruku-0.6.1)
=== Implementation from MaRuKu::In::Markdown::SpanLevelParser::HTMLHelper
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem maruku-0.6.1)
=== Implementation from MaRuKu::In::Markdown::SpanLevelParser::SpanContext
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem maruku-0.6.1)
=== Implementation from MaRuKu::MDDocument
------------------------------------------------------------------------------
  new(s=nil)

------------------------------------------------------------------------------


(from gem maruku-0.6.1)
=== Implementation from MaRuKu::MDElement
------------------------------------------------------------------------------
  new(node_type=:unset, children=[], meta={}, al=MaRuKu::AttributeList.new )

------------------------------------------------------------------------------


(from gem maruku-0.6.1)
=== Implementation from MaRuKu::Section
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem maruku-0.6.1)
=== Implementation from Maruku
------------------------------------------------------------------------------
  new(s=nil, meta={})

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Matrix
------------------------------------------------------------------------------
  new(rows, column_size = rows[0].size)

------------------------------------------------------------------------------

Matrix.new is private; use Matrix.rows, columns, [], etc... to create.


(from ruby site)
=== Implementation from Matrix::EigenvalueDecomposition
------------------------------------------------------------------------------
  new(a)

------------------------------------------------------------------------------

Constructs the eigenvalue decomposition for a square matrix <tt>A</tt>


(from ruby site)
=== Implementation from Matrix::LUPDecomposition
------------------------------------------------------------------------------
  new(a)

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::AfterIntervalFactory
------------------------------------------------------------------------------
  new(ticks,&block)

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::Animation
------------------------------------------------------------------------------
  new(params = {})

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::AnimationFactory
------------------------------------------------------------------------------
  new(actor,options = {},&block)

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::AssetPath
------------------------------------------------------------------------------
  new(path)

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::ControlDefinition
------------------------------------------------------------------------------
  new(name,event,args)

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::EditTransitionScene
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::EventData
------------------------------------------------------------------------------
  new(window)

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::EventFactory
------------------------------------------------------------------------------
  new(event,args=[],&block)

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::EventRelay
------------------------------------------------------------------------------
  new(target,window = nil)

------------------------------------------------------------------------------

An event relay is created a with a target and optionally a window.

@param [Object] target the object that will execute the code when
  the button events have fired have been triggered.

@param [Window] window the window of the game. This parameter is
  optional and only required if the events are interested in buttons
  being held.


(from gem metro-0.3.3)
=== Implementation from Metro::Font
------------------------------------------------------------------------------
  new(gosu_font)

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::HitList
------------------------------------------------------------------------------
  new(drawers)

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::Image
------------------------------------------------------------------------------
  new(gosu_image,path,tileable)

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::Model
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------

Create an instance of a model.

@note Overridding initialize method should be avoided, using the
{#aftter_initialize) method or done with care to ensure that functionality is
preserved.


(from gem metro-0.3.3)
=== Implementation from Metro::Model::OptionsProperty::Options
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------

Create options with the provided array of options.

@param [Array] options the array of options that this object will maintain
  as it's list of options.


(from gem metro-0.3.3)
=== Implementation from Metro::Model::Property
------------------------------------------------------------------------------
  new(model,options={},&block)

------------------------------------------------------------------------------

@param [Model] model the model associated with this property. @param [Types]
options the additional options that may be set with
  this property. This may be default values or options on how
  this properby should behave.


(from gem metro-0.3.3)
=== Implementation from Metro::ModelFactory
------------------------------------------------------------------------------
  new(name,options)

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::OnUpdateOperation
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::Parameters::Options
------------------------------------------------------------------------------
  new(params = {})

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::PropertyDefinition
------------------------------------------------------------------------------
  new(name,options)

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::Sample
------------------------------------------------------------------------------
  new(sample,path)

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::Scene
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Setups up the Actors for the Scene based on the ModelFactories that have been
defined.

@note this method should not be overriden, otherwise the actors will perish!
@see #after_initialize


(from gem metro-0.3.3)
=== Implementation from Metro::SetupHandlers::GameExecution
------------------------------------------------------------------------------
  new(parameters)

------------------------------------------------------------------------------

@param [Array] parameters an array of the game parameters that are
  to be provided to this execution of the game.


(from gem metro-0.3.3)
=== Implementation from Metro::Song
------------------------------------------------------------------------------
  new(song,path)

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::Thor
------------------------------------------------------------------------------
  new(game_name)

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from Metro::Units::RectangleBounds
------------------------------------------------------------------------------
  new(params = {})

------------------------------------------------------------------------------

Create a bounds with bounds.


(from gem metro-0.3.3)
=== Implementation from Metro::Window
------------------------------------------------------------------------------
  new(width,height,fullscreen)

------------------------------------------------------------------------------

@param [Fixnum] width the width of the game window @param [Fixnum] height the
height of the game window @param [TrueClass,FalseClass] fullscreen the boolean
flag to enable or
  disable fullscreen


(from gem actionpack-2.3.5)
=== Implementation from Mime::Type
------------------------------------------------------------------------------
  new(string, symbol = nil, synonyms = [])

------------------------------------------------------------------------------


(from gem mkrf-0.2.3)
=== Implementation from Mkrf::Availability
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------

Create a new Availability instance.

Valid keys for the options hash include:
* <tt>:loaded_libs</tt> -- libraries to load by default
* <tt>:library_paths</tt> -- libraries paths to include by default
* <tt>:headers</tt> -- headers to load by default
* <tt>:compiler</tt> -- which compiler to use when determining availability
* <tt>:includes</tt> -- directories that should be searched for include files


(from gem mkrf-0.2.3)
=== Implementation from Mkrf::Generator
------------------------------------------------------------------------------
  new(extension_name, source_patterns = ["*.c"], availability_options = {}) { |self| ... }

------------------------------------------------------------------------------

Create a <tt>Generator</tt> object which writes a Rakefile to the current
directory of the local filesystem.

Params:
* <tt>extension_name</tt> -- the name of the extension
* <tt>source_patterns</tt> -- an array of patterns describing source files to
  be compiled. ["*.c"] is the default.


(from ruby site)
=== Implementation from Module
------------------------------------------------------------------------------
  Module.new                  -> mod
  Module.new {|mod| block }   -> mod

------------------------------------------------------------------------------

Creates a new anonymous module. If a block is given, it is passed the module
object, and the block is evaluated in the context of this module using
<tt>module_eval</tt>.

  fred = Module.new do
    def meth1
      "hello"
    end
    def meth2
      "bye"
    end
  end
  a = "my string"
  a.extend(fred)   #=> "my string"
  a.meth1          #=> "hello"
  a.meth2          #=> "bye"

Assign the module to a constant (name starting uppercase) if you want to treat
it like a regular module.


(from gem liquid-2.4.1)
=== Implementation from Module
------------------------------------------------------------------------------
  new(object)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from MonitorMixin
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------

Use <tt>extend MonitorMixin</tt> or <tt>include MonitorMixin</tt> instead of
this constructor.  Have look at the examples above to understand how to use
this module.


(from ruby site)
=== Implementation from MonitorMixin::ConditionVariable
------------------------------------------------------------------------------
  new(monitor)

------------------------------------------------------------------------------


(from gem multi_json-1.4.0)
=== Implementation from MultiJson::DecodeError
------------------------------------------------------------------------------
  new(message="", backtrace=[], data="")

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Mutex
------------------------------------------------------------------------------
  Mutex.new   -> mutex

------------------------------------------------------------------------------

Creates a new Mutex


(from ruby site)
=== Implementation from Mutex_m
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem mysql-2.8.1)
=== Implementation from Mysql
------------------------------------------------------------------------------
  new(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7)

------------------------------------------------------------------------------

real_connect(host=nil, user=nil, passwd=nil, db=nil, port=nil, sock=nil,
flag=nil)   



(from gem mysql2-0.3.11)
=== Implementation from Mysql2::Client
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------


(from gem mysql2-0.3.11)
=== Implementation from Mysql2::EM::Client::Watcher
------------------------------------------------------------------------------
  new(client, deferable)

------------------------------------------------------------------------------


(from gem mysql2-0.3.11)
=== Implementation from Mysql2::Error
------------------------------------------------------------------------------
  new(msg)

------------------------------------------------------------------------------


(from gem mysql-2.8.1)
=== Implementation from Mysql::Time
------------------------------------------------------------------------------
  new(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7, p8 = v8)

------------------------------------------------------------------------------

------------------------------------------------------------------------------
  Mysql::Time object method


(from ruby site)
=== Implementation from NameError
------------------------------------------------------------------------------
  NameError.new(msg [, name])  -> name_error

------------------------------------------------------------------------------

Construct a new NameError exception. If given the <em>name</em> parameter may
subsequently be examined using the <tt>NameError.name</tt> method.


(from ruby site)
=== Implementation from Net::FTP
------------------------------------------------------------------------------
  new(host = nil, user = nil, passwd = nil, acct = nil)

------------------------------------------------------------------------------

Creates and returns a new <tt>FTP</tt> object. If a <tt>host</tt> is given, a
connection is made. Additionally, if the <tt>user</tt> is given, the given
user name, password, and (optionally) account are used to log in.  See #login.


(from ruby site)
=== Implementation from Net::HTTP
------------------------------------------------------------------------------
  new(address, port = nil)

------------------------------------------------------------------------------

Creates a new Net::HTTP object for the specified server address, without
opening the TCP connection or initializing the HTTP session. The
<tt>address</tt> should be a DNS hostname or IP address.


(from gem bundler-1.2.3)
=== Implementation from Net::HTTP::Persistent
------------------------------------------------------------------------------
  new(name = nil, proxy = nil)

------------------------------------------------------------------------------

Creates a new Net::HTTP::Persistent.

Set <tt>name</tt> to keep your connections apart from everybody else's.  Not
required currently, but highly recommended.  Your library name should be good
enough.  This parameter will be required in a future version.

<tt>proxy</tt> may be set to a URI::HTTP or :ENV to pick up proxy options from
the environment.  See proxy_from_env for details.

In order to use a URI for the proxy you'll need to do some extra work beyond
URI.parse:

  proxy = URI.parse 'http://proxy.example'
  proxy.user     = 'AzureDiamond'
  proxy.password = 'hunter2'


(from ruby site)
=== Implementation from Net::HTTPGenericRequest
------------------------------------------------------------------------------
  new(m, reqbody, resbody, path, initheader = nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Net::HTTPRequest
------------------------------------------------------------------------------
  new(path, initheader = nil)

------------------------------------------------------------------------------

Creates HTTP request object.


(from ruby site)
=== Implementation from Net::HTTP
------------------------------------------------------------------------------
  new(address, port = nil)

------------------------------------------------------------------------------

Creates a new Net::HTTP object for the specified server address, without
opening the TCP connection or initializing the HTTP session. The
<tt>address</tt> should be a DNS hostname or IP address.


(from ruby site)
=== Implementation from Net::IMAP
------------------------------------------------------------------------------
  Net::IMAP.new(host, options = {})

------------------------------------------------------------------------------

Creates a new Net::IMAP object and connects it to the specified <tt>host</tt>.

<tt>options</tt> is an option hash, each key of which is a symbol.

The available options are:

port:
  port number (default value is 143 for imap, or 993 for imaps)

ssl:
  if options[:ssl] is true, then an attempt will be made to use SSL (now TLS)
  to connect to the server.  For this to work OpenSSL [OSSL] and the Ruby
  OpenSSL [RSSL] extensions need to be installed. if options[:ssl] is a hash,
  it's passed to OpenSSL::SSL::SSLContext#set_params as parameters.


The most common errors are:

Errno::ECONNREFUSED:
  connection refused by <tt>host</tt> or an intervening firewall.

Errno::ETIMEDOUT:
  connection timed out (possibly due to packets being dropped by an
  intervening firewall).

Errno::ENETUNREACH:
  there is no route to that network.

SocketError:
  hostname not known or other socket error.

Net::IMAP::ByeResponseError:
  we connected to the host, but they immediately said goodbye to us.



(from ruby site)
=== Implementation from Net::IMAP::CramMD5Authenticator
------------------------------------------------------------------------------
  new(user, password)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Net::IMAP::DigestMD5Authenticator
------------------------------------------------------------------------------
  new(user, password, authname = nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Net::IMAP::LoginAuthenticator
------------------------------------------------------------------------------
  new(user, password)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Net::IMAP::PlainAuthenticator
------------------------------------------------------------------------------
  new(user, password)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Net::IMAP::ResponseError
------------------------------------------------------------------------------
  new(response)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Net::POP3
------------------------------------------------------------------------------
  new(addr, port = nil, isapop = false)

------------------------------------------------------------------------------

Creates a new POP3 object.

<tt>address</tt> is the hostname or ip address of your POP3 server.

The optional <tt>port</tt> is the port to connect to.

The optional <tt>isapop</tt> specifies whether this connection is going to use
APOP authentication; it defaults to <tt>false</tt>.

This method does <b>not</b> open the TCP connection.


(from ruby site)
=== Implementation from Net::POP3
------------------------------------------------------------------------------
  new(addr, port = nil, isapop = false)

------------------------------------------------------------------------------

Creates a new POP3 object.

<tt>address</tt> is the hostname or ip address of your POP3 server.

The optional <tt>port</tt> is the port to connect to.

The optional <tt>isapop</tt> specifies whether this connection is going to use
APOP authentication; it defaults to <tt>false</tt>.

This method does <b>not</b> open the TCP connection.


(from ruby site)
=== Implementation from Net::POP3
------------------------------------------------------------------------------
  new(addr, port = nil, isapop = false)

------------------------------------------------------------------------------

Creates a new POP3 object.

<tt>address</tt> is the hostname or ip address of your POP3 server.

The optional <tt>port</tt> is the port to connect to.

The optional <tt>isapop</tt> specifies whether this connection is going to use
APOP authentication; it defaults to <tt>false</tt>.

This method does <b>not</b> open the TCP connection.


(from ruby site)
=== Implementation from Net::POP3
------------------------------------------------------------------------------
  new(addr, port = nil, isapop = false)

------------------------------------------------------------------------------

Creates a new POP3 object.

<tt>address</tt> is the hostname or ip address of your POP3 server.

The optional <tt>port</tt> is the port to connect to.

The optional <tt>isapop</tt> specifies whether this connection is going to use
APOP authentication; it defaults to <tt>false</tt>.

This method does <b>not</b> open the TCP connection.


(from gem net-scp-1.0.4)
=== Implementation from Net::SCP
------------------------------------------------------------------------------
  new(session)

------------------------------------------------------------------------------

Creates a new Net::SCP session on top of the given Net::SSH <tt>session</tt>
object.


(from gem net-sftp-2.0.5)
=== Implementation from Net::SFTP::Operations::Dir
------------------------------------------------------------------------------
  new(sftp)

------------------------------------------------------------------------------

Create a new instance on top of the given SFTP session instance.


(from gem net-sftp-2.0.5)
=== Implementation from Net::SFTP::Operations::Download
------------------------------------------------------------------------------
  new(sftp, local, remote, options={}, &progress)

------------------------------------------------------------------------------

Instantiates a new downloader process on top of the given SFTP session.
<tt>local</tt> is either an IO object that should receive the data, or a
string identifying the target file or directory on the local host.
<tt>remote</tt> is a string identifying the location on the remote host that
the download should source.

This will return immediately, and requires that the SSH event loop be run in
order to effect the download. (See #wait.)


(from gem net-sftp-2.0.5)
=== Implementation from Net::SFTP::Operations::File
------------------------------------------------------------------------------
  new(sftp, handle)

------------------------------------------------------------------------------

Creates a new wrapper that encapsulates the given <tt>handle</tt> (such as
would be returned by Net::SFTP::Session#open!). The <tt>sftp</tt> parameter
must be the same Net::SFTP::Session instance that opened the file.


(from gem net-sftp-2.0.5)
=== Implementation from Net::SFTP::Operations::FileFactory
------------------------------------------------------------------------------
  new(sftp)

------------------------------------------------------------------------------

Create a new instance on top of the given SFTP session instance.


(from gem net-sftp-2.0.5)
=== Implementation from Net::SFTP::Packet
------------------------------------------------------------------------------
  new(data)

------------------------------------------------------------------------------

Create a new Packet object that wraps the given <tt>data</tt> (which should be
a String). The first byte of the data will be consumed automatically and
interpreted as the #type of this packet.


(from gem net-sftp-2.0.5)
=== Implementation from Net::SFTP::Protocol::Base
------------------------------------------------------------------------------
  new(session)

------------------------------------------------------------------------------

Create a new instance of a protocol driver, servicing the given session.


(from gem net-sftp-2.0.5)
=== Implementation from Net::SFTP::Protocol::V01::Attributes
------------------------------------------------------------------------------
  new(attributes={})

------------------------------------------------------------------------------

Create a new Attributes instance with the given attributes. The following keys
are supported:

  :size:
    the size of the file

  :uid:
    the user-id that owns the file (integer)

  :gid:
    the group-id that owns the file (integer)

  :owner:
    the name of the user that owns the file (string)

  :group:
    the name of the group that owns the file (string)

  :permissions:
    the permissions on the file (integer, e.g. 0755)

  :atime:
    the access time of the file (integer, seconds since epoch)

  :mtime:
    the modification time of the file (integer, seconds since epoch)

  :extended:
    a hash of name/value pairs identifying extended info



(from gem net-sftp-2.0.5)
=== Implementation from Net::SFTP::Protocol::V01::Name
------------------------------------------------------------------------------
  new(name, longname, attributes)

------------------------------------------------------------------------------

Create a new Name object with the given name, longname, and attributes.


(from gem net-sftp-2.0.5)
=== Implementation from Net::SFTP::Protocol::V04::Attributes
------------------------------------------------------------------------------
  new(attributes={})

------------------------------------------------------------------------------

Create a new Attributes instance with the given attributes. The following keys
are supported:

  :type:
    the type of the item (integer, one of the T_ constants)

  :size:
    the size of the item (integer)

  :uid:
    the user-id that owns the file (integer)

  :gid:
    the group-id that owns the file (integer)

  :owner:
    the name of the user that owns the file (string)

  :group:
    the name of the group that owns the file (string)

  :permissions:
    the permissions on the file (integer, e.g. 0755)

  :atime:
    the access time of the file (integer, seconds since epoch)

  :atime_nseconds:
    the nanosecond component of atime (integer)

  :createtime:
    the time at which the file was created (integer, seconds since epoch)

  :createtime_nseconds:
    the nanosecond component of createtime (integer)

  :mtime:
    the modification time of the file (integer, seconds since epoch)

  :mtime_nseconds:
    the nanosecond component of mtime (integer)

  :acl:
    an array of ACL entries for the item

  :extended:
    a hash of name/value pairs identifying extended info


All of them default to <tt>nil</tt> if omitted, except for <tt>type</tt>,
which defaults to T_REGULAR.


(from gem net-sftp-2.0.5)
=== Implementation from Net::SFTP::Protocol::V04::Name
------------------------------------------------------------------------------
  new(name, attributes)

------------------------------------------------------------------------------

Create a new Name object with the given name and attributes.


(from gem net-sftp-2.0.5)
=== Implementation from Net::SFTP::Session
------------------------------------------------------------------------------
  new(session, &block)

------------------------------------------------------------------------------

Creates a new Net::SFTP instance atop the given Net::SSH connection. This will
return immediately, before the SFTP connection has been properly initialized.
Once the connection is ready, the given block will be called. If you want to
block until the connection has been initialized, try this:

  sftp = Net::SFTP::Session.new(ssh)
  sftp.loop { sftp.opening? }


(from gem net-sftp-2.0.5)
=== Implementation from Net::SFTP::StatusException
------------------------------------------------------------------------------
  new(response, text=nil)

------------------------------------------------------------------------------

Create a new status exception that reports the given code and description.


(from ruby site)
=== Implementation from Net::SMTP
------------------------------------------------------------------------------
  new(address, port = nil)

------------------------------------------------------------------------------

Creates a new Net::SMTP object.

<tt>address</tt> is the hostname or ip address of your SMTP server. 
<tt>port</tt> is the port to connect to; it defaults to port 25.

This method does not open the TCP connection.  You can use SMTP.start instead
of SMTP.new if you want to do everything at once.  Otherwise, follow SMTP.new
with SMTP#start.


(from ruby site)
=== Implementation from Net::SMTP::Response
------------------------------------------------------------------------------
  new(status, string)

------------------------------------------------------------------------------

Creates a new instance of the Response class and sets the status and string
attributes


(from ruby site)
=== Implementation from Net::SMTP
------------------------------------------------------------------------------
  new(address, port = nil)

------------------------------------------------------------------------------

Creates a new Net::SMTP object.

<tt>address</tt> is the hostname or ip address of your SMTP server. 
<tt>port</tt> is the port to connect to; it defaults to port 25.

This method does not open the TCP connection.  You can use SMTP.start instead
of SMTP.new if you want to do everything at once.  Otherwise, follow SMTP.new
with SMTP#start.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Authentication::Agent
------------------------------------------------------------------------------
  new(logger=nil)

------------------------------------------------------------------------------

Creates a new Agent object, using the optional logger instance to report
status.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Authentication::KeyManager
------------------------------------------------------------------------------
  new(logger, options={})

------------------------------------------------------------------------------

Create a new KeyManager. By default, the manager will use the ssh-agent (if it
is running).


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Authentication::Methods::Abstract
------------------------------------------------------------------------------
  new(session, options={})

------------------------------------------------------------------------------

Instantiates a new authentication method.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Authentication::Pageant::Socket
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Create a new instance that communicates with the running pageant  instance. If
no such instance is running, this will cause an error.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Authentication::Session
------------------------------------------------------------------------------
  new(transport, options={})

------------------------------------------------------------------------------

Instantiates a new Authentication::Session object over the given transport
layer abstraction.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Buffer
------------------------------------------------------------------------------
  new(content="")

------------------------------------------------------------------------------

Creates a new buffer, initialized to the given content. The position is
initialized to the beginning of the buffer.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::ChannelOpenFailed
------------------------------------------------------------------------------
  new(code, reason)

------------------------------------------------------------------------------


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Connection::Channel
------------------------------------------------------------------------------
  new(connection, type, local_id, &on_confirm_open)

------------------------------------------------------------------------------

Instantiates a new channel on the given connection, of the given type, and
with the given id. If a block is given, it will be remembered until the
channel is confirmed open by the server, and will be invoked at that time (see
#do_open_confirmation).

This also sets the default maximum packet size and maximum window size.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Connection::Session
------------------------------------------------------------------------------
  new(transport, options={})

------------------------------------------------------------------------------

Create a new connection service instance atop the given transport layer.
Initializes the listeners to be only the underlying socket object.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Connection::Session::NilChannel
------------------------------------------------------------------------------
  new(session)

------------------------------------------------------------------------------


(from gem net-ssh-gateway-1.1.0)
=== Implementation from Net::SSH::Gateway
------------------------------------------------------------------------------
  new(host, user, options={})

------------------------------------------------------------------------------

Instantiate a new Gateway object, using the given remote host as the tunnel.
The arguments here are identical to those for Net::SSH.start, and are passed
as given to that method to start up the gateway connection.

  gateway = Net::SSH::Gateway.new('host', 'user', :password => "password")

As of 1.1 there is an additional option to specify the wait time for  the
gateway thread. The default is 0.001 seconds and can be changed with the
:loop_wait option.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::KnownHosts
------------------------------------------------------------------------------
  new(source)

------------------------------------------------------------------------------

Instantiate a new KnownHosts instance that will search the given known-hosts
file. The path is expanded file File.expand_path.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Packet
------------------------------------------------------------------------------
  new(payload)

------------------------------------------------------------------------------

Create a new packet from the given payload. This will automatically parse the
packet if it is one that has been previously registered with Packet.register;
otherwise, the packet will need to be manually parsed using the methods
provided in the Net::SSH::Buffer superclass.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Proxy::Command
------------------------------------------------------------------------------
  new(command_line_template)

------------------------------------------------------------------------------

Create a new socket factory that tunnels via a command executed with the
user's shell, which is composed from the given command template.  In the
command template, `%h' will be substituted by the host name to connect and
`%p' by the port.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Proxy::HTTP
------------------------------------------------------------------------------
  new(proxy_host, proxy_port=80, options={})

------------------------------------------------------------------------------

Create a new socket factory that tunnels via the given host and port. The
<tt>options</tt> parameter is a hash of additional settings that can be used
to tweak this proxy connection. Specifically, the following options are
supported:

* :user => the user name to use when authenticating to the proxy
* :password => the password to use when authenticating


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Proxy::SOCKS4
------------------------------------------------------------------------------
  new(proxy_host, proxy_port=1080, options={})

------------------------------------------------------------------------------

Create a new proxy connection to the given proxy host and port. Optionally, a
:user key may be given to identify the username with which to authenticate.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Proxy::SOCKS5
------------------------------------------------------------------------------
  new(proxy_host, proxy_port=1080, options={})

------------------------------------------------------------------------------

Create a new proxy connection to the given proxy host and port. Optionally,
:user and :password options may be given to identify the username and password
with which to authenticate.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Service::Forward
------------------------------------------------------------------------------
  new(session)

------------------------------------------------------------------------------

Instantiates a new Forward service instance atop the given connection service
session. This will register new channel open handlers to handle the
specialized channels that the SSH port forwarding protocols employ.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Test::Channel
------------------------------------------------------------------------------
  new(script)

------------------------------------------------------------------------------

Creates a new Test::Channel instance on top of the given <tt>script</tt>
(which must be a Net::SSH::Test::Script instance).


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Test::Kex
------------------------------------------------------------------------------
  new(algorithms, connection, data)

------------------------------------------------------------------------------

Creates a new instance of the testing key-exchange algorithm with the given
arguments.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Test::LocalPacket
------------------------------------------------------------------------------
  new(type, *args, &block)

------------------------------------------------------------------------------

Extend the default Net::SSH::Test::Packet constructor to also accept an
optional block, which is used to finalize the initialization of the packet
when #process is first called.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Test::Packet
------------------------------------------------------------------------------
  new(type, *args)

------------------------------------------------------------------------------

Ceate a new packet of the given <tt>type</tt>, and with <tt>args</tt> being a
list of data elements in the order expected for packets of the given
<tt>type</tt> (see #types).


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Test::Script
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Create a new, empty script.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Test::Socket
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Create a new test socket. This will also instantiate a new
Net::SSH::Test::Script and seed it with the necessary events to power the
initialization of the connection.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Transport::Algorithms
------------------------------------------------------------------------------
  new(session, options={})

------------------------------------------------------------------------------

Instantiates a new Algorithms object, and prepares the hash of preferred
algorithms based on the options parameter and the ALGORITHMS constant.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Transport::HMAC::Abstract
------------------------------------------------------------------------------
  new(key=nil)

------------------------------------------------------------------------------


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Transport::Kex::DiffieHellmanGroup1SHA1
------------------------------------------------------------------------------
  new(algorithms, connection, data)

------------------------------------------------------------------------------

Create a new instance of the DiffieHellmanGroup1SHA1 algorithm. The data is a
Hash of symbols representing information required by this algorithm, which was
acquired during earlier processing.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Transport::Kex::DiffieHellmanGroupExchangeSHA256
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Transport::Kex::EcdhSHA2NistP256
------------------------------------------------------------------------------
  new(algorithms, connection, data)

------------------------------------------------------------------------------


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Transport::ServerVersion
------------------------------------------------------------------------------
  new(socket, logger)

------------------------------------------------------------------------------

Instantiates a new ServerVersion and immediately (and synchronously)
negotiates the SSH protocol in effect, using the given socket.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Transport::Session
------------------------------------------------------------------------------
  new(host, options={})

------------------------------------------------------------------------------

Instantiates a new transport layer abstraction. This will block until the
initial key exchange completes, leaving you with a ready-to-use transport
session.


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Transport::State
------------------------------------------------------------------------------
  new(socket, role)

------------------------------------------------------------------------------

Creates a new state object, belonging to the given socket. Initializes the
algorithms to "none".


(from gem net-ssh-2.6.1)
=== Implementation from Net::SSH::Version
------------------------------------------------------------------------------
  new(major, minor, tiny)

------------------------------------------------------------------------------

Create a new Version object with the given components.


(from ruby site)
=== Implementation from Net::Telnet
------------------------------------------------------------------------------
  new(options) { |mesg| ... }

------------------------------------------------------------------------------

Creates a new Net::Telnet object.

Attempts to connect to the host (unless the Proxy option is provided: see
below).  If a block is provided, it is yielded status messages on the attempt
to connect to the server, of the form:

  Trying localhost...
  Connected to localhost.

<tt>options</tt> is a hash of options.  The following example lists all
options and their default values.

  host = Net::Telnet::new(
           "Host"       => "localhost",  # default: "localhost"
           "Port"       => 23,           # default: 23
           "Binmode"    => false,        # default: false
           "Output_log" => "output_log", # default: nil (no output)
           "Dump_log"   => "dump_log",   # default: nil (no output)
           "Prompt"     => /[$%#>] \z/n, # default: /[$%#>] \z/n
           "Telnetmode" => true,         # default: true
           "Timeout"    => 10,           # default: 10
             # if ignore timeout then set "Timeout" to false.
           "Waittime"   => 0,            # default: 0
           "Proxy"      => proxy         # default: nil
                           # proxy is Net::Telnet or IO object
         )

The options have the following meanings:

Host:
  the hostname or IP address of the host to connect to, as a String. Defaults
  to "localhost".


Port:
  the port to connect to.  Defaults to 23.


Binmode:
  if false (the default), newline substitution is performed. Outgoing LF is
  converted to CRLF, and incoming CRLF is converted to LF.  If true, this
  substitution is not performed.  This value can also be set with the
  #binmode() method.  The outgoing conversion only applies to the #puts() and
  #print() methods, not the #write() method.  The precise nature of the
  newline conversion is also affected by the telnet options SGA and BIN.


Output_log:
  the name of the file to write connection status messages and all received
  traffic to.  In the case of a proper Telnet session, this will include the
  client input as echoed by the host; otherwise, it only includes server
  responses.  Output is appended verbatim to this file. By default, no output
  log is kept.


Dump_log:
  as for Output_log, except that output is written in hexdump format (16 bytes
  per line as hex pairs, followed by their printable equivalent), with
  connection status messages preceded by '#', sent traffic preceded by '>',
  and received traffic preceded by '<'.  By default, not dump log is kept.


Prompt:
  a regular expression matching the host's command-line prompt sequence.  This
  is needed by the Telnet class to determine when the output from a command
  has finished and the host is ready to receive a new command.  By default,
  this regular expression is /[$%#>] z/n.


Telnetmode:
  a boolean value, true by default.  In telnet mode, traffic received from the
  host is parsed for special command sequences, and these sequences are
  escaped in outgoing traffic sent using #puts() or #print() (but not
  #write()).  If you are using the Net::Telnet object to connect to a
  non-telnet service (such as SMTP or POP), this should be set to "false" to
  prevent undesired data corruption.  This value can also be set by the
  #telnetmode() method.


Timeout:
  the number of seconds to wait before timing out both the initial attempt to
  connect to host (in this constructor), and all attempts to read data from
  the host (in #waitfor(), #cmd(), and #login()).  Exceeding this timeout
  causes a TimeoutError to be raised.  The default value is 10 seconds. You
  can disable the timeout by setting this value to false. In this case, the
  connect attempt will eventually timeout on the underlying connect(2) socket
  call with an Errno::ETIMEDOUT error (but generally only after a few
  minutes), but other attempts to read data from the host will hand
  indefinitely if no data is forthcoming.


Waittime:
  the amount of time to wait after seeing what looks like a prompt (that is,
  received data that matches the Prompt option regular expression) to see if
  more data arrives. If more data does arrive in this time, Net::Telnet
  assumes that what it saw was not really a prompt.  This is to try to avoid
  false matches, but it can also lead to missing real prompts (if, for
  instance, a background process writes to the terminal soon after the prompt
  is displayed).  By default, set to 0, meaning not to wait for more data.


Proxy:
  a proxy object to used instead of opening a direct connection to the host. 
  Must be either another Net::Telnet object or an IO object.  If it is another
  Net::Telnet object, this instance will use that one's socket for
  communication.  If an IO object, it is used directly for communication.  Any
  other kind of object will cause an error to be raised.



(from ruby site)
=== Implementation from NoMethodError
------------------------------------------------------------------------------
  NoMethodError.new(msg, name [, args])  -> no_method_error

------------------------------------------------------------------------------

Construct a NoMethodError exception for a method of the given name called with
the given arguments. The name may be accessed using the <tt>#name</tt> method
on the resulting object, and the arguments using the <tt>#args</tt> method.


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::CSS::Node
------------------------------------------------------------------------------
  new(type, value)

------------------------------------------------------------------------------

Create a new Node with <tt>type</tt> and <tt>value</tt>


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::CSS::Parser
------------------------------------------------------------------------------
  new(namespaces = {})

------------------------------------------------------------------------------

Create a new CSS parser with respect to <tt>namespaces</tt>


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::HTML::Document
------------------------------------------------------------------------------
  new

------------------------------------------------------------------------------

Create a new document


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::HTML::Document::EncodingReader::JumpSAXHandler
------------------------------------------------------------------------------
  new(jumptag)

------------------------------------------------------------------------------


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::HTML::DocumentFragment
------------------------------------------------------------------------------
  new(document, tags = nil, ctx = nil)

------------------------------------------------------------------------------


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::HTML::SAX::ParserContext
------------------------------------------------------------------------------
  new(thing, encoding = 'UTF-8')

------------------------------------------------------------------------------


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::HTML::SAX::PushParser
------------------------------------------------------------------------------
  new(doc = XML::SAX::Document.new, file_name = nil, encoding = 'UTF-8')

------------------------------------------------------------------------------


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::Attr
------------------------------------------------------------------------------
  new(document, name)

------------------------------------------------------------------------------

Create a new Attr element on the <tt>document</tt> with <tt>name</tt>


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::Builder
------------------------------------------------------------------------------
  new(options = {}) { |self| ... }

------------------------------------------------------------------------------

Create a new Builder object.  <tt>options</tt> are sent to the top level
Document that is being built.

Building a document with a particular encoding for example:

  Nokogiri::XML::Builder.new(:encoding => 'UTF-8') do |xml|
    ...
  end


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::CDATA
------------------------------------------------------------------------------
  new(document, content)

------------------------------------------------------------------------------

Create a new CDATA element on the <tt>document</tt> with <tt>content</tt>


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::Comment
------------------------------------------------------------------------------
  new(document, content)

------------------------------------------------------------------------------

Create a new Comment element on the <tt>document</tt> with <tt>content</tt>


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::Document
------------------------------------------------------------------------------
  new(version = default)

------------------------------------------------------------------------------

Create a new document with <tt>version</tt> (defaults to "1.0")


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::DocumentFragment
------------------------------------------------------------------------------
  new(document)

------------------------------------------------------------------------------

Create a new DocumentFragment element on the <tt>document</tt>


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::EntityDecl
------------------------------------------------------------------------------
  new(name, doc, *args)

------------------------------------------------------------------------------


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::EntityReference
------------------------------------------------------------------------------
  new(document, content)

------------------------------------------------------------------------------

Create a new EntityReference element on the <tt>document</tt> with
<tt>name</tt>


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::Node
------------------------------------------------------------------------------
  new(name, document)

------------------------------------------------------------------------------

Create a new node with <tt>name</tt> sharing GC lifecycle with
<tt>document</tt>


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::Node::SaveOptions
------------------------------------------------------------------------------
  new(options = 0;)

------------------------------------------------------------------------------

Create a new SaveOptions object with <tt>options</tt>


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::NodeSet
------------------------------------------------------------------------------
  new(document, list = []) { |self| ... }

------------------------------------------------------------------------------

Create a NodeSet with <tt>document</tt> defaulting to <tt>list</tt>


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::ParseOptions
------------------------------------------------------------------------------
  new(options = STRICT)

------------------------------------------------------------------------------


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::ProcessingInstruction
------------------------------------------------------------------------------
  new(document, name, content)

------------------------------------------------------------------------------

Create a new ProcessingInstruction element on the <tt>document</tt> with
<tt>name</tt> and <tt>content</tt>


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::SAX::Parser
------------------------------------------------------------------------------
  new(doc = Nokogiri::XML::SAX::Document.new, encoding = 'UTF-8')

------------------------------------------------------------------------------

Create a new Parser with <tt>doc</tt> and <tt>encoding</tt>


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::SAX::ParserContext
------------------------------------------------------------------------------
  new(thing, encoding = 'UTF-8')

------------------------------------------------------------------------------


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::SAX::PushParser
------------------------------------------------------------------------------
  new(doc = XML::SAX::Document.new, file_name = nil, encoding = 'UTF-8')

------------------------------------------------------------------------------

Create a new PushParser with <tt>doc</tt> as the SAX Document, providing an
optional <tt>file_name</tt> and <tt>encoding</tt>


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::Schema
------------------------------------------------------------------------------
  new(string_or_io)

------------------------------------------------------------------------------

Create a new Nokogiri::XML::Schema object using a <tt>string_or_io</tt>
object.


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::Text
------------------------------------------------------------------------------
  new(content, document)

------------------------------------------------------------------------------

Create a new Text element on the <tt>document</tt> with <tt>content</tt>


(from gem nokogiri-1.5.5)
=== Implementation from Nokogiri::XML::XPathContext
------------------------------------------------------------------------------
  new(node)

------------------------------------------------------------------------------

Create a new XPathContext with <tt>node</tt> as the reference point.


(from gem httpclient-2.3.0.1)
=== Implementation from OAuthClient
------------------------------------------------------------------------------
  new(*arg)

------------------------------------------------------------------------------

Creates a OAuthClient instance which provides OAuth related methods in
addition to HTTPClient.

Method signature is as same as HTTPClient.  See HTTPClient.new


(from ruby site)
=== Implementation from OLEProperty
------------------------------------------------------------------------------
  new(obj, dispid, gettypes, settypes)

------------------------------------------------------------------------------


(from gem activesupport-3.2.9)
=== Implementation from ActiveSupport::HashWithIndifferentAccess
------------------------------------------------------------------------------
  new(constructor = {})

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Sync_m
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from ThreadsWait
------------------------------------------------------------------------------
  new(*threads)

------------------------------------------------------------------------------

Creates a ThreadsWait object, specifying the threads to wait on. Non-blocking.


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Storage
------------------------------------------------------------------------------
  new(arg, mode=nil, params={})

------------------------------------------------------------------------------

<tt>arg</tt> should be either a filename, or an <tt>IO</tt> object, and needs
to be seekable. <tt>mode</tt> is optional, and should be a regular mode
string.


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Storage::AllocationTable
------------------------------------------------------------------------------
  new(ole)

------------------------------------------------------------------------------


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Storage::AllocationTable::Big
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Storage::AllocationTable::Small
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Storage::DirClass
------------------------------------------------------------------------------
  new(ole)

------------------------------------------------------------------------------


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Storage::DirClass
------------------------------------------------------------------------------
  new(path)

------------------------------------------------------------------------------

as for file, explicit alias to inhibit block


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Storage::DirClass::Dir
------------------------------------------------------------------------------
  new(path, entries)

------------------------------------------------------------------------------


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Storage::Dirent
------------------------------------------------------------------------------
  new(ole, values=DEFAULT, params={})

------------------------------------------------------------------------------


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Storage::FileClass
------------------------------------------------------------------------------
  new(ole)

------------------------------------------------------------------------------


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Storage::FileClass
------------------------------------------------------------------------------
  new(path, mode='r')

------------------------------------------------------------------------------

explicit wrapper instead of alias to inhibit block


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Storage::FileClass::Stat
------------------------------------------------------------------------------
  new(dirent)

------------------------------------------------------------------------------


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Storage::Header
------------------------------------------------------------------------------
  new(values=DEFAULT)

------------------------------------------------------------------------------


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Storage::MetaData
------------------------------------------------------------------------------
  new(ole)

------------------------------------------------------------------------------


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Storage::RangesIOMigrateable
------------------------------------------------------------------------------
  new(dirent, mode='r')

------------------------------------------------------------------------------


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Storage::RangesIOResizeable
------------------------------------------------------------------------------
  new(bat, mode='r', params={})

------------------------------------------------------------------------------


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Types::FileTime
------------------------------------------------------------------------------
  new(year, month, day, hour=0, min=0, sec=0, usec=0)

------------------------------------------------------------------------------

DateTime.new is slow... faster version for FileTime


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Types::PropertySet
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------


(from gem ruby-ole-1.2.11.1)
=== Implementation from Ole::Types::PropertySet::Section
------------------------------------------------------------------------------
  new(str, property_set)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::ASN1::ASN1Data
------------------------------------------------------------------------------
  OpenSSL::ASN1::ASN1Data.new(value, tag, tag_class) => ASN1Data

------------------------------------------------------------------------------

<tt>value</tt>: Please have a look at Constructive and Primitive to see how
Ruby types are mapped to ASN.1 types and vice versa.

<tt>tag</tt>: A <tt>Number</tt> indicating the tag number.

<tt>tag_class</tt>: A <tt>Symbol</tt> indicating the tag class. Please cf.
ASN1 for possible values.

== Example
  asn1_int = OpenSSL::ASN1Data.new(42, 2, :UNIVERSAL) # => Same as OpenSSL::ASN1::Integer.new(42)
  tagged_int = OpenSSL::ASN1Data.new(42, 0, :CONTEXT_SPECIFIC) # implicitly 0-tagged INTEGER


(from ruby site)
=== Implementation from OpenSSL::ASN1::Constructive
------------------------------------------------------------------------------
  OpenSSL::ASN1::Primitive.new( value [, tag, tagging, tag_class ]) => Primitive

------------------------------------------------------------------------------

<tt>value</tt>: is mandatory.

<tt>tag</tt>: optional, may be specified for tagged values. If no <tt>tag</tt>
is specified, the UNIVERSAL tag corresponding to the Primitive sub-class is
used by default.

<tt>tagging</tt>: may be used as an encoding hint to encode a value either
explicitly or implicitly, see ASN1 for possible values.

<tt>tag_class</tt>: if <tt>tag</tt> and <tt>tagging</tt> are <tt>nil</tt> then
this is set to <tt>:UNIVERSAL</tt> by default. If either <tt>tag</tt> or
<tt>tagging</tt> are set then <tt>:CONTEXT_SPECIFIC</tt> is used as the
default. For possible values please cf. ASN1.

== Example
  int = OpenSSL::ASN1::Integer.new(42)
  zero_tagged_int = OpenSSL::ASN1::Integer.new(42, 0, :IMPLICIT)
  private_explicit_zero_tagged_int = OpenSSL::ASN1::Integer.new(42, 0, :EXPLICIT, :PRIVATE)


(from ruby site)
=== Implementation from OpenSSL::ASN1::Primitive
------------------------------------------------------------------------------
  OpenSSL::ASN1::Primitive.new( value [, tag, tagging, tag_class ]) => Primitive

------------------------------------------------------------------------------

<tt>value</tt>: is mandatory.

<tt>tag</tt>: optional, may be specified for tagged values. If no <tt>tag</tt>
is specified, the UNIVERSAL tag corresponding to the Primitive sub-class is
used by default.

<tt>tagging</tt>: may be used as an encoding hint to encode a value either
explicitly or implicitly, see ASN1 for possible values.

<tt>tag_class</tt>: if <tt>tag</tt> and <tt>tagging</tt> are <tt>nil</tt> then
this is set to <tt>:UNIVERSAL</tt> by default. If either <tt>tag</tt> or
<tt>tagging</tt> are set then <tt>:CONTEXT_SPECIFIC</tt> is used as the
default. For possible values please cf. ASN1.

== Example
  int = OpenSSL::ASN1::Integer.new(42)
  zero_tagged_int = OpenSSL::ASN1::Integer.new(42, 0, :IMPLICIT)
  private_explicit_zero_tagged_int = OpenSSL::ASN1::Integer.new(42, 0, :EXPLICIT, :PRIVATE)


(from ruby site)
=== Implementation from OpenSSL::BN
------------------------------------------------------------------------------
  BN.new => aBN
  BN.new(bn) => aBN
  BN.new(string) => aBN
  BN.new(string, 0 | 2 | 10 | 16) => aBN

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::Buffering
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::Cipher
------------------------------------------------------------------------------
  Cipher.new(string) -> cipher

------------------------------------------------------------------------------

The string must contain a valid cipher name like "AES-128-CBC" or "3DES".

A list of cipher names is available by calling OpenSSL::Cipher.ciphers.


(from ruby site)
=== Implementation from OpenSSL::Config
------------------------------------------------------------------------------
  new(filename = nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::Digest
------------------------------------------------------------------------------
  Digest.new(string [, data]) -> Digest

------------------------------------------------------------------------------

Creates a Digest instance based on <tt>string</tt>, which is either the ln
(long name) or sn (short name) of a supported digest algorithm. If
<tt>data</tt> (a <tt>String</tt>) is given, it is used as the initial input to
the Digest instance, i.e.
  digest = OpenSSL::Digest.new('sha256', 'digestdata')

is equal to
  digest = OpenSSL::Digest.new('sha256')
  digest.update('digestdata')

=== Example
  digest = OpenSSL::Digest.new('sha1')


(from ruby site)
=== Implementation from OpenSSL::Digest::Digest
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::HMAC
------------------------------------------------------------------------------
  HMAC.new(key, digest) -> hmac

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::Netscape::SPKI
------------------------------------------------------------------------------
  new(p1 = v1)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::OCSP::BasicResponse
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::OCSP::CertificateId
------------------------------------------------------------------------------
  new(p1, p2, p3 = v3)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::OCSP::Request
------------------------------------------------------------------------------
  new(p1 = v1)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::OCSP::Response
------------------------------------------------------------------------------
  new(p1 = v1)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::PKCS12
------------------------------------------------------------------------------
  PKCS12.new -> pkcs12
  PKCS12.new(str) -> pkcs12
  PKCS12.new(str, pass) -> pkcs12

------------------------------------------------------------------------------

=== Parameters
* <tt>str</tt> - Must be a DER encoded PKCS12 string.
* <tt>pass</tt> - string


(from ruby site)
=== Implementation from OpenSSL::PKCS7
------------------------------------------------------------------------------
  PKCS7.new => pkcs7
  PKCS7.new(string) => pkcs7

------------------------------------------------------------------------------

Many methods in this class aren't documented.


(from ruby site)
=== Implementation from OpenSSL::PKCS7::RecipientInfo
------------------------------------------------------------------------------
  new(p1)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::PKCS7::SignerInfo
------------------------------------------------------------------------------
  new(p1, p2, p3)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::PKey::DH
------------------------------------------------------------------------------
  DH.new([size [, generator] | string]) -> dh

------------------------------------------------------------------------------

Either generates a DH instance from scratch or by reading already existing DH
parameters from <tt>string</tt>. Note that when reading a DH instance from
data that was encoded from a DH instance by using DH#to_pem or DH#to_der the
result will <b>not</b> contain a public/private key pair yet. This needs to be
generated using DH#generate_key! first.

=== Parameters
* <tt>size</tt> is an integer representing the desired key size. Keys smaller
  than 1024 bits should be considered insecure.
* <tt>generator</tt> is a small number > 1, typically 2 or 5.
* <tt>string</tt> contains the DER or PEM encoded key.

=== Examples
  DH.new # -> dh
  DH.new(1024) # -> dh
  DH.new(1024, 5) # -> dh
  #Reading DH parameters
  dh = DH.new(File.read('parameters.pem')) # -> dh, but no public/private key yet
  dh.generate_key! # -> dh with public and private key


(from ruby site)
=== Implementation from OpenSSL::PKey::DSA
------------------------------------------------------------------------------
  DSA.new([size | string [, pass]) -> dsa

------------------------------------------------------------------------------

Creates a new DSA instance by reading an existing key from <tt>string</tt>.

=== Parameters
* <tt>size</tt> is an integer representing the desired key size.
* <tt>string</tt> contains a DER or PEM encoded key.
* <tt>pass</tt> is a string that contains an optional password.

=== Examples
  DSA.new -> dsa
  DSA.new(1024) -> dsa
  DSA.new(File.read('dsa.pem')) -> dsa
  DSA.new(File.read('dsa.pem'), 'mypassword') -> dsa


(from ruby site)
=== Implementation from OpenSSL::PKey::EC
------------------------------------------------------------------------------
  OpenSSL::PKey::EC.new()
  OpenSSL::PKey::EC.new(ec_key)
  OpenSSL::PKey::EC.new(ec_group)
  OpenSSL::PKey::EC.new("secp112r1")
  OpenSSL::PKey::EC.new(pem_string)
  OpenSSL::PKey::EC.new(pem_string [, pwd])
  OpenSSL::PKey::EC.new(der_string)

------------------------------------------------------------------------------

See the OpenSSL documentation for:
  EC_KEY_*


(from ruby site)
=== Implementation from OpenSSL::PKey::EC::Group
------------------------------------------------------------------------------
  OpenSSL::PKey::EC::Group.new("secp112r1")
  OpenSSL::PKey::EC::Group.new(ec_group)
  OpenSSL::PKey::EC::Group.new(pem_string)
  OpenSSL::PKey::EC::Group.new(der_string)
  OpenSSL::PKey::EC::Group.new(pem_file)
  OpenSSL::PKey::EC::Group.new(der_file)
  OpenSSL::PKey::EC::Group.new(:GFp_simple)
  OpenSSL::PKey::EC::Group.new(:GFp_mult)
  OpenSSL::PKey::EC::Group.new(:GFp_nist)
  OpenSSL::PKey::EC::Group.new(:GF2m_simple)
  OpenSSL::PKey::EC::Group.new(:GFp, bignum_p, bignum_a, bignum_b)
  OpenSSL::PKey::EC::Group.new(:GF2m, bignum_p, bignum_a, bignum_b)

------------------------------------------------------------------------------

See the OpenSSL documentation for EC_GROUP_*


(from ruby site)
=== Implementation from OpenSSL::PKey::EC::Point
------------------------------------------------------------------------------
  OpenSSL::PKey::EC::Point.new(point)
  OpenSSL::PKey::EC::Point.new(group)
  OpenSSL::PKey::EC::Point.new(group, bn)

------------------------------------------------------------------------------

See the OpenSSL documentation for EC_POINT_*


(from ruby site)
=== Implementation from OpenSSL::PKey::PKey
------------------------------------------------------------------------------
  PKeyClass.new -> self

------------------------------------------------------------------------------

Because PKey is an abstract class, actually calling this method explicitly
will raise a <tt>NotImplementedError</tt>.


(from ruby site)
=== Implementation from OpenSSL::PKey::RSA
------------------------------------------------------------------------------
  RSA.new(key_size)                 => RSA instance
  RSA.new(encoded_key)              => RSA instance
  RSA.new(encoded_key, pass_phrase) => RSA instance

------------------------------------------------------------------------------

Generates or loads an RSA keypair.  If an integer <tt>key_size</tt> is given
it represents the desired key size.  Keys less than 1024 bits should be
considered insecure.

A key can instead be loaded from an <tt>encoded_key</tt> which must be PEM or
DER encoded.  A <tt>pass_phrase</tt> can be used to decrypt the key.  If none
is given OpenSSL will prompt for the pass phrase.

= Examples

  OpenSSL::PKey::RSA.new 2048
  OpenSSL::PKey::RSA.new File.read 'rsa.pem'
  OpenSSL::PKey::RSA.new File.read('rsa.pem'), 'my pass phrase'


(from ruby site)
=== Implementation from OpenSSL::SSL::Nonblock
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::SSL::SSLContext
------------------------------------------------------------------------------
  SSLContext.new => ctx
  SSLContext.new(:TLSv1) => ctx
  SSLContext.new("SSLv23_client") => ctx

------------------------------------------------------------------------------

You can get a list of valid methods with OpenSSL::SSL::SSLContext::METHODS


(from ruby site)
=== Implementation from OpenSSL::SSL::SSLServer
------------------------------------------------------------------------------
  new(svr, ctx)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::SSL::SSLSocket
------------------------------------------------------------------------------
  SSLSocket.new(io) => aSSLSocket
  SSLSocket.new(io, ctx) => aSSLSocket

------------------------------------------------------------------------------

Creates a new SSL socket from <tt>io</tt> which must be a real ruby object
(not an IO-like object that responds to read/write.

If <tt>ctx</tt> is provided the SSL Sockets initial params will be taken from
the context.

The OpenSSL::Buffering module provides additional IO methods.

This method will freeze the SSLContext if one is provided; however, session
management is still allowed in the frozen SSLContext.


(from ruby site)
=== Implementation from OpenSSL::SSL::Session
------------------------------------------------------------------------------
  Session.new(SSLSocket | string) => session

------------------------------------------------------------------------------

=== Parameters
<tt>SSLSocket</tt> is an OpenSSL::SSL::SSLSocket <tt>string</tt> must be a DER
or PEM encoded Session.


(from ruby site)
=== Implementation from OpenSSL::X509::Attribute
------------------------------------------------------------------------------
  Attribute.new(oid [, value]) => attr

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::X509::CRL
------------------------------------------------------------------------------
  new(p1 = v1)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::X509::Certificate
------------------------------------------------------------------------------
  Certificate.new => cert
  Certificate.new(string) => cert

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::X509::Extension
------------------------------------------------------------------------------
  OpenSSL::X509::Extension.new asn1
  OpenSSL::X509::Extension.new name, value
  OpenSSL::X509::Extension.new name, value, critical

------------------------------------------------------------------------------

Creates an X509 extension.

The extension may be created from <tt>asn1</tt> data or from an extension
<tt>name</tt> and <tt>value</tt>.  The <tt>name</tt> may be either an OID or
an extension name.  If <tt>critical</tt> is true the extension is marked
critical.


(from ruby site)
=== Implementation from OpenSSL::X509::ExtensionFactory
------------------------------------------------------------------------------
  new(p1 = v1, p2 = v2, p3 = v3, p4 = v4)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::X509::Name
------------------------------------------------------------------------------
  X509::Name.new => name
  X509::Name.new(string) => name
  X509::Name.new(dn) => name
  X509::Name.new(dn, template) => name

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::X509::Request
------------------------------------------------------------------------------
  new(p1 = v1)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::X509::Revoked
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenSSL::X509::Store
------------------------------------------------------------------------------
  X509::Store.new => store

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenStruct
------------------------------------------------------------------------------
  new(hash=nil)

------------------------------------------------------------------------------

Creates a new OpenStruct object.  By default, the resulting OpenStruct object
will have no attributes.

The optional <tt>hash</tt>, if given, will generate attributes and values. For
example:

  require 'ostruct'
  hash = { "country" => "Australia", :population => 20_000_000 }
  data = OpenStruct.new(hash)

  p data        # -> <OpenStruct country="Australia" population=20000000>


(from ruby site)
=== Implementation from OpenURI::HTTPError
------------------------------------------------------------------------------
  new(message, io)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OpenURI::HTTPRedirect
------------------------------------------------------------------------------
  new(message, io, uri)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OptionParser
------------------------------------------------------------------------------
  new(banner = nil, width = 32, indent = ' ' * 4) { |self| ... }

------------------------------------------------------------------------------

Initializes the instance and yields itself if called with a block.

<tt>banner</tt>:
  Banner message.

<tt>width</tt>:
  Summary width.

<tt>indent</tt>:
  Summary indent.



(from ruby site)
=== Implementation from OptionParser
------------------------------------------------------------------------------
  new() { |self| ... }

------------------------------------------------------------------------------

Pushes a new List.


(from ruby site)
=== Implementation from OptionParser::Arguable
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OptionParser::List
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Just initializes all instance variables.


(from ruby site)
=== Implementation from OptionParser::ParseError
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from OptionParser::Switch
------------------------------------------------------------------------------
  new(pattern = nil, conv = nil, short = nil, long = nil, arg = nil, desc = ([] if short or long), block = Proc.new)

------------------------------------------------------------------------------


(from gem posix-spawn-0.3.6)
=== Implementation from POSIX::Spawn::Child
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------

Spawn a new process, write all input and read all output, and wait for the
program to exit. Supports the standard spawn interface as described in the
POSIX::Spawn module documentation:

  new([env], command, [argv1, ...], [options])

The following options are supported in addition to the standard POSIX::Spawn
options:

  :input   => str      Write str to the new process's standard input.
  :timeout => int      Maximum number of seconds to allow the process
                       to execute before aborting with a TimeoutExceeded
                       exception.
  :max     => total    Maximum number of bytes of output to allow the
                       process to generate before aborting with a
                       MaximumOutputExceeded exception.

Returns a new Child instance whose underlying process has already executed to
completion. The out, err, and status attributes are immediately available.


(from ruby site)
=== Implementation from PStore
------------------------------------------------------------------------------
  new(file, thread_safe = false)

------------------------------------------------------------------------------

To construct a PStore object, pass in the <em>file</em> path where you would
like the data to be stored.

PStore objects are always reentrant. But if <em>thread_safe</em> is set to
true, then it will become thread-safe at the cost of a minor performance hit.


(from gem ParseTree-3.0.8)
=== Implementation from ParseTree
------------------------------------------------------------------------------
  new(include_newlines=$DEBUG)

------------------------------------------------------------------------------

Initializes a ParseTree instance. Includes newline nodes if
<tt>include_newlines</tt> which defaults to +$DEBUG+.


(from gem ParseTree-3.0.8)
=== Implementation from ParseTreeGauntlet
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Pathname
------------------------------------------------------------------------------
  new(p1)

------------------------------------------------------------------------------

Create a Pathname object from the given String (or String-like object). If
<tt>path</tt> contains a NUL character (<tt>\0</tt>), an ArgumentError is
raised.


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::AbstractInstaller
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------

Create an AbstractInstaller. All options will be stored as instance variables,
for example:

  installer = AbstractInstaller.new(:foo => "bar")
  installer.instance_variable_get(:"@foo")   # => "bar"


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::AbstractRequestHandler
------------------------------------------------------------------------------
  new(owner_pipe, options = {})

------------------------------------------------------------------------------

Create a new RequestHandler with the given owner pipe. <tt>owner_pipe</tt>
must be the readable part of a pipe IO object.

Additionally, the following options may be given:
* memory_limit: Used to set the <tt>memory_limit</tt> attribute.
* detach_key
* connect_password
* pool_account_username
* pool_account_password_base64


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::AbstractServer
------------------------------------------------------------------------------
  new(socket_filename = nil, password = nil)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::AbstractServerCollection
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::AdminTools::ServerInstance
------------------------------------------------------------------------------
  new(path)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::AdminTools::ServerInstance::Group
------------------------------------------------------------------------------
  new(app_root, name, environment)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::AdminTools::ServerInstance::Process
------------------------------------------------------------------------------
  new(group)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::AnalyticsLogger
------------------------------------------------------------------------------
  new(logging_agent_address, username, password, node_name)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::AnalyticsLogger::Connection
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::AnalyticsLogger::Lock
------------------------------------------------------------------------------
  new(mutex)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::AnalyticsLogger::Log
------------------------------------------------------------------------------
  new(connection = nil, txn_id = nil)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::AppInitError
------------------------------------------------------------------------------
  new(message, child_exception = nil, app_type = "rails", stderr = nil)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::AppProcess
------------------------------------------------------------------------------
  new(app_root, pid, owner_pipe, server_sockets)

------------------------------------------------------------------------------

Creates a new AppProcess instance. The parameters correspond with the
attributes of the same names. No exceptions will be thrown.


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::ClassicRails::ApplicationSpawner
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------

The following options are accepted:
* 'app_root'

See SpawnManager#spawn_application for information about the options.


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::ClassicRails::CGIFixed
------------------------------------------------------------------------------
  new(params, input, output, *args)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::ClassicRails::FrameworkSpawner
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------

Creates a new instance of FrameworkSpawner.

Extra supported options:
* <tt>framework_version</tt>: The Ruby on Rails version to use. It is not
  checked whether this version is actually installed.

All other options will be passed on to ApplicationSpawner and RequestHandler.

Note that the specified Rails framework will be loaded during the entire life
time of the FrameworkSpawner server. If you wish to reload the Rails
framework's code, then restart the server by calling AbstractServer#stop and
AbstractServer#start.


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::ClassicRails::RequestHandler
------------------------------------------------------------------------------
  new(owner_pipe, options = {})

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::ConsoleTextTemplate
------------------------------------------------------------------------------
  new(input, options = {})

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::FrameworkInitError
------------------------------------------------------------------------------
  new(message, child_exception, options)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::HTMLTemplate
------------------------------------------------------------------------------
  new(template_name, options = {})

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::InitializationError
------------------------------------------------------------------------------
  new(message, child_exception = nil)

------------------------------------------------------------------------------

Create a new InitializationError. <tt>message</tt> is the error message, and
<tt>child_exception</tt> is the exception that caused initialization to fail.


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::MessageChannel
------------------------------------------------------------------------------
  new(io = nil)

------------------------------------------------------------------------------

Create a new MessageChannel by wrapping the given IO object.


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::MessageClient
------------------------------------------------------------------------------
  new(username, password, address = "unix:

------------------------------------------------------------------------------

Connect to the given server. By default it connects to the current
generation's helper server.


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::Plugin
------------------------------------------------------------------------------
  new(name, *args, &block)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::Rack::ApplicationSpawner
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------

The following options are accepted:
* 'app_root'

See SpawnManager#spawn_application for information about the options.


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::Rack::RequestHandler
------------------------------------------------------------------------------
  new(owner_pipe, app, options = {})

------------------------------------------------------------------------------

<tt>app</tt> is the Rack application object.


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::Rails3Extensions::AnalyticsLogging::ExceptionLogger
------------------------------------------------------------------------------
  new(app, analytics_logger)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::SpawnManager
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::Standalone::AppFinder
------------------------------------------------------------------------------
  new(dirs, options = {})

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::Standalone::Command
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::Standalone::ConfigFile
------------------------------------------------------------------------------
  new(context, filename)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::Standalone::ConfigFile::DisallowedContextError
------------------------------------------------------------------------------
  new(message, filename, line)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::Standalone::StartCommand
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::UnknownError
------------------------------------------------------------------------------
  new(message, class_name, backtrace)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::Utils
------------------------------------------------------------------------------
  new(filenames, termination_pipe = nil)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::Utils::FileSystemWatcher
------------------------------------------------------------------------------
  new(filenames, termination_pipe = nil)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::Utils::FileSystemWatcher::DirInfo
------------------------------------------------------------------------------
  new(filename, stat)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::Utils::FileSystemWatcher::FileInfo
------------------------------------------------------------------------------
  new(filename, stat)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::Utils::HostsFileParser
------------------------------------------------------------------------------
  new(filename_or_io = "/etc/hosts")

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::Utils::PseudoIO
------------------------------------------------------------------------------
  new(sink)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::Utils::RewindableInput
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------


(from gem passenger-3.0.18)
=== Implementation from PhusionPassenger::VersionNotFound
------------------------------------------------------------------------------
  new(message, gem_version_spec)

------------------------------------------------------------------------------

* <tt>message</tt>: The exception message.
* <tt>gem_version_spec</tt>: The Ruby on Rails Gem version specification that
  caused this error.


(from gem polyglot-0.3.3)
=== Implementation from Polyglot::NestedLoadError
------------------------------------------------------------------------------
  new(le)

------------------------------------------------------------------------------


(from gem ParseTree-3.0.8)
=== Implementation from PostUnifier
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem ParseTree-3.0.8)
=== Implementation from PreUnifier
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem predicated-0.2.6)
=== Implementation from Predicated::Binary
------------------------------------------------------------------------------
  new(left, right)

------------------------------------------------------------------------------


(from gem predicated-0.2.6)
=== Implementation from Predicated::Call
------------------------------------------------------------------------------
  new(left, method_sym, right=[])

------------------------------------------------------------------------------


(from gem predicated-0.2.6)
=== Implementation from Predicated::Constraint
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------


(from gem predicated-0.2.6)
=== Implementation from Predicated::ConstraintCheckResult
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem predicated-0.2.6)
=== Implementation from Predicated::Constraints
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem predicated-0.2.6)
=== Implementation from Predicated::Equal
------------------------------------------------------------------------------
  new(left, right)

------------------------------------------------------------------------------


(from gem predicated-0.2.6)
=== Implementation from Predicated::GreaterThan
------------------------------------------------------------------------------
  new(left, right)

------------------------------------------------------------------------------


(from gem predicated-0.2.6)
=== Implementation from Predicated::GreaterThanOrEqualTo
------------------------------------------------------------------------------
  new(left, right)

------------------------------------------------------------------------------


(from gem predicated-0.2.6)
=== Implementation from Predicated::LessThan
------------------------------------------------------------------------------
  new(left, right)

------------------------------------------------------------------------------


(from gem predicated-0.2.6)
=== Implementation from Predicated::LessThanOrEqualTo
------------------------------------------------------------------------------
  new(left, right)

------------------------------------------------------------------------------


(from gem predicated-0.2.6)
=== Implementation from Predicated::Operation
------------------------------------------------------------------------------
  new(left, method_sym, right)

------------------------------------------------------------------------------


(from gem predicated-0.2.6)
=== Implementation from Predicated::Predicate::DontKnowWhatToDoWithThisJson
------------------------------------------------------------------------------
  new(json_struct)

------------------------------------------------------------------------------


(from gem predicated-0.2.6)
=== Implementation from Predicated::Predicate::DontKnowWhatToDoWithThisSexpError
------------------------------------------------------------------------------
  new(sexp)

------------------------------------------------------------------------------


(from gem predicated-0.2.6)
=== Implementation from Predicated::Predicate::DontKnowWhatToDoWithThisXmlTag
------------------------------------------------------------------------------
  new(xml_tag)

------------------------------------------------------------------------------


(from gem predicated-0.2.6)
=== Implementation from Predicated::Predicate::SexpToPredicate
------------------------------------------------------------------------------
  new(context)

------------------------------------------------------------------------------


(from gem predicated-0.2.6)
=== Implementation from Predicated::Unary
------------------------------------------------------------------------------
  new(inner)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from PrettyPrint
------------------------------------------------------------------------------
  new(output='', maxwidth=79, newline="\n", &genspace)

------------------------------------------------------------------------------

Creates a buffer for pretty printing.

<tt>output</tt> is an output target. If it is not specified, '' is assumed. It
should have a << method which accepts the first argument <tt>obj</tt> of
PrettyPrint#text, the first argument <tt>sep</tt> of PrettyPrint#breakable,
the first argument <tt>newline</tt> of PrettyPrint.new, and the result of a
given block for PrettyPrint.new.

<tt>maxwidth</tt> specifies maximum line length. If it is not specified, 79 is
assumed. However actual outputs may overflow <tt>maxwidth</tt> if long
non-breakable texts are provided.

<tt>newline</tt> is used for line breaks. "n" is used if it is not specified.

The block is used to generate spaces. {|width| ' ' * width} is used if it is
not given.


(from ruby site)
=== Implementation from PrettyPrint::Breakable
------------------------------------------------------------------------------
  new(sep, width, q)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from PrettyPrint::Group
------------------------------------------------------------------------------
  new(depth)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from PrettyPrint::GroupQueue
------------------------------------------------------------------------------
  new(*groups)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from PrettyPrint::SingleLine
------------------------------------------------------------------------------
  new(output, maxwidth=nil, newline=nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from PrettyPrint::Text
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from PrideIO
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from PrideLOL
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Prime
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

obsolete. Use <tt>Prime</tt>::<tt>instance</tt> or class methods of
<tt>Prime</tt>.


(from ruby site)
=== Implementation from Prime::EratosthenesGenerator
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Prime::Generator23
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Prime::PseudoPrimeGenerator
------------------------------------------------------------------------------
  new(ubound = nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Prime::TrialDivisionGenerator
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Proc
------------------------------------------------------------------------------
  Proc.new {|...| block } -> a_proc
  Proc.new                -> a_proc

------------------------------------------------------------------------------

Creates a new <tt>Proc</tt> object, bound to the current context.
<tt>Proc::new</tt> may be called without a block only within a method with an
attached block, in which case that block is converted to the <tt>Proc</tt>
object.

  def proc_from
    Proc.new
  end
  proc = proc_from { "hello" }
  proc.call   #=> "hello"


(from ruby site)
=== Implementation from Psych::Coder
------------------------------------------------------------------------------
  new(tag)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Psych::Emitter
------------------------------------------------------------------------------
  Psych::Emitter.new(io, options = Psych::Emitter::OPTIONS)

------------------------------------------------------------------------------

Create a new Psych::Emitter that writes to <tt>io</tt>.


(from ruby site)
=== Implementation from Psych::Handler::DumperOptions
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Psych::Nodes::Alias
------------------------------------------------------------------------------
  new(anchor)

------------------------------------------------------------------------------

Create a new Alias that points to an <tt>anchor</tt>


(from ruby site)
=== Implementation from Psych::Nodes::Document
------------------------------------------------------------------------------
  new(version = [], tag_directives = [], implicit = false)

------------------------------------------------------------------------------

Create a new Psych::Nodes::Document object.

<tt>version</tt> is a list indicating the YAML version.
<tt>tags_directives</tt> is a list of tag directive declarations
<tt>implicit</tt> is a flag indicating whether the document will be implicitly
started.

== Example:
This creates a YAML document object that represents a YAML 1.1 document with
one tag directive, and has an implicit start:

  Psych::Nodes::Document.new(
    [1,1],
    [["!", "tag:tenderlovemaking.com,2009:"]],
    true
  )

== See Also
See also Psych::Handler#start_document


(from ruby site)
=== Implementation from Psych::Nodes::Mapping
------------------------------------------------------------------------------
  new(anchor = nil, tag = nil, implicit = true, style = BLOCK)

------------------------------------------------------------------------------

Create a new Psych::Nodes::Mapping object.

<tt>anchor</tt> is the anchor associated with the map or <tt>nil</tt>.
<tt>tag</tt> is the tag associated with the map or <tt>nil</tt>.
<tt>implicit</tt> is a boolean indicating whether or not the map was
implicitly started. <tt>style</tt> is an integer indicating the mapping style.

== See Also
See also Psych::Handler#start_mapping


(from ruby site)
=== Implementation from Psych::Nodes::Node
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Create a new Psych::Nodes::Node


(from ruby site)
=== Implementation from Psych::Nodes::Scalar
------------------------------------------------------------------------------
  new(value, anchor = nil, tag = nil, plain = true, quoted = false, style = ANY)

------------------------------------------------------------------------------

Create a new Psych::Nodes::Scalar object.

<tt>value</tt> is the string value of the scalar <tt>anchor</tt> is an
associated anchor or nil <tt>tag</tt> is an associated tag or nil
<tt>plain</tt> is a boolean value <tt>quoted</tt> is a boolean value
<tt>style</tt> is an integer idicating the string style

== See Also

See also Psych::Handler#scalar


(from ruby site)
=== Implementation from Psych::Nodes::Sequence
------------------------------------------------------------------------------
  new(anchor = nil, tag = nil, implicit = true, style = BLOCK)

------------------------------------------------------------------------------

Create a new object representing a YAML sequence.

<tt>anchor</tt> is the anchor associated with the sequence or nil.
<tt>tag</tt> is the tag associated with the sequence or nil. <tt>implicit</tt>
a boolean indicating whether or not the sequence was implicitly started.
<tt>style</tt> is an integer indicating the list style.

See Psych::Handler#start_sequence


(from ruby site)
=== Implementation from Psych::Nodes::Stream
------------------------------------------------------------------------------
  new(encoding = UTF8)

------------------------------------------------------------------------------

Create a new Psych::Nodes::Stream node with an <tt>encoding</tt> that defaults
to Psych::Nodes::Stream::UTF8.

See also Psych::Handler#start_stream


(from ruby site)
=== Implementation from Psych::Parser
------------------------------------------------------------------------------
  new(handler = Handler.new)

------------------------------------------------------------------------------

Creates a new Psych::Parser instance with <tt>handler</tt>.  YAML events will
be called on <tt>handler</tt>.  See Psych::Parser for more details.


(from ruby site)
=== Implementation from Psych::ScalarScanner
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Create a new scanner


(from ruby site)
=== Implementation from Psych::Streaming
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------

Create a new streaming emitter.  Emitter will print to <tt>io</tt>.  See
Psych::Stream for an example.


(from ruby site)
=== Implementation from Psych::SyntaxError
------------------------------------------------------------------------------
  new(file, line, col, offset, problem, context)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Psych::TreeBuilder
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Create a new TreeBuilder instance


(from ruby site)
=== Implementation from Psych::Visitors::DepthFirst
------------------------------------------------------------------------------
  new(block)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Psych::Visitors::Emitter
------------------------------------------------------------------------------
  new(io, options = {})

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Psych::Visitors::JSONTree
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Psych::Visitors::ToRuby
------------------------------------------------------------------------------
  new(ss = ScalarScanner.new)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Psych::Visitors::YAMLTree
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------


(from gem public_suffix-1.1.3)
=== Implementation from PublicSuffix::Domain
------------------------------------------------------------------------------
  new(*args) { |self| ... }

------------------------------------------------------------------------------

Creates and returns a new {PublicSuffix::Domain} instance.

@overload initialize(tld)
  Initializes with a +tld+.
  @param [String] tld The TLD (extension)

@overload initialize(tld, sld)
  Initializes with a +tld+ and +sld+.
  @param [String] tld The TLD (extension)
  @param [String] sld The TRD (domain)

@overload initialize(tld, sld, trd)
  Initializes with a +tld+, +sld+ and +trd+.
  @param [String] tld The TLD (extension)
  @param [String] sld The SLD (domain)
  @param [String] tld The TRD (subdomain)

@yield [self] Yields on self. @yieldparam [PublicSuffix::Domain] self The
newly creates instance

@example Initialize with a TLD
  PublicSuffix::Domain.new("com")
  # => #<PublicSuffix::Domain @tld="com">

@example Initialize with a TLD and SLD
  PublicSuffix::Domain.new("com", "example")
  # => #<PublicSuffix::Domain @tld="com", @trd=nil>

@example Initialize with a TLD, SLD and TRD
  PublicSuffix::Domain.new("com", "example", "wwww")
  # => #<PublicSuffix::Domain @tld="com", @trd=nil, @sld="example">


(from gem public_suffix-1.1.3)
=== Implementation from PublicSuffix::List
------------------------------------------------------------------------------
  new() { |self| ... }

------------------------------------------------------------------------------

Initializes an empty {PublicSuffix::List}.

@yield [self] Yields on self. @yieldparam [PublicSuffix::List] self The newly
created instance.


(from gem public_suffix-1.1.3)
=== Implementation from PublicSuffix::Rule::Base
------------------------------------------------------------------------------
  new(name, value = nil)

------------------------------------------------------------------------------

Initializes a new rule with name and value. If value is <tt>nil</tt>, name
also becomes the value for this rule.

@param [String] name
  The name of the rule

@param [String] value
  The value of the rule. If nil, defaults to +name+.


(from gem public_suffix-1.1.3)
=== Implementation from PublicSuffix::Rule::Exception
------------------------------------------------------------------------------
  new(name)

------------------------------------------------------------------------------

Initializes a new rule with <tt>name</tt>.

@param  [String] name   The name of this rule.


(from gem public_suffix-1.1.3)
=== Implementation from PublicSuffix::Rule::Normal
------------------------------------------------------------------------------
  new(name)

------------------------------------------------------------------------------

Initializes a new rule with <tt>name</tt>.

@param [String] name
  The name of this rule.


(from gem public_suffix-1.1.3)
=== Implementation from PublicSuffix::Rule::Wildcard
------------------------------------------------------------------------------
  new(name)

------------------------------------------------------------------------------

Initializes a new rule with <tt>name</tt>.

@param [String] name
  The name of this rule.


(from ruby site)
=== Implementation from Queue
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a new queue.


(from gem rdiscount-1.6.8)
=== Implementation from RDiscount
------------------------------------------------------------------------------
  new(text, *extensions)

------------------------------------------------------------------------------

Create a RDiscount Markdown processor. The <tt>text</tt> argument should be a
string containing Markdown text. Additional arguments may be supplied to set
various processing options:

* <tt>:smart</tt> - Enable SmartyPants processing.
* <tt>:filter_styles</tt> - Do not output <tt><style></tt> tags.
* <tt>:filter_html</tt> - Do not output any raw HTML tags included in the
  source text.
* <tt>:fold_lines</tt> - RedCloth compatible line folding (not used).
* <tt>:generate_toc</tt> - Enable Table Of Contents generation
* <tt>:no_image</tt> - Do not output any <tt><img></tt> tags.
* <tt>:no_links</tt> - Do not output any <tt><a></tt> tags.
* <tt>:no_tables</tt> - Do not output any tables.
* <tt>:strict</tt> - Disable superscript and relaxed emphasis processing.
* <tt>:autolink</tt> - Greedily urlify links.
* <tt>:safelink</tt> - Do not make links for unknown URL types.
* <tt>:no_pseudo_protocols</tt> - Do not process pseudo-protocols.


(from gem rdoc-3.12)
=== Implementation from RDoc::Alias
------------------------------------------------------------------------------
  new(text, old_name, new_name, comment, singleton = false)

------------------------------------------------------------------------------

Creates a new Alias with a token stream of <tt>text</tt> that aliases
<tt>old_name</tt> to <tt>new_name</tt>, has <tt>comment</tt> and is a
<tt>singleton</tt> context.


(from ruby site)
=== Implementation from RDoc::Alias
------------------------------------------------------------------------------
  new(text, old_name, new_name, comment, singleton = false)

------------------------------------------------------------------------------

Creates a new Alias with a token stream of <tt>text</tt> that aliases
<tt>old_name</tt> to <tt>new_name</tt>, has <tt>comment</tt> and is a
<tt>singleton</tt> context.


(from ruby site)
=== Implementation from RDoc::AnyMethod
------------------------------------------------------------------------------
  new(text, name)

------------------------------------------------------------------------------

Creates a new AnyMethod with a token stream <tt>text</tt> and <tt>name</tt>


(from gem rdoc-3.12)
=== Implementation from RDoc::AnyMethod
------------------------------------------------------------------------------
  new(text, name)

------------------------------------------------------------------------------

Creates a new AnyMethod with a token stream <tt>text</tt> and <tt>name</tt>


(from gem rdoc-3.12)
=== Implementation from RDoc::Attr
------------------------------------------------------------------------------
  new(text, name, rw, comment, singleton = false)

------------------------------------------------------------------------------

Creates a new Attr with body <tt>text</tt>, <tt>name</tt>, read/write status
<tt>rw</tt> and <tt>comment</tt>.  <tt>singleton</tt> marks this as a class
attribute.


(from ruby site)
=== Implementation from RDoc::Attr
------------------------------------------------------------------------------
  new(text, name, rw, comment, singleton = false)

------------------------------------------------------------------------------

Creates a new Attr with body <tt>text</tt>, <tt>name</tt>, read/write status
<tt>rw</tt> and <tt>comment</tt>.  <tt>singleton</tt> marks this as a class
attribute.


(from gem rdoc-3.12)
=== Implementation from RDoc::ClassModule
------------------------------------------------------------------------------
  new(name, superclass = nil)

------------------------------------------------------------------------------

Creates a new ClassModule with <tt>name</tt> with optional <tt>superclass</tt>

This is a constructor for subclasses, and must never be called directly.


(from ruby site)
=== Implementation from RDoc::ClassModule
------------------------------------------------------------------------------
  new(name, superclass = nil)

------------------------------------------------------------------------------

Creates a new ClassModule with <tt>name</tt> with optional <tt>superclass</tt>

This is a constructor for subclasses, and must never be called directly.


(from ruby site)
=== Implementation from RDoc::CodeObject
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a new CodeObject that will document itself and its children


(from gem rdoc-3.12)
=== Implementation from RDoc::CodeObject
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a new CodeObject that will document itself and its children


(from gem rdoc-3.12)
=== Implementation from RDoc::Comment
------------------------------------------------------------------------------
  new(text = nil, location = nil)

------------------------------------------------------------------------------

Creates a new comment with <tt>text</tt> that is found in the RDoc::TopLevel
<tt>location</tt>.


(from gem rdoc-3.12)
=== Implementation from RDoc::Constant
------------------------------------------------------------------------------
  new(name, value, comment)

------------------------------------------------------------------------------

Creates a new constant with <tt>name</tt>, <tt>value</tt> and <tt>comment</tt>


(from ruby site)
=== Implementation from RDoc::Constant
------------------------------------------------------------------------------
  new(name, value, comment)

------------------------------------------------------------------------------

Creates a new constant with <tt>name</tt>, <tt>value</tt> and <tt>comment</tt>


(from gem rdoc-3.12)
=== Implementation from RDoc::Context
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates an unnamed empty context with public current visibility


(from ruby site)
=== Implementation from RDoc::Context
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates an unnamed empty context with public current visibility


(from gem rdoc-3.12)
=== Implementation from RDoc::Context::Section
------------------------------------------------------------------------------
  new(parent, title, comment)

------------------------------------------------------------------------------

Creates a new section with <tt>title</tt> and <tt>comment</tt>


(from ruby site)
=== Implementation from RDoc::Context::Section
------------------------------------------------------------------------------
  new(parent, title, comment)

------------------------------------------------------------------------------

Creates a new section with <tt>title</tt> and <tt>comment</tt>


(from ruby site)
=== Implementation from RDoc::CrossReference
------------------------------------------------------------------------------
  new(context)

------------------------------------------------------------------------------

Allows cross-references to be created based on the given <tt>context</tt>
(RDoc::Context).


(from gem rdoc-3.12)
=== Implementation from RDoc::CrossReference
------------------------------------------------------------------------------
  new(context)

------------------------------------------------------------------------------

Allows cross-references to be created based on the given <tt>context</tt>
(RDoc::Context).


(from gem rdoc-3.12)
=== Implementation from RDoc::ERBIO
------------------------------------------------------------------------------
  new(str, safe_level = nil, trim_mode = nil, eoutvar = 'io')

------------------------------------------------------------------------------

Defaults <tt>eoutvar</tt> to 'io', otherwise is identical to ERB's initialize


(from ruby site)
=== Implementation from RDoc::ERBIO
------------------------------------------------------------------------------
  new(str, safe_level = nil, trim_mode = nil, eoutvar = 'io')

------------------------------------------------------------------------------

Defaults <tt>eoutvar</tt> to 'io', otherwise is identical to ERB's initialize


(from ruby site)
=== Implementation from RDoc::Generator::Darkfish
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------

Initialize a few instance variables before we start


(from gem rdoc-3.12)
=== Implementation from RDoc::Generator::Darkfish
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------

Initialize a few instance variables before we start


(from gem rdoc-3.12)
=== Implementation from RDoc::Generator::JsonIndex
------------------------------------------------------------------------------
  new(parent_generator, options)

------------------------------------------------------------------------------

Creates a new generator.  <tt>parent_generator</tt> is used to determine the
class_dir and file_dir of links in the output index.

<tt>options</tt> are the same options passed to the parent generator.


(from ruby site)
=== Implementation from RDoc::Generator::RI
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------

Set up a new ri generator


(from gem rdoc-3.12)
=== Implementation from RDoc::Generator::RI
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------

Set up a new ri generator


(from gem rdoc-3.12)
=== Implementation from RDoc::Include
------------------------------------------------------------------------------
  new(name, comment)

------------------------------------------------------------------------------

Creates a new Include for <tt>name</tt> with <tt>comment</tt>


(from ruby site)
=== Implementation from RDoc::Include
------------------------------------------------------------------------------
  new(name, comment)

------------------------------------------------------------------------------

Creates a new Include for <tt>name</tt> with <tt>comment</tt>


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup
------------------------------------------------------------------------------
  new(attribute_manager = nil)

------------------------------------------------------------------------------

Take a block of text and use various heuristics to determine its structure
(paragraphs, lists, and so on).  Invoke an event handler as we identify
significant chunks.


(from ruby site)
=== Implementation from RDoc::Markup
------------------------------------------------------------------------------
  new(attribute_manager = nil)

------------------------------------------------------------------------------

Take a block of text and use various heuristics to determine its structure
(paragraphs, lists, and so on).  Invoke an event handler as we identify
significant chunks.


(from ruby site)
=== Implementation from RDoc::Markup::AttrSpan
------------------------------------------------------------------------------
  new(length)

------------------------------------------------------------------------------

Creates a new AttrSpan for <tt>length</tt> characters


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::AttrSpan
------------------------------------------------------------------------------
  new(length)

------------------------------------------------------------------------------

Creates a new AttrSpan for <tt>length</tt> characters


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::AttributeManager
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a new attribute manager that understands bold, emphasized and teletype
text.


(from ruby site)
=== Implementation from RDoc::Markup::AttributeManager
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a new attribute manager that understands bold, emphasized and teletype
text.


(from ruby site)
=== Implementation from RDoc::Markup::BlankLine
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

RDoc::Markup::BlankLine is a singleton


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::BlankLine
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

RDoc::Markup::BlankLine is a singleton


(from ruby site)
=== Implementation from RDoc::Markup::Document
------------------------------------------------------------------------------
  new(*parts)

------------------------------------------------------------------------------

Creates a new Document with <tt>parts</tt>


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::Document
------------------------------------------------------------------------------
  new(*parts)

------------------------------------------------------------------------------

Creates a new Document with <tt>parts</tt>


(from ruby site)
=== Implementation from RDoc::Markup::Formatter
------------------------------------------------------------------------------
  new(markup = nil)

------------------------------------------------------------------------------

Creates a new Formatter


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::Formatter
------------------------------------------------------------------------------
  new(markup = nil)

------------------------------------------------------------------------------

Creates a new Formatter


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::Include
------------------------------------------------------------------------------
  new(file, include_path)

------------------------------------------------------------------------------

Creates a new include that will import <tt>file</tt> from
<tt>include_path</tt>


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::IndentedParagraph
------------------------------------------------------------------------------
  new(indent, *parts)

------------------------------------------------------------------------------

Creates a new IndentedParagraph containing <tt>parts</tt> indented with
<tt>indent</tt> spaces


(from ruby site)
=== Implementation from RDoc::Markup::IndentedParagraph
------------------------------------------------------------------------------
  new(indent, *parts)

------------------------------------------------------------------------------

Creates a new IndentedParagraph containing <tt>parts</tt> indented with
<tt>indent</tt> spaces


(from ruby site)
=== Implementation from RDoc::Markup::List
------------------------------------------------------------------------------
  new(type = nil, *items)

------------------------------------------------------------------------------

Creates a new list of <tt>type</tt> with <tt>items</tt>


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::List
------------------------------------------------------------------------------
  new(type = nil, *items)

------------------------------------------------------------------------------

Creates a new list of <tt>type</tt> with <tt>items</tt>.  Valid list types
are: <tt>:BULLET</tt>, <tt>:LABEL</tt>, <tt>:LALPHA</tt>, <tt>:NOTE</tt>,
<tt>:NUMBER</tt>, <tt>:UALPHA</tt> 


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::ListItem
------------------------------------------------------------------------------
  new(label = nil, *parts)

------------------------------------------------------------------------------

Creates a new ListItem with an optional <tt>label</tt> containing
<tt>parts</tt>


(from ruby site)
=== Implementation from RDoc::Markup::ListItem
------------------------------------------------------------------------------
  new(label = nil, *parts)

------------------------------------------------------------------------------

Creates a new ListItem with an optional <tt>label</tt> containing
<tt>parts</tt>


(from ruby site)
=== Implementation from RDoc::Markup::Parser
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a new Parser.  See also ::parse


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::Parser
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a new Parser.  See also ::parse


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::PreProcess
------------------------------------------------------------------------------
  new(input_file_name, include_path)

------------------------------------------------------------------------------

Creates a new pre-processor for <tt>input_file_name</tt> that will look for
included files in <tt>include_path</tt>


(from ruby site)
=== Implementation from RDoc::Markup::PreProcess
------------------------------------------------------------------------------
  new(input_file_name, include_path)

------------------------------------------------------------------------------

Creates a new pre-processor for <tt>input_file_name</tt> that will look for
included files in <tt>include_path</tt>


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::Raw
------------------------------------------------------------------------------
  new(*parts)

------------------------------------------------------------------------------

Creates a new Raw containing <tt>parts</tt>


(from ruby site)
=== Implementation from RDoc::Markup::Raw
------------------------------------------------------------------------------
  new(*parts)

------------------------------------------------------------------------------

Creates a new Raw containing <tt>parts</tt>


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::Special
------------------------------------------------------------------------------
  new(type, text)

------------------------------------------------------------------------------

Creates a new special sequence of <tt>type</tt> with <tt>text</tt>


(from ruby site)
=== Implementation from RDoc::Markup::Special
------------------------------------------------------------------------------
  new(type, text)

------------------------------------------------------------------------------

Creates a new special sequence of <tt>type</tt> with <tt>text</tt>


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::ToAnsi
------------------------------------------------------------------------------
  new(markup = nil)

------------------------------------------------------------------------------

Creates a new ToAnsi visitor that is ready to output vibrant ANSI color!


(from ruby site)
=== Implementation from RDoc::Markup::ToAnsi
------------------------------------------------------------------------------
  new(markup = nil)

------------------------------------------------------------------------------

Creates a new ToAnsi visitor that is ready to output vibrant ANSI color!


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::ToBs
------------------------------------------------------------------------------
  new(markup = nil)

------------------------------------------------------------------------------

Returns a new ToBs that is ready for hot backspace action!


(from ruby site)
=== Implementation from RDoc::Markup::ToBs
------------------------------------------------------------------------------
  new(markup = nil)

------------------------------------------------------------------------------

Returns a new ToBs that is ready for hot backspace action!


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::ToHtml
------------------------------------------------------------------------------
  new(markup = nil)

------------------------------------------------------------------------------

Creates a new formatter that will output HTML


(from ruby site)
=== Implementation from RDoc::Markup::ToHtml
------------------------------------------------------------------------------
  new(markup = nil)

------------------------------------------------------------------------------

Creates a new formatter that will output HTML


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::ToHtmlCrossref
------------------------------------------------------------------------------
  new(from_path, context, show_hash, hyperlink_all = false, markup = nil)

------------------------------------------------------------------------------

Creates a new crossref resolver that generates links relative to
<tt>context</tt> which lives at <tt>from_path</tt> in the generated files. 
'#' characters on references are removed unless <tt>show_hash</tt> is true. 
Only method names preceded by '#' or '::' are linked, unless
<tt>hyperlink_all</tt> is true.


(from ruby site)
=== Implementation from RDoc::Markup::ToHtmlCrossref
------------------------------------------------------------------------------
  new(from_path, context, show_hash, hyperlink_all = false, markup = nil)

------------------------------------------------------------------------------

Creates a new crossref resolver that generates links relative to
<tt>context</tt> which lives at <tt>from_path</tt> in the generated files. 
'#' characters on references are removed unless <tt>show_hash</tt> is true. 
Only method names preceded by '#' or '::' are linked, unless
<tt>hyperlink_all</tt> is true.


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::ToHtmlSnippet
------------------------------------------------------------------------------
  new(characters = 100, paragraphs = 3, markup = nil)

------------------------------------------------------------------------------

Creates a new ToHtmlSnippet formatter that will cut off the input on the next
word boundary after the given number of <tt>characters</tt> or
<tt>paragraphs</tt> of text have been encountered.


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::ToLabel
------------------------------------------------------------------------------
  new(markup = nil)

------------------------------------------------------------------------------

Creates a new formatter that will output HTML-safe labels


(from ruby site)
=== Implementation from RDoc::Markup::ToRdoc
------------------------------------------------------------------------------
  new(markup = nil)

------------------------------------------------------------------------------

Creates a new formatter that will output (mostly) RDoc markup


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::ToRdoc
------------------------------------------------------------------------------
  new(markup = nil)

------------------------------------------------------------------------------

Creates a new formatter that will output (mostly) RDoc markup


(from ruby site)
=== Implementation from RDoc::Markup::ToTtOnly
------------------------------------------------------------------------------
  new(markup = nil)

------------------------------------------------------------------------------

Creates a new tt-only formatter.


(from gem rdoc-3.12)
=== Implementation from RDoc::Markup::ToTtOnly
------------------------------------------------------------------------------
  new(markup = nil)

------------------------------------------------------------------------------

Creates a new tt-only formatter.


(from gem rdoc-3.12)
=== Implementation from RDoc::MethodAttr
------------------------------------------------------------------------------
  new(text, name)

------------------------------------------------------------------------------

Creates a new MethodAttr from token stream <tt>text</tt> and method or
attribute name <tt>name</tt>.

Usually this is called by super from a subclass.


(from ruby site)
=== Implementation from RDoc::MethodAttr
------------------------------------------------------------------------------
  new(text, name)

------------------------------------------------------------------------------

Creates a new MethodAttr from token stream <tt>text</tt> and method or
attribute name <tt>name</tt>.

Usually this is called by super from a subclass.


(from ruby site)
=== Implementation from RDoc::Parser
------------------------------------------------------------------------------
  new(top_level, file_name, content, options, stats)

------------------------------------------------------------------------------

Creates a new Parser storing <tt>top_level</tt>, <tt>file_name</tt>,
<tt>content</tt>, <tt>options</tt> and <tt>stats</tt> in instance variables.

Usually invoked by <tt>super</tt>


(from gem rdoc-3.12)
=== Implementation from RDoc::Parser
------------------------------------------------------------------------------
  new(top_level, file_name, content, options, stats)

------------------------------------------------------------------------------

Creates a new Parser storing <tt>top_level</tt>, <tt>file_name</tt>,
<tt>content</tt>, <tt>options</tt> and <tt>stats</tt> in instance variables. 
In +@preprocess+ an RDoc::Markup::PreProcess object is created which allows
processing of directives.


(from ruby site)
=== Implementation from RDoc::Parser::C
------------------------------------------------------------------------------
  new(top_level, file_name, content, options, stats)

------------------------------------------------------------------------------

Prepare to parse a C file


(from gem rdoc-3.12)
=== Implementation from RDoc::Parser::C
------------------------------------------------------------------------------
  new(top_level, file_name, content, options, stats)

------------------------------------------------------------------------------

Prepare to parse a C file


(from gem rdoc-3.12)
=== Implementation from RDoc::Parser::Ruby
------------------------------------------------------------------------------
  new(top_level, file_name, content, options, stats)

------------------------------------------------------------------------------

Creates a new Ruby parser.


(from ruby site)
=== Implementation from RDoc::Parser::Ruby
------------------------------------------------------------------------------
  new(top_level, file_name, content, options, stats)

------------------------------------------------------------------------------

Creates a new Ruby parser.


(from ruby site)
=== Implementation from RDoc::Parser::Simple
------------------------------------------------------------------------------
  new(top_level, file_name, content, options, stats)

------------------------------------------------------------------------------

Prepare to parse a plain file


(from gem rdoc-3.12)
=== Implementation from RDoc::Parser::Simple
------------------------------------------------------------------------------
  new(top_level, file_name, content, options, stats)

------------------------------------------------------------------------------

Prepare to parse a plain file


(from gem rdoc-3.12)
=== Implementation from RDoc::RD::Inline
------------------------------------------------------------------------------
  new(rdoc, reference)

------------------------------------------------------------------------------

Initializes the Inline with <tt>rdoc</tt> and <tt>inline</tt>


(from gem rdoc-3.12)
=== Implementation from RDoc::RDoc
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a new RDoc::RDoc instance.  Call #document to parse files and generate
documentation.


(from ruby site)
=== Implementation from RDoc::RDoc
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a new RDoc::RDoc instance.  Call #document to parse files and generate
documentation.


(from ruby site)
=== Implementation from RDoc::RI::Driver
------------------------------------------------------------------------------
  new(initial_options = {})

------------------------------------------------------------------------------

Creates a new driver using <tt>initial_options</tt> from ::process_args


(from gem rdoc-3.12)
=== Implementation from RDoc::RI::Driver
------------------------------------------------------------------------------
  new(initial_options = {})

------------------------------------------------------------------------------

Creates a new driver using <tt>initial_options</tt> from ::process_args


(from ruby site)
=== Implementation from RDoc::RI::Store
------------------------------------------------------------------------------
  new(path, type = nil)

------------------------------------------------------------------------------

Creates a new Store of <tt>type</tt> that will load or save to <tt>path</tt>


(from gem rdoc-3.12)
=== Implementation from RDoc::RI::Store
------------------------------------------------------------------------------
  new(path, type = nil)

------------------------------------------------------------------------------

Creates a new Store of <tt>type</tt> that will load or save to <tt>path</tt>


(from gem rdoc-3.12)
=== Implementation from RDoc::Require
------------------------------------------------------------------------------
  new(name, comment)

------------------------------------------------------------------------------

Creates a new Require that loads <tt>name</tt> with <tt>comment</tt>


(from ruby site)
=== Implementation from RDoc::Require
------------------------------------------------------------------------------
  new(name, comment)

------------------------------------------------------------------------------

Creates a new Require that loads <tt>name</tt> with <tt>comment</tt>


(from gem rdoc-3.12)
=== Implementation from RDoc::RubyLex
------------------------------------------------------------------------------
  new(content, options)

------------------------------------------------------------------------------

Creates a new lexer for <tt>content</tt>.  <tt>options</tt> is an
RDoc::Options, only +tab_width is used.


(from gem rdoc-3.12)
=== Implementation from RDoc::RubygemsHook
------------------------------------------------------------------------------
  new(spec, generate_rdoc = true, generate_ri = true)

------------------------------------------------------------------------------

Creates a new documentation generator for <tt>spec</tt>.  RDoc and ri data
generation can be disabled through <tt>generate_rdoc</tt> and
<tt>generate_ri</tt> respectively.


(from ruby site)
=== Implementation from RDoc::RubygemsHook
------------------------------------------------------------------------------
  new(spec, generate_rdoc = true, generate_ri = true)

------------------------------------------------------------------------------

Creates a new documentation generator for <tt>spec</tt>.  RDoc and ri data
generation can be disabled through <tt>generate_rdoc</tt> and
<tt>generate_ri</tt> respectively.


(from gem rdoc-3.12)
=== Implementation from RDoc::Stats
------------------------------------------------------------------------------
  new(num_files, verbosity = 1)

------------------------------------------------------------------------------

Creates a new Stats that will have <tt>num_files</tt>.  <tt>verbosity</tt>
defaults to 1 which will create an RDoc::Stats::Normal outputter.


(from ruby site)
=== Implementation from RDoc::Stats
------------------------------------------------------------------------------
  new(num_files, verbosity = 1)

------------------------------------------------------------------------------

Creates a new Stats that will have <tt>num_files</tt>.  <tt>verbosity</tt>
defaults to 1 which will create an RDoc::Stats::Normal outputter.


(from gem rdoc-3.12)
=== Implementation from RDoc::Stats::Quiet
------------------------------------------------------------------------------
  new(num_files)

------------------------------------------------------------------------------

Creates a new Quiet that will print nothing


(from ruby site)
=== Implementation from RDoc::Stats::Quiet
------------------------------------------------------------------------------
  new(num_files)

------------------------------------------------------------------------------

Creates a new Quiet that will print nothing


(from ruby site)
=== Implementation from RDoc::Task
------------------------------------------------------------------------------
  new(name = :rdoc) { |self| ... }

------------------------------------------------------------------------------

Create an RDoc task with the given name. See the RDoc::Task class overview for
documentation.


(from gem rdoc-3.12)
=== Implementation from RDoc::Task
------------------------------------------------------------------------------
  new(name = :rdoc) { |self| ... }

------------------------------------------------------------------------------

Create an RDoc task with the given name. See the RDoc::Task class overview for
documentation.


(from gem rdoc-3.12)
=== Implementation from RDoc::TomDoc
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a new TomDoc parser.  See also RDoc::Markup::parse


(from ruby site)
=== Implementation from RDoc::TopLevel
------------------------------------------------------------------------------
  new(file_name)

------------------------------------------------------------------------------

Creates a new RDoc::TopLevel with <tt>file_name</tt> only if one with the same
name does not exist in all_files.


(from gem rdoc-3.12)
=== Implementation from RDoc::TopLevel
------------------------------------------------------------------------------
  new(file_name)

------------------------------------------------------------------------------

Creates a new TopLevel for <tt>file_name</tt>


(from ruby site)
=== Implementation from REXML::AttlistDecl
------------------------------------------------------------------------------
  new(source)

------------------------------------------------------------------------------

Create an AttlistDecl, pulling the information from a Source.  Notice that
this isn't very convenient; to create an AttlistDecl, you basically have to
format it yourself, and then have the initializer parse it. Sorry, but for the
forseeable future, DTD support in REXML is pretty weak on convenience.  Have I
mentioned how much I hate DTDs?


(from ruby site)
=== Implementation from REXML::Attribute
------------------------------------------------------------------------------
  new( first, second=nil, parent=nil )

------------------------------------------------------------------------------

Constructor. FIXME: The parser doesn't catch illegal characters in attributes

first:
  Either: an Attribute, which this new attribute will become a clone of; or a
  String, which is the name of this attribute

second:
  If <tt>first</tt> is an Attribute, then this may be an Element, or nil. If
  nil, then the Element parent of this attribute is the parent of the
  <tt>first</tt> Attribute.  If the first argument is a String, then this must
  also be a String, and is the content of the attribute. If this is the
  content, it must be fully normalized (contain no illegal characters).

parent:
  Ignored unless <tt>first</tt> is a String; otherwise, may be the Element
  parent of this attribute, or nil.


  Attribute.new( attribute_to_clone )
  Attribute.new( attribute_to_clone, parent_element )
  Attribute.new( "attr", "attr_value" )
  Attribute.new( "attr", "attr_value", parent_element )


(from ruby site)
=== Implementation from REXML::Attributes
------------------------------------------------------------------------------
  new(element)

------------------------------------------------------------------------------

Constructor
element:
  the Element of which this is an Attribute



(from ruby site)
=== Implementation from REXML::CData
------------------------------------------------------------------------------
  new( first, whitespace=true, parent=nil )

------------------------------------------------------------------------------

  Constructor.  CData is data between <![CDATA[ ... ]]>

<em>Examples</em>
  CData.new( source )
  CData.new( "Here is some CDATA" )
  CData.new( "Some unprocessed data", respect_whitespace_TF, parent_element )


(from ruby site)
=== Implementation from REXML::Child
------------------------------------------------------------------------------
  new( parent = nil )

------------------------------------------------------------------------------

Constructor.  Any inheritors of this class should call super to make sure this
method is called.
parent:
  if supplied, the parent of this child will be set to the supplied value, and
  self will be added to the parent



(from ruby site)
=== Implementation from REXML::Comment
------------------------------------------------------------------------------
  new( first, second = nil )

------------------------------------------------------------------------------

Constructor.  The first argument can be one of three types: @param first If
String, the contents of this comment are set to the argument.  If Comment, the
argument is duplicated.  If Source, the argument is scanned for a comment.
@param second If the first argument is a Source, this argument should be nil,
not supplied, or a Parent to be set as the parent of this object


(from ruby site)
=== Implementation from REXML::DTD::ElementDecl
------------------------------------------------------------------------------
  new(match)

------------------------------------------------------------------------------

s*((((["']).*?5)|[^/'">]*)*?)(/)?>/um, true)


(from ruby site)
=== Implementation from REXML::DTD::EntityDecl
------------------------------------------------------------------------------
  new(src)

------------------------------------------------------------------------------

<!ENTITY name SYSTEM "..."> <!ENTITY name "...">


(from ruby site)
=== Implementation from REXML::DTD::NotationDecl
------------------------------------------------------------------------------
  new(src)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Declaration
------------------------------------------------------------------------------
  new(src)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::DocType
------------------------------------------------------------------------------
  new( first, parent=nil )

------------------------------------------------------------------------------

Constructor

  dt = DocType.new( 'foo', '-//I/Hate/External/IDs' )
  # <!DOCTYPE foo '-//I/Hate/External/IDs'>
  dt = DocType.new( doctype_to_clone )
  # Incomplete.  Shallow clone of doctype

<tt>Note</tt> that the constructor:

  Doctype.new( Source.new( "<!DOCTYPE foo 'bar'>" ) )

is <em>deprecated</em>.  Do not use it.  It will probably disappear.


(from ruby site)
=== Implementation from REXML::Document
------------------------------------------------------------------------------
  new( source = nil, context = {} )

------------------------------------------------------------------------------

Constructor @param source if supplied, must be a Document, String, or IO.
Documents have their context and Element attributes cloned. Strings are
expected to be valid XML documents.  IOs are expected to be sources of valid
XML documents. @param context if supplied, contains the context of the
document; this should be a Hash.


(from ruby site)
=== Implementation from REXML::Element
------------------------------------------------------------------------------
  new( arg = UNDEFINED, parent=nil, context=nil )

------------------------------------------------------------------------------

Constructor
arg:
  if not supplied, will be set to the default value. If a String, the name of
  this object will be set to the argument. If an Element, the object will be
  shallowly cloned; name, attributes, and namespaces will be copied.  Children
  will <tt>not</tt> be copied.

parent:
  if supplied, must be a Parent, and will be used as the parent of this
  object.

context:
  If supplied, must be a hash containing context items.  Context items
  include:

* <tt>:respect_whitespace</tt> the value of this is :<tt>all</tt> or an array
  of strings being the names of the elements to respect whitespace for. 
  Defaults to :<tt>all</tt>.
* <tt>:compress_whitespace</tt> the value can be :<tt>all</tt> or an array of
  strings being the names of the elements to ignore whitespace on. Overrides
  :<tt>respect_whitespace</tt>.
* <tt>:ignore_whitespace_nodes</tt> the value can be :<tt>all</tt> or an array
  of strings being the names of the elements in which to ignore
  whitespace-only nodes.  If this is set, Text nodes which contain only
  whitespace will not be added to the document tree.
* <tt>:raw</tt> can be :<tt>all</tt>, or an array of strings being the names
  of the elements to process in raw mode.  In raw mode, special characters in
  text is not converted to or from entities.


(from ruby site)
=== Implementation from REXML::ElementDecl
------------------------------------------------------------------------------
  new( src )

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Elements
------------------------------------------------------------------------------
  new(parent)

------------------------------------------------------------------------------

Constructor
parent:
  the parent Element



(from ruby site)
=== Implementation from REXML::Entity
------------------------------------------------------------------------------
  new(stream, value=nil, parent=nil, reference=false)

------------------------------------------------------------------------------

Create a new entity.  Simple entities can be constructed by passing a name,
value to the constructor; this creates a generic, plain entity reference. For
anything more complicated, you have to pass a Source to the constructor with
the entity definition, or use the accessor methods. <tt>WARNING</tt>: There is
no validation of entity state except when the entity is read from a stream. 
If you start poking around with the accessors, you can easily create a
non-conformant Entity.  The best thing to do is dump the stupid DTDs and use
XMLSchema instead.

  e = Entity.new( 'amp', '&' )


(from ruby site)
=== Implementation from REXML::ExternalEntity
------------------------------------------------------------------------------
  new( src )

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Formatters::Default
------------------------------------------------------------------------------
  new( ie_hack=false )

------------------------------------------------------------------------------

Prints out the XML document with no formatting -- except if id_hack is set.

ie_hack:
  If set to true, then inserts whitespace before the close of an empty tag, so
  that IE's bad XML parser doesn't choke.



(from ruby site)
=== Implementation from REXML::Formatters::Pretty
------------------------------------------------------------------------------
  new( indentation=2, ie_hack=false )

------------------------------------------------------------------------------

Create a new pretty printer.

output:
  An object implementing '<<(String)', to which the output will be written.

indentation:
  An integer greater than 0.  The indentation of each level will be this
  number of spaces.  If this is < 1, the behavior of this object is undefined.
   Defaults to 2.

ie_hack:
  If true, the printer will insert whitespace before closing empty tags,
  thereby allowing Internet Explorer's feeble XML parser to function. Defaults
  to false.



(from ruby site)
=== Implementation from REXML::Formatters::Transitive
------------------------------------------------------------------------------
  new( indentation=2, ie_hack=false )

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::IOSource
------------------------------------------------------------------------------
  new(arg, block_size=500, encoding=nil)

------------------------------------------------------------------------------

block_size has been deprecated


(from ruby site)
=== Implementation from REXML::Instruction
------------------------------------------------------------------------------
  new(target, content=nil)

------------------------------------------------------------------------------

Constructs a new Instruction @param target can be one of a number of things. 
If String, then the target of this instruction is set to this.  If an
Instruction, then the Instruction is shallowly cloned (target and content are
copied).  If a Source, then the source is scanned and parsed for an
Instruction declaration. @param content Must be either a String, or a Parent. 
Can only be a Parent if the target argument is a Source.  Otherwise, this
String is set as the content of this instruction.


(from ruby site)
=== Implementation from REXML::Light::Node
------------------------------------------------------------------------------
  new(node=nil)

------------------------------------------------------------------------------

Create a new element.


(from ruby site)
=== Implementation from REXML::NotationDecl
------------------------------------------------------------------------------
  new(name, middle, pub, sys)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Output
------------------------------------------------------------------------------
  new(real_IO, encd="iso-8859-1")

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Parent
------------------------------------------------------------------------------
  new(parent=nil)

------------------------------------------------------------------------------

Constructor @param parent if supplied, will be set as the parent of this
object


(from ruby site)
=== Implementation from REXML::ParseException
------------------------------------------------------------------------------
  new( message, source=nil, parser=nil, exception=nil )

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Parsers::BaseParser
------------------------------------------------------------------------------
  new( source )

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Parsers::LightParser
------------------------------------------------------------------------------
  new(stream)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Parsers::PullEvent
------------------------------------------------------------------------------
  new(arg)

------------------------------------------------------------------------------

The type of this event.  Will be one of :tag_start, :tag_end, :text,
:processing_instruction, :comment, :doctype, :attlistdecl, :entitydecl,
:notationdecl, :entity, :cdata, :xmldecl, or :error.


(from ruby site)
=== Implementation from REXML::Parsers::PullParser
------------------------------------------------------------------------------
  new(stream)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Parsers::SAX2Parser
------------------------------------------------------------------------------
  new(source)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Parsers::StreamParser
------------------------------------------------------------------------------
  new(source, listener)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Parsers::TreeParser
------------------------------------------------------------------------------
  new( source, build_context = Document.new )

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Parsers::UltraLightParser
------------------------------------------------------------------------------
  new(stream)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Source
------------------------------------------------------------------------------
  new(arg, encoding=nil)

------------------------------------------------------------------------------

Constructor @param arg must be a String, and should be a valid XML document
@param encoding if non-null, sets the encoding of the source to this value,
overriding all encoding detection


(from ruby site)
=== Implementation from REXML::SyncEnumerator
------------------------------------------------------------------------------
  new(*enums)

------------------------------------------------------------------------------

Creates a new SyncEnumerator which enumerates rows of given Enumerable
objects.


(from ruby site)
=== Implementation from REXML::Text
------------------------------------------------------------------------------
  new(arg, respect_whitespace=false, parent=nil, raw=nil, entity_filter=nil, illegal=NEEDS_A_SECOND_CHECK )

------------------------------------------------------------------------------

Constructor <tt>arg</tt> if a String, the content is set to the String.  If a
Text, the object is shallowly cloned.

<tt>respect_whitespace</tt> (boolean, false) if true, whitespace is respected

<tt>parent</tt> (nil) if this is a Parent object, the parent will be set to
this.

<tt>raw</tt> (nil) This argument can be given three values. If true, then the
value of used to construct this object is expected to contain no unescaped XML
markup, and REXML will not change the text. If this value is false, the string
may contain any characters, and REXML will escape any and all defined entities
whose values are contained in the text.  If this value is nil (the default),
then the raw value of the parent will be used as the raw value for this node. 
If there is no raw value for the parent, and no value is supplied, the default
is false. Use this field if you have entities defined for some text, and you
don't want REXML to escape that text in output.
  Text.new( "<&", false, nil, false ) #-> "&lt;&amp;"
  Text.new( "&lt;&amp;", false, nil, false ) #-> "&amp;lt;&amp;amp;"
  Text.new( "<&", false, nil, true )  #-> Parse exception
  Text.new( "&lt;&amp;", false, nil, true )  #-> "&lt;&amp;"
  # Assume that the entity "s" is defined to be "sean"
  # and that the entity    "r" is defined to be "russell"
  Text.new( "sean russell" )          #-> "&s; &r;"
  Text.new( "sean russell", false, nil, true ) #-> "sean russell"

<tt>entity_filter</tt> (nil) This can be an array of entities to match in the
supplied text.  This argument is only useful if <tt>raw</tt> is set to false.
  Text.new( "sean russell", false, nil, false, ["s"] ) #-> "&s; russell"
  Text.new( "sean russell", false, nil, true, ["s"] ) #-> "sean russell"

In the last example, the <tt>entity_filter</tt> argument is ignored.

<tt>illegal</tt> INTERNAL USE ONLY


(from ruby site)
=== Implementation from REXML::UndefinedNamespaceException
------------------------------------------------------------------------------
  new( prefix, source, parser )

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Validation::Choice
------------------------------------------------------------------------------
  new(context)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Validation::Event
------------------------------------------------------------------------------
  new(event_type, event_arg=nil )

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Validation::Interleave
------------------------------------------------------------------------------
  new(context)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Validation::OneOrMore
------------------------------------------------------------------------------
  new(context)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Validation::Ref
------------------------------------------------------------------------------
  new(value)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Validation::RelaxNG
------------------------------------------------------------------------------
  new(source)

------------------------------------------------------------------------------

FIXME: Namespaces


(from ruby site)
=== Implementation from REXML::Validation::State
------------------------------------------------------------------------------
  new( context )

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::Validation::ValidationException
------------------------------------------------------------------------------
  new(msg)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::XMLDecl
------------------------------------------------------------------------------
  new(version=DEFAULT_VERSION, encoding=nil, standalone=nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from REXML::XPathParser
------------------------------------------------------------------------------
  new( )

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Atom::Entry
------------------------------------------------------------------------------
  new(version=nil, encoding=nil, standalone=nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Atom::Feed
------------------------------------------------------------------------------
  new(version=nil, encoding=nil, standalone=nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::BaseParser
------------------------------------------------------------------------------
  new(rss)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::ConversionError
------------------------------------------------------------------------------
  new(string, to, from)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Converter
------------------------------------------------------------------------------
  new(to_enc, from_enc=nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Element
------------------------------------------------------------------------------
  new(do_validate=true, attrs=nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::ITunesChannelModel::ITunesCategory
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::ITunesChannelModel::ITunesImage
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::ITunesChannelModel::ITunesOwner
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::ITunesItemModel::ITunesDuration
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::ImageFaviconModel::ImageFavicon
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::ImageItemModel::ImageItem
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::ListenerMixin
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Maker::Atom::Entry
------------------------------------------------------------------------------
  new(feed_version="1.0")

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Maker::Atom::Feed
------------------------------------------------------------------------------
  new(feed_version="1.0")

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Maker::Base
------------------------------------------------------------------------------
  new(maker)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Maker::ItemsBase
------------------------------------------------------------------------------
  new(maker)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Maker::RSS09
------------------------------------------------------------------------------
  new(feed_version)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Maker::RSS091
------------------------------------------------------------------------------
  new(feed_version="0.91")

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Maker::RSS092
------------------------------------------------------------------------------
  new(feed_version="0.92")

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Maker::RSS10
------------------------------------------------------------------------------
  new(feed_version="1.0")

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Maker::RSS20
------------------------------------------------------------------------------
  new(feed_version="2.0")

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Maker::RSSBase
------------------------------------------------------------------------------
  new(feed_version)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::MissingAttributeError
------------------------------------------------------------------------------
  new(tag, attribute)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::MissingTagError
------------------------------------------------------------------------------
  new(tag, parent)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::NSError
------------------------------------------------------------------------------
  new(tag, prefix, require_uri)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::NotAvailableValueError
------------------------------------------------------------------------------
  new(tag, value, attribute=nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::NotExpectedTagError
------------------------------------------------------------------------------
  new(tag, uri, parent)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::NotExpectedTagError
------------------------------------------------------------------------------
  new(tag, uri, parent)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::NotSetError
------------------------------------------------------------------------------
  new(name, variables)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::NotValidXMLParser
------------------------------------------------------------------------------
  new(parser)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::NotWellFormedError
------------------------------------------------------------------------------
  new(line=nil, element=nil)

------------------------------------------------------------------------------

Create a new NotWellFormedError for an error at <tt>line</tt> in
<tt>element</tt>.  If a block is given the return value of the block ends up
in the error message.


(from ruby site)
=== Implementation from RSS::OverlappedPrefixError
------------------------------------------------------------------------------
  new(prefix)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Parser
------------------------------------------------------------------------------
  new(rss, parser_class=self.class.default_parser)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::RDF
------------------------------------------------------------------------------
  new(version=nil, encoding=nil, standalone=nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::RDF::Bag
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::RDF::Li
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::RDF::Channel
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::RDF::Channel::Image
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::RDF::Channel::Items
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::RDF::Seq
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::RDF::Channel::Textinput
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::RDF::Image
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::RDF::Item
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::RDF::Li
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::RDF::Seq
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::RDF::Li
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::RDF::Textinput
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::RootElementMixin
------------------------------------------------------------------------------
  new(feed_version, version=nil, encoding=nil, standalone=nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Rss
------------------------------------------------------------------------------
  new(feed_version, version=nil, encoding=nil, standalone=nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Rss::Channel::Cloud
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Rss::Channel::Image
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Rss::Channel::Item::Category
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Rss::Channel::Item::Enclosure
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Rss::Channel::Item::Guid
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Rss::Channel::Item::Source
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Rss::Channel::SkipDays::Day
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Rss::Channel::SkipHours::Hour
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::Rss::Channel::TextInput
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::TaxonomyTopicModel::TaxonomyTopic
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::TaxonomyTopicsModel::TaxonomyTopics
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::RDF::Bag
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::TooMuchTagError
------------------------------------------------------------------------------
  new(tag, parent)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::TrackBackModel10::TrackBackAbout
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::TrackBackModel10::TrackBackPing
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::TrackBackModel20::TrackBackAbout
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::TrackBackModel20::TrackBackPing
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::UnknownConversionMethodError
------------------------------------------------------------------------------
  new(to, from)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::UnknownConversionMethodError
------------------------------------------------------------------------------
  new(to, from)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::UnknownTagError
------------------------------------------------------------------------------
  new(tag, uri)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::UnsupportedMakerVersionError
------------------------------------------------------------------------------
  new(version)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::XML::Element
------------------------------------------------------------------------------
  new(name, prefix=nil, uri=nil, attributes={}, children=[])

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::XMLParserNotFound
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::XMLStyleSheet
------------------------------------------------------------------------------
  new(*attrs)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RSS::XMLStyleSheetMixin
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem rspec-core-2.12.1)
=== Implementation from RSpec::Core::CommandLine
------------------------------------------------------------------------------
  new(options, configuration=RSpec::configuration, world=RSpec::world)

------------------------------------------------------------------------------


(from gem rspec-core-2.12.1)
=== Implementation from RSpec::Core::Configuration
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem rspec-core-2.12.1)
=== Implementation from RSpec::Core::ConfigurationOptions
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------


(from gem rspec-core-2.12.1)
=== Implementation from RSpec::Core::DRbCommandLine
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------


(from gem rspec-core-2.12.1)
=== Implementation from RSpec::Core::DrbOptions
------------------------------------------------------------------------------
  new(submitted_options, filter_manager)

------------------------------------------------------------------------------


(from gem rspec-core-2.12.1)
=== Implementation from RSpec::Core::Example
------------------------------------------------------------------------------
  new(example_group_class, description, metadata, example_block=nil)

------------------------------------------------------------------------------

Creates a new instance of Example. @param example_group_class the subclass of
ExampleGroup in which this Example is declared @param description the String
passed to the `it` method (or alias) @param metadata additional args passed to
`it` to be used as metadata @param example_block the block of code that
represents the example


(from gem rspec-core-2.12.1)
=== Implementation from RSpec::Core::FilterManager
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem rspec-core-2.12.1)
=== Implementation from RSpec::Core::Formatters::BaseFormatter
------------------------------------------------------------------------------
  new(output)

------------------------------------------------------------------------------


(from gem rspec-core-2.12.1)
=== Implementation from RSpec::Core::Formatters::DocumentationFormatter
------------------------------------------------------------------------------
  new(output)

------------------------------------------------------------------------------


(from gem rspec-core-2.12.1)
=== Implementation from RSpec::Core::Formatters::HtmlFormatter
------------------------------------------------------------------------------
  new(output)

------------------------------------------------------------------------------


(from gem rspec-core-2.12.1)
=== Implementation from RSpec::Core::Formatters::HtmlPrinter
------------------------------------------------------------------------------
  new(output)

------------------------------------------------------------------------------


(from gem rspec-core-2.12.1)
=== Implementation from RSpec::Core::Formatters::JsonFormatter
------------------------------------------------------------------------------
  new(output)

------------------------------------------------------------------------------


(from gem rspec-core-2.12.1)
=== Implementation from RSpec::Core::Metadata
------------------------------------------------------------------------------
  new(parent_group_metadata=nil) { |self| ... }

------------------------------------------------------------------------------


(from gem rspec-core-2.12.1)
=== Implementation from RSpec::Core::ProjectInitializer
------------------------------------------------------------------------------
  new(arg=nil)

------------------------------------------------------------------------------


(from gem rspec-core-2.12.1)
=== Implementation from RSpec::Core::RakeTask
------------------------------------------------------------------------------
  new(*args, &task_block)

------------------------------------------------------------------------------


(from gem rspec-core-2.12.1)
=== Implementation from RSpec::Core::Reporter
------------------------------------------------------------------------------
  new(*formatters)

------------------------------------------------------------------------------


(from gem rspec-core-2.12.1)
=== Implementation from RSpec::Core::World
------------------------------------------------------------------------------
  new(configuration=RSpec.configuration)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Expectations::ExpectationTarget
------------------------------------------------------------------------------
  new(target)

------------------------------------------------------------------------------

@api private


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::BaseMatcher
------------------------------------------------------------------------------
  new(expected = nil)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::Be
------------------------------------------------------------------------------
  new(*args, &block)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::BeComparedTo
------------------------------------------------------------------------------
  new(operand, operator)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::BePredicate
------------------------------------------------------------------------------
  new(*args, &block)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::BeWithin
------------------------------------------------------------------------------
  new(delta)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::Change
------------------------------------------------------------------------------
  new(receiver=nil, message=nil, &block)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::Cover
------------------------------------------------------------------------------
  new(*expected)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::Exist
------------------------------------------------------------------------------
  new(*expected)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::Has
------------------------------------------------------------------------------
  new(expected, *args)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::Have
------------------------------------------------------------------------------
  new(expected, relativity=:exactly)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::Include
------------------------------------------------------------------------------
  new(*expected)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::RaiseError
------------------------------------------------------------------------------
  new(expected_error_or_message=Exception, expected_message=nil, &block)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::RespondTo
------------------------------------------------------------------------------
  new(*names)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::Satisfy
------------------------------------------------------------------------------
  new(&block)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::StartAndEndWith
------------------------------------------------------------------------------
  new(*expected)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::ThrowSymbol
------------------------------------------------------------------------------
  new(expected_symbol = nil, expected_arg=nil)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::YieldProbe
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::YieldSuccessiveArgs
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::BuiltIn::YieldWithArgs
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::DSL::Matcher
------------------------------------------------------------------------------
  new(name, &declarations)

------------------------------------------------------------------------------

@api private


(from gem rspec-expectations-2.12.0)
=== Implementation from RSpec::Matchers::OperatorMatcher
------------------------------------------------------------------------------
  new(actual)

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::AnyInstance::ExpectationChain
------------------------------------------------------------------------------
  new(*args, &block)

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::AnyInstance::MessageChains
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::AnyInstance::NegativeExpectationChain
------------------------------------------------------------------------------
  new(*args, &block)

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::AnyInstance::PositiveExpectationChain
------------------------------------------------------------------------------
  new(*args, &block)

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::AnyInstance::Recorder
------------------------------------------------------------------------------
  new(klass)

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::AnyInstance::StubChain
------------------------------------------------------------------------------
  new(*args, &block)

------------------------------------------------------------------------------

@private


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::AnyInstance::StubChainChain
------------------------------------------------------------------------------
  new(*args, &block)

------------------------------------------------------------------------------

@private


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::ArgumentListMatcher
------------------------------------------------------------------------------
  new(*expected_args, &block)

------------------------------------------------------------------------------

@api public @param [Array] *expected_args a list of expected literals and/or
argument matchers @param [Block] block a block with arity matching the
expected 

Initializes an `ArgumentListMatcher` with a collection of literal values
and/or argument matchers, or a block that handles the evaluation for you.

@see ArgumentMatchers @see #args_match?


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::ArgumentMatchers::AnyArgMatcher
------------------------------------------------------------------------------
  new(ignore)

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::ArgumentMatchers::BooleanMatcher
------------------------------------------------------------------------------
  new(ignore)

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::ArgumentMatchers::DuckTypeMatcher
------------------------------------------------------------------------------
  new(*methods_to_respond_to)

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::ArgumentMatchers::EqualityProxy
------------------------------------------------------------------------------
  new(given)

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::ArgumentMatchers::HashExcludingMatcher
------------------------------------------------------------------------------
  new(expected)

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::ArgumentMatchers::HashIncludingMatcher
------------------------------------------------------------------------------
  new(expected)

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::ArgumentMatchers::InstanceOf
------------------------------------------------------------------------------
  new(klass)

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::ArgumentMatchers::KindOf
------------------------------------------------------------------------------
  new(klass)

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::ArgumentMatchers::MatcherMatcher
------------------------------------------------------------------------------
  new(matcher)

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::ArgumentMatchers::RegexpMatcher
------------------------------------------------------------------------------
  new(regexp)

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::Constant
------------------------------------------------------------------------------
  new(name)

------------------------------------------------------------------------------

@api private


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::ConstantMutator::BaseMutator
------------------------------------------------------------------------------
  new(full_constant_name, mutated_value, transfer_nested_constants)

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::ErrorGenerator
------------------------------------------------------------------------------
  new(target, name, options={})

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::InstanceMethodStasher
------------------------------------------------------------------------------
  new(klass, method)

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::MessageExpectation
------------------------------------------------------------------------------
  new(error_generator, expectation_ordering, expected_from, method_double, expected_received_count=1, opts={}, &implementation)

------------------------------------------------------------------------------

@private


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::MethodDouble
------------------------------------------------------------------------------
  new(object, method_name, proxy)

------------------------------------------------------------------------------

@private


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::NegativeMessageExpectation
------------------------------------------------------------------------------
  new(error_generator, expectation_ordering, expected_from, method_double, &implementation)

------------------------------------------------------------------------------

@private


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::OrderGroup
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::Proxy
------------------------------------------------------------------------------
  new(object, name=nil, options={})

------------------------------------------------------------------------------

@private


(from gem rspec-mocks-2.12.0)
=== Implementation from RSpec::Mocks::TestDouble
------------------------------------------------------------------------------
  new(name=nil, stubs_and_options={})

------------------------------------------------------------------------------

Creates a new test double with a `name` (that will be used in error messages
only)


(from gem rvm-1.11.3.5)
=== Implementation from RVM::Environment
------------------------------------------------------------------------------
  new(environment_name = "default", options = {})

------------------------------------------------------------------------------

Creates a new environment with the given name and optionally a set of extra
environment variables to be set on load.


(from gem rvm-1.11.3.5)
=== Implementation from RVM::Environment::AliasWrapper
------------------------------------------------------------------------------
  new(parent)

------------------------------------------------------------------------------


(from gem rvm-1.11.3.5)
=== Implementation from RVM::Environment::CleanupWrapper
------------------------------------------------------------------------------
  new(parent)

------------------------------------------------------------------------------


(from gem rvm-1.11.3.5)
=== Implementation from RVM::Environment::EnvWrapper
------------------------------------------------------------------------------
  new(parent)

------------------------------------------------------------------------------


(from gem rvm-1.11.3.5)
=== Implementation from RVM::Environment::GemsetWrapper
------------------------------------------------------------------------------
  new(parent)

------------------------------------------------------------------------------


(from gem rvm-1.11.3.5)
=== Implementation from RVM::Environment::GemsetWrapper::GlobalCacheHelper
------------------------------------------------------------------------------
  new(parent)

------------------------------------------------------------------------------


(from gem rvm-1.11.3.5)
=== Implementation from RVM::Environment::ListWrapper
------------------------------------------------------------------------------
  new(parent)

------------------------------------------------------------------------------


(from gem rvm-1.11.3.5)
=== Implementation from RVM::Environment::ToolsWrapper
------------------------------------------------------------------------------
  new(parent)

------------------------------------------------------------------------------


(from gem rvm-1.11.3.5)
=== Implementation from RVM::ErrorWithResult
------------------------------------------------------------------------------
  new(result, message = nil)

------------------------------------------------------------------------------


(from gem rvm-1.11.3.5)
=== Implementation from RVM::Shell::AbstractWrapper
------------------------------------------------------------------------------
  new(sh = 'bash', &setup_block)

------------------------------------------------------------------------------

Initializes a new shell wrapper, including setting the default setup block.
Implementations must override this method but must ensure that they call super
to perform the expected standard setup.


(from gem rvm-1.11.3.5)
=== Implementation from RVM::Shell::Result
------------------------------------------------------------------------------
  new(command, status, stdout, stderr)

------------------------------------------------------------------------------

Creates a new result object with the given details.


(from gem thin-1.5.0)
=== Implementation from Rack::Adapter::Rails
------------------------------------------------------------------------------
  new(options={})

------------------------------------------------------------------------------


(from gem thin-1.5.0)
=== Implementation from Rack::Adapter::Rails::CGIWrapper
------------------------------------------------------------------------------
  new(request, response, *args)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Auth::AbstractHandler
------------------------------------------------------------------------------
  new(app, realm=nil, &authenticator)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Auth::AbstractRequest
------------------------------------------------------------------------------
  new(env)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Auth::Digest::MD5
------------------------------------------------------------------------------
  new(app, realm=nil, opaque=nil, &authenticator)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Auth::Digest::Nonce
------------------------------------------------------------------------------
  new(timestamp = Time.now, given_digest = nil)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Auth::Digest::Params
------------------------------------------------------------------------------
  new() { |self| ... }

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::BodyProxy
------------------------------------------------------------------------------
  new(body, &block)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Builder
------------------------------------------------------------------------------
  new(default_app = nil,&block)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Cascade
------------------------------------------------------------------------------
  new(apps, catch=[404, 405])

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Chunked
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Chunked::Body
------------------------------------------------------------------------------
  new(body)

------------------------------------------------------------------------------


(from gem rack-codehighlighter-0.5.0)
=== Implementation from Rack::Codehighlighter
------------------------------------------------------------------------------
  new(app, highlighter = :censor, opts = {})

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::CommonLogger
------------------------------------------------------------------------------
  new(app, logger=nil)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::ConditionalGet
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Config
------------------------------------------------------------------------------
  new(app, &block)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::ContentLength
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::ContentType
------------------------------------------------------------------------------
  new(app, content_type = "text/html")

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Deflater
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Deflater::DeflateStream
------------------------------------------------------------------------------
  new(body)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Deflater::GzipStream
------------------------------------------------------------------------------
  new(body, mtime)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Directory
------------------------------------------------------------------------------
  new(root, app=nil)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::ETag
------------------------------------------------------------------------------
  new(app, no_cache_control = nil, cache_control = DEFAULT_CACHE_CONTROL)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::File
------------------------------------------------------------------------------
  new(root, cache_control = nil)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::ForwardRequest
------------------------------------------------------------------------------
  new(url, env={})

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Handler::Mongrel
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Handler::SCGI
------------------------------------------------------------------------------
  new(settings = {})

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Handler::WEBrick
------------------------------------------------------------------------------
  new(server, app)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Head
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Lint
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Lock
------------------------------------------------------------------------------
  new(app, mutex = Mutex.new)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Logger
------------------------------------------------------------------------------
  new(app, level = ::Logger::INFO)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::MethodOverride
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::MockRequest
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::MockResponse
------------------------------------------------------------------------------
  new(status, headers, body, errors=StringIO.new(""))

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Multipart::Generator
------------------------------------------------------------------------------
  new(params, first = true)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Multipart::Parser
------------------------------------------------------------------------------
  new(env)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Multipart::UploadedFile
------------------------------------------------------------------------------
  new(path, content_type = "text/plain", binary = false)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::NullLogger
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem rack-protection-1.2.0)
=== Implementation from Rack::Protection
------------------------------------------------------------------------------
  new(app, options = {})

------------------------------------------------------------------------------


(from gem rack-protection-1.2.0)
=== Implementation from Rack::Protection::Base
------------------------------------------------------------------------------
  new(app, options = {})

------------------------------------------------------------------------------


(from gem rack-protection-1.2.0)
=== Implementation from Rack::Protection::EscapedParams
------------------------------------------------------------------------------
  new(*)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Recursive
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Reloader
------------------------------------------------------------------------------
  new(app, cooldown = 10, backend = Stat)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Request
------------------------------------------------------------------------------
  new(env)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Response
------------------------------------------------------------------------------
  new(body=[], status=200, header={}) { |self| ... }

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::RewindableInput
------------------------------------------------------------------------------
  new(io)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Runtime
------------------------------------------------------------------------------
  new(app, name = nil)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Sendfile
------------------------------------------------------------------------------
  new(app, variation=nil)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Server
------------------------------------------------------------------------------
  new(options = nil)

------------------------------------------------------------------------------

Options may include:
* :app
    a rack application to run (overrides :config)

* :config
    a rackup configuration file path to load (.ru)

* :environment
    this selects the middleware that will be wrapped around
    your application. Default options available are:
      - development: CommonLogger, ShowExceptions, and Lint
      - deployment: CommonLogger
      - none: no extra middleware
    note: when the server is a cgi server, CommonLogger is not included.

* :server
    choose a specific Rack::Handler, e.g. cgi, fcgi, webrick

* :daemonize
    if true, the server will daemonize itself (fork, detach, etc)

* :pid
    path to write a pid file after daemonize

* :Host
    the host address to bind to (used by supporting Rack::Handler)

* :Port
    the port to bind to (used by supporting Rack::Handler)

* :AccessLog
    webrick acess log options (or supporting Rack::Handler)

* :debug
    turn on debug output ($DEBUG = true)

* :warn
    turn on warnings ($-w = true)

* :include
    add given paths to $LOAD_PATH

* :require
    require the given libraries


(from gem rack-1.4.1)
=== Implementation from Rack::Session::Abstract::ID
------------------------------------------------------------------------------
  new(app, options={})

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Session::Abstract::SessionHash
------------------------------------------------------------------------------
  new(by, env)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Session::Cookie
------------------------------------------------------------------------------
  new(app, options={})

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Session::Memcache
------------------------------------------------------------------------------
  new(app, options={})

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Session::Pool
------------------------------------------------------------------------------
  new(app, options={})

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::ShowExceptions
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::ShowStatus
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from gem deckrb-0.3.0)
=== Implementation from Rack::Static
------------------------------------------------------------------------------
  new(app, options={})

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Static
------------------------------------------------------------------------------
  new(app, options={})

------------------------------------------------------------------------------


(from gem rack-test-0.6.2)
=== Implementation from Rack::Test::Session
------------------------------------------------------------------------------
  new(mock_session)

------------------------------------------------------------------------------

Creates a Rack::Test::Session for a given Rack app or Rack::MockSession.

Note: Generally, you won't need to initialize a Rack::Test::Session directly.
Instead, you should include Rack::Test::Methods into your testing context.
(See README.rdoc for an example)


(from gem rack-test-0.6.2)
=== Implementation from Rack::Test::UploadedFile
------------------------------------------------------------------------------
  new(path, content_type = "text/plain", binary = false)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::URLMap
------------------------------------------------------------------------------
  new(map = {})

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Utils::Context
------------------------------------------------------------------------------
  new(app_f, app_r)

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Utils::HeaderHash
------------------------------------------------------------------------------
  new(hash={})

------------------------------------------------------------------------------


(from gem rack-1.4.1)
=== Implementation from Rack::Utils::KeySpaceConstrainedParams
------------------------------------------------------------------------------
  new(limit = Utils.key_space_limit)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Rake::Application
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Initialize a Rake::Application object.


(from gem rake-10.0.2)
=== Implementation from Rake::Application
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Initialize a Rake::Application object.


(from gem rake-10.0.2)
=== Implementation from Rake::CompositePublisher
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Rake::CompositePublisher
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem rake-10.0.2)
=== Implementation from Rake::FileList
------------------------------------------------------------------------------
  new(*patterns) { |self| ... }

------------------------------------------------------------------------------

Create a file list from the globbable patterns given.  If you wish to perform
multiple includes or excludes at object build time, use the "yield self"
pattern.

Example:
  file_list = FileList.new('lib   /*.rb', 'test/test*.rb')

  pkg_files = FileList.new('lib/   *') do |fl|
    fl.exclude(/\bCVS\b/)
  end


(from ruby site)
=== Implementation from Rake::FileList
------------------------------------------------------------------------------
  new(*patterns) { |self| ... }

------------------------------------------------------------------------------

Create a file list from the globbable patterns given.  If you wish to perform
multiple includes or excludes at object build time, use the "yield self"
pattern.

Example:
  file_list = FileList.new('lib   /*.rb', 'test/test*.rb')

  pkg_files = FileList.new('lib/   *') do |fl|
    fl.exclude(/\bCVS\b/)
  end


(from ruby site)
=== Implementation from Rake::FtpFile
------------------------------------------------------------------------------
  new(path, entry)

------------------------------------------------------------------------------


(from gem rake-10.0.2)
=== Implementation from Rake::FtpFile
------------------------------------------------------------------------------
  new(path, entry)

------------------------------------------------------------------------------


(from gem rake-10.0.2)
=== Implementation from Rake::FtpUploader
------------------------------------------------------------------------------
  new(path, host, account, password)

------------------------------------------------------------------------------

Create an FTP uploader targeting the directory <tt>path</tt> on <tt>host</tt>
using the given account and password.  <tt>path</tt> will be the root path of
the uploader.


(from ruby site)
=== Implementation from Rake::FtpUploader
------------------------------------------------------------------------------
  new(path, host, account, password)

------------------------------------------------------------------------------

Create an FTP uploader targeting the directory <tt>path</tt> on <tt>host</tt>
using the given account and password.  <tt>path</tt> will be the root path of
the uploader.


(from gem rake-10.0.2)
=== Implementation from Rake::InvocationChain
------------------------------------------------------------------------------
  new(value, tail)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Rake::InvocationChain
------------------------------------------------------------------------------
  new(value, tail)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Rake::NameSpace
------------------------------------------------------------------------------
  new(task_manager, scope_list)

------------------------------------------------------------------------------

Create a namespace lookup object using the given task manager and the list of
scopes.


(from gem rake-10.0.2)
=== Implementation from Rake::NameSpace
------------------------------------------------------------------------------
  new(task_manager, scope_list)

------------------------------------------------------------------------------

Create a namespace lookup object using the given task manager and the list of
scopes.


(from ruby site)
=== Implementation from Rake::PackageTask
------------------------------------------------------------------------------
  new(name=nil, version=nil) { |self| ... }

------------------------------------------------------------------------------

Create a Package Task with the given name and version.  Use
<tt>:noversion</tt> as the version to build a package without a version or to
provide a fully-versioned package name.


(from gem rake-10.0.2)
=== Implementation from Rake::PackageTask
------------------------------------------------------------------------------
  new(name=nil, version=nil) { |self| ... }

------------------------------------------------------------------------------

Create a Package Task with the given name and version.  Use
<tt>:noversion</tt> as the version to build a package without a version or to
provide a fully-versioned package name.


(from ruby site)
=== Implementation from Rake::PseudoStatus
------------------------------------------------------------------------------
  new(code=0)

------------------------------------------------------------------------------


(from gem rake-10.0.2)
=== Implementation from Rake::PseudoStatus
------------------------------------------------------------------------------
  new(code=0)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Rake::RubyForgePublisher
------------------------------------------------------------------------------
  new(projname, user)

------------------------------------------------------------------------------


(from gem rake-10.0.2)
=== Implementation from Rake::RubyForgePublisher
------------------------------------------------------------------------------
  new(projname, user)

------------------------------------------------------------------------------


(from gem rake-10.0.2)
=== Implementation from Rake::RuleRecursionOverflowError
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Rake::RuleRecursionOverflowError
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Rake::SshDirPublisher
------------------------------------------------------------------------------
  new(host, remote_dir, local_dir)

------------------------------------------------------------------------------


(from gem rake-10.0.2)
=== Implementation from Rake::SshDirPublisher
------------------------------------------------------------------------------
  new(host, remote_dir, local_dir)

------------------------------------------------------------------------------


(from gem rake-10.0.2)
=== Implementation from Rake::SshFilePublisher
------------------------------------------------------------------------------
  new(host, remote_dir, local_dir, *files)

------------------------------------------------------------------------------

Create a publisher using the give host information.


(from ruby site)
=== Implementation from Rake::SshFilePublisher
------------------------------------------------------------------------------
  new(host, remote_dir, local_dir, *files)

------------------------------------------------------------------------------

Create a publisher using the give host information.


(from gem rake-10.0.2)
=== Implementation from Rake::Task
------------------------------------------------------------------------------
  new(task_name, app)

------------------------------------------------------------------------------

Create a task named <tt>task_name</tt> with no actions or prerequisites. Use
<tt>enhance</tt> to add actions and prerequisites.


(from ruby site)
=== Implementation from Rake::Task
------------------------------------------------------------------------------
  new(task_name, app)

------------------------------------------------------------------------------

Create a task named <tt>task_name</tt> with no actions or prerequisites. Use
<tt>enhance</tt> to add actions and prerequisites.


(from gem rake-10.0.2)
=== Implementation from Rake::TaskArguments
------------------------------------------------------------------------------
  new(names, values, parent=nil)

------------------------------------------------------------------------------

Create a TaskArgument object with a list of named arguments (given by :names)
and a set of associated values (given by :values).  :parent is the parent
argument object.


(from ruby site)
=== Implementation from Rake::TaskArguments
------------------------------------------------------------------------------
  new(names, values, parent=nil)

------------------------------------------------------------------------------

Create a TaskArgument object with a list of named arguments (given by :names)
and a set of associated values (given by :values).  :parent is the parent
argument object.


(from ruby site)
=== Implementation from Rake::TaskManager
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem rake-10.0.2)
=== Implementation from Rake::TaskManager
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Rake::TestTask
------------------------------------------------------------------------------
  new(name=:test) { |self| ... }

------------------------------------------------------------------------------

Create a testing task.


(from gem rake-10.0.2)
=== Implementation from Rake::TestTask
------------------------------------------------------------------------------
  new(name=:test) { |self| ... }

------------------------------------------------------------------------------

Create a testing task.


(from ruby site)
=== Implementation from Random
------------------------------------------------------------------------------
  Random.new([seed]) -> prng

------------------------------------------------------------------------------

Creates new Mersenne Twister based pseudorandom number generator with seed. 
When the argument seed is omitted, the generator is initialized with
Random.new_seed.

The argument seed is used to ensure repeatable sequences of random numbers
between different runs of the program.

  prng = Random.new(1234)
  [ prng.rand, prng.rand ]   #=> [0.191519450378892, 0.622108771039832]
  [ prng.integer(10), prng.integer(1000) ]  #=> [4, 664]
  prng = Random.new(1234)
  [ prng.rand, prng.rand ]   #=> [0.191519450378892, 0.622108771039832]


(from ruby site)
=== Implementation from Range
------------------------------------------------------------------------------
  Range.new(start, end, exclusive=false)    -> range

------------------------------------------------------------------------------

Constructs a range using the given <em>start</em> and <em>end</em>. If the
third parameter is omitted or is <tt>false</tt>, the <em>range</em> will
include the end object; otherwise, it will be excluded.


(from gem ruby-ole-1.2.11.1)
=== Implementation from RangesIO
------------------------------------------------------------------------------
  new(io, mode='r', params={})

------------------------------------------------------------------------------

<tt>io</tt>:
  the parent io object that we are wrapping.

<tt>mode</tt>:
  the mode to use

<tt>params</tt>:
  hash of params.

* :ranges - byte offsets, either:
  1. an array of ranges [1..2, 4..5, 6..8] or
  2. an array of arrays, where the second is length [[1, 1], [4, 1], [6, 2]]
     for the above (think the way String indexing works)
* :close_parent - boolean to close parent when this object is closed

NOTE: the <tt>ranges</tt> can overlap.


(from gem ParseTree-3.0.8)
=== Implementation from RawParseTree
------------------------------------------------------------------------------
  new(include_newlines=$DEBUG)

------------------------------------------------------------------------------

Initializes a ParseTree instance. Includes newline nodes if
<tt>include_newlines</tt> which defaults to +$DEBUG+.


(from gem RedCloth-4.2.9)
=== Implementation from RedCloth
------------------------------------------------------------------------------
  new( *args, &block )

------------------------------------------------------------------------------

A convenience method for creating a new TextileDoc. See RedCloth::TextileDoc.


(from gem RedCloth-4.2.9)
=== Implementation from RedCloth::TextileDoc
------------------------------------------------------------------------------
  new( string, restrictions = [] )

------------------------------------------------------------------------------

Returns a new RedCloth object, based on <em>string</em>, observing  any
<em>restrictions</em> specified.

  r = RedCloth.new( "h1. A *bold* man" )
    #=> "h1. A *bold* man"
  r.to_html
    #=>"<h1>A <b>bold</b> man</h1>"


(from gem redcarpet-2.1.1)
=== Implementation from Redcarpet::Render::XHTML
------------------------------------------------------------------------------
  new(extensions={})

------------------------------------------------------------------------------


(from gem redcarpet-2.1.1)
=== Implementation from RedcarpetCompat
------------------------------------------------------------------------------
  new(text, *exts)

------------------------------------------------------------------------------


(from gem rubygems-bundler-1.1.0)
=== Implementation from RegenerateBinstubsCommand
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Regexp
------------------------------------------------------------------------------
  Regexp.new(string, [options [, lang]])        -> regexp
  Regexp.new(regexp)                            -> regexp
  Regexp.compile(string, [options [, lang]])    -> regexp
  Regexp.compile(regexp)                        -> regexp

------------------------------------------------------------------------------

Constructs a new regular expression from <em>pattern</em>, which can be either
a <tt>String</tt> or a <tt>Regexp</tt> (in which case that regexp's options
are propagated, and new options may not be specified (a change as of Ruby
1.8). If <em>options</em> is a <tt>Fixnum</tt>, it should be one or more of
the constants <tt>Regexp::EXTENDED</tt>, <tt>Regexp::IGNORECASE</tt>, and
<tt>Regexp::MULTILINE</tt>, <em>or</em>-ed together. Otherwise, if
<em>options</em> is not <tt>nil</tt>, the regexp will be case insensitive.
When the <em>lang</em> parameter is `n' or `N' sets the regexp no encoding.

  r1 = Regexp.new('^a-z+:\\s+\w+')           #=> /^a-z+:\s+\w+/
  r2 = Regexp.new('cat', true)               #=> /cat/i
  r3 = Regexp.new('dog', Regexp::EXTENDED)   #=> /dog/x
  r4 = Regexp.new(r2)                        #=> /cat/i


(from gem rerun-0.6.5)
=== Implementation from Rerun::Runner
------------------------------------------------------------------------------
  new(run_command, options = {})

------------------------------------------------------------------------------


(from gem rerun-0.6.5)
=== Implementation from Rerun::Watcher
------------------------------------------------------------------------------
  new(&client_callback)

------------------------------------------------------------------------------


(from gem rerun-0.6.5)
=== Implementation from Rerun::Watcher::Directory
------------------------------------------------------------------------------
  new(dir, expression)

------------------------------------------------------------------------------


(from gem rerun-0.6.5)
=== Implementation from Rerun::Watcher::FoundFile
------------------------------------------------------------------------------
  new(file_name, mod_time, size)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Resolv
------------------------------------------------------------------------------
  new(resolvers=[Hosts.new, DNS.new])

------------------------------------------------------------------------------

Creates a new Resolv using <tt>resolvers</tt>.


(from ruby site)
=== Implementation from Resolv::DNS
------------------------------------------------------------------------------
  new(config_info=nil)

------------------------------------------------------------------------------

Creates a new DNS resolver.

<tt>config_info</tt> can be:

nil:
  Uses /etc/resolv.conf.

String:
  Path to a file using /etc/resolv.conf's format.

Hash:
  Must contain :nameserver, :search and :ndots keys.

:nameserver_port can be used to specify port number of nameserver address.

The value of :nameserver should be an address string or an array of address
strings.
* :nameserver => '8.8.8.8'
* :nameserver => ['8.8.8.8', '8.8.4.4']

The value of :nameserver_port should be an array of pair of nameserver address
and port number.
* :nameserver_port => [['8.8.8.8', 53], ['8.8.4.4', 53]]

Example:

  Resolv::DNS.new(:nameserver => ['210.251.121.21'],
                  :search => ['ruby-lang.org'],
                  :ndots => 1)


(from ruby site)
=== Implementation from Resolv::DNS::Resource::DomainName
------------------------------------------------------------------------------
  new(name)

------------------------------------------------------------------------------

Creates a new DomainName from <tt>name</tt>.


(from ruby site)
=== Implementation from Resolv::DNS::Resource::Generic
------------------------------------------------------------------------------
  new(data)

------------------------------------------------------------------------------

Creates a new generic resource.


(from ruby site)
=== Implementation from Resolv::DNS::Resource::HINFO
------------------------------------------------------------------------------
  new(cpu, os)

------------------------------------------------------------------------------

Creates a new HINFO running <tt>os</tt> on <tt>cpu</tt>.


(from ruby site)
=== Implementation from Resolv::DNS::Resource::IN::A
------------------------------------------------------------------------------
  new(address)

------------------------------------------------------------------------------

Creates a new A for <tt>address</tt>.


(from ruby site)
=== Implementation from Resolv::DNS::Resource::IN::AAAA
------------------------------------------------------------------------------
  new(address)

------------------------------------------------------------------------------

Creates a new AAAA for <tt>address</tt>.


(from ruby site)
=== Implementation from Resolv::DNS::Resource::IN::SRV
------------------------------------------------------------------------------
  new(priority, weight, port, target)

------------------------------------------------------------------------------

Create a SRV resource record.

See the documentation for #priority, #weight, #port and #target for
<tt>priority</tt>, <tt>weight</tt>, +port and <tt>target</tt> respectively.


(from ruby site)
=== Implementation from Resolv::DNS::Resource::IN::WKS
------------------------------------------------------------------------------
  new(address, protocol, bitmap)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Resolv::DNS::Resource::MINFO
------------------------------------------------------------------------------
  new(rmailbx, emailbx)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Resolv::DNS::Resource::MX
------------------------------------------------------------------------------
  new(preference, exchange)

------------------------------------------------------------------------------

Creates a new MX record with <tt>preference</tt>, accepting mail at
<tt>exchange</tt>.


(from ruby site)
=== Implementation from Resolv::DNS::Resource::SOA
------------------------------------------------------------------------------
  new(mname, rname, serial, refresh, retry_, expire, minimum)

------------------------------------------------------------------------------

Creates a new SOA record.  See the attr documentation for the details of each
argument.


(from ruby site)
=== Implementation from Resolv::DNS::Resource::TXT
------------------------------------------------------------------------------
  new(first_string, *rest_strings)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Resolv::Hosts
------------------------------------------------------------------------------
  new(filename = DefaultFileName)

------------------------------------------------------------------------------

Creates a new Resolv::Hosts, using <tt>filename</tt> for its data source.


(from ruby site)
=== Implementation from Rinda::DRbObjectTemplate
------------------------------------------------------------------------------
  new(uri=nil, ref=nil)

------------------------------------------------------------------------------

Creates a new DRbObjectTemplate that will match against <tt>uri</tt> and
<tt>ref</tt>.


(from ruby site)
=== Implementation from Rinda::NotifyTemplateEntry
------------------------------------------------------------------------------
  new(place, event, tuple, expires=nil)

------------------------------------------------------------------------------

Creates a new NotifyTemplateEntry that watches <tt>place</tt> for +event+s
that match <tt>tuple</tt>.


(from ruby site)
=== Implementation from Rinda::RingFinger
------------------------------------------------------------------------------
  new(broadcast_list=@@broadcast_list, port=Ring_PORT)

------------------------------------------------------------------------------

Creates a new RingFinger that will look for RingServers at <tt>port</tt> on
the addresses in <tt>broadcast_list</tt>.


(from ruby site)
=== Implementation from Rinda::RingProvider
------------------------------------------------------------------------------
  new(klass, front, desc, renewer = nil)

------------------------------------------------------------------------------

Creates a RingProvider that will provide a <tt>klass</tt> service running on
<tt>front</tt>, with a <tt>description</tt>.  <tt>renewer</tt> is optional.


(from ruby site)
=== Implementation from Rinda::RingServer
------------------------------------------------------------------------------
  new(ts, port=Ring_PORT)

------------------------------------------------------------------------------

Advertises <tt>ts</tt> on the UDP broadcast address at <tt>port</tt>.


(from ruby site)
=== Implementation from Rinda::SimpleRenewer
------------------------------------------------------------------------------
  new(sec=180)

------------------------------------------------------------------------------

Creates a new SimpleRenewer that keeps an object alive for another
<tt>sec</tt> seconds.


(from ruby site)
=== Implementation from Rinda::Tuple
------------------------------------------------------------------------------
  new(ary_or_hash)

------------------------------------------------------------------------------

Creates a new Tuple from <tt>ary_or_hash</tt> which must be an Array or Hash.


(from ruby site)
=== Implementation from Rinda::TupleBag::TupleBin
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Rinda::TupleEntry
------------------------------------------------------------------------------
  new(ary, sec=nil)

------------------------------------------------------------------------------

Creates a TupleEntry based on <tt>ary</tt> with an optional renewer or expiry
time <tt>sec</tt>.

A renewer must implement the <tt>renew</tt> method which returns a Numeric,
nil, or true to indicate when the tuple has expired.


(from ruby site)
=== Implementation from Rinda::TupleSpace
------------------------------------------------------------------------------
  new(period=60)

------------------------------------------------------------------------------

Creates a new TupleSpace.  <tt>period</tt> is used to control how often to
look for dead tuples after modifications to the TupleSpace.

If no dead tuples are found <tt>period</tt> seconds after the last
modification, the TupleSpace will stop looking for dead tuples.


(from ruby site)
=== Implementation from Rinda::TupleSpaceProxy
------------------------------------------------------------------------------
  new(ts)

------------------------------------------------------------------------------

Creates a new TupleSpaceProxy to wrap <tt>ts</tt>.


(from ruby site)
=== Implementation from Rinda::WaitTemplateEntry
------------------------------------------------------------------------------
  new(place, ary, expires=nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Ripper
------------------------------------------------------------------------------
  Ripper.new(src, filename="(ripper)", lineno=1) -> ripper

------------------------------------------------------------------------------

Create a new Ripper object. <em>src</em> must be a String, an IO, or an Object
which has #gets method.

This method does not starts parsing. See also Ripper#parse and Ripper.parse.


(from ruby site)
=== Implementation from Ripper::Filter
------------------------------------------------------------------------------
  new(src, filename = '-', lineno = 1)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Ripper::TokenPattern::MatchData
------------------------------------------------------------------------------
  new(tokens, match)

------------------------------------------------------------------------------


(from gem ruby2ruby-1.3.1)
=== Implementation from Ruby2Ruby
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RubyLex
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem ruby_parser-2.0.6)
=== Implementation from RubyLexer
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem ruby_parser-2.0.6)
=== Implementation from RubyParser
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem ruby_parser-2.0.6)
=== Implementation from RubyParser::Environment
------------------------------------------------------------------------------
  new(dyn = false)

------------------------------------------------------------------------------


(from gem ruby_parser-2.0.6)
=== Implementation from RubyParser::Keyword::KWtable
------------------------------------------------------------------------------
  new(name, id=[], state=nil)

------------------------------------------------------------------------------


(from gem ruby_parser-2.0.6)
=== Implementation from RubyParser::StackState
------------------------------------------------------------------------------
  new(name)

------------------------------------------------------------------------------


(from gem ruby_parser-2.0.6)
=== Implementation from RubyParserGauntlet
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RubyToken::TkId
------------------------------------------------------------------------------
  new(seek, line_no, char_no, name)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RubyToken::TkNode
------------------------------------------------------------------------------
  new(seek, line_no, char_no)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RubyToken::TkOPASGN
------------------------------------------------------------------------------
  new(seek, line_no, char_no, op)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RubyToken::TkUnknownChar
------------------------------------------------------------------------------
  new(seek, line_no, char_no, id)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RubyToken::TkVal
------------------------------------------------------------------------------
  new(seek, line_no, char_no, value = nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RubyToken::Token
------------------------------------------------------------------------------
  new(seek, line_no, char_no)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from RubyVM::InstructionSequence
------------------------------------------------------------------------------
  new(p1, p2 = v2, p3 = v3, p4 = v4, p5 = v5)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from SDBM
------------------------------------------------------------------------------
  new(p1, p2 = v2)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Attachment
------------------------------------------------------------------------------
  new(string_or_readable = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::CGIStub
------------------------------------------------------------------------------
  new(*arg)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Driver
------------------------------------------------------------------------------
  new(log, logid, namespace, endpoint_url, httpproxy = nil, soapaction = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::EncodingStyle::ASPDotNetHandler
------------------------------------------------------------------------------
  new(charset = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::EncodingStyle::ASPDotNetHandler::SOAPTemporalObject
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::EncodingStyle::ASPDotNetHandler::SOAPUnknown
------------------------------------------------------------------------------
  new(handler, elename)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::EncodingStyle::Handler
------------------------------------------------------------------------------
  new(charset)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::EncodingStyle::LiteralHandler
------------------------------------------------------------------------------
  new(charset = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::EncodingStyle::SOAPHandler
------------------------------------------------------------------------------
  new(charset = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::EncodingStyle::SOAPHandler::SOAPTemporalObject
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::EncodingStyle::SOAPHandler::SOAPUnknown
------------------------------------------------------------------------------
  new(handler, elename, type, extraattr)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::FaultError
------------------------------------------------------------------------------
  new(fault)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Filter::FilterChain
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Generator
------------------------------------------------------------------------------
  new(opt = {})

------------------------------------------------------------------------------


(from gem yieldmanager-0.9.2)
=== Implementation from SOAP::Generator
------------------------------------------------------------------------------
  new(opt = {})

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::HTTPStreamHandler
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::NetHttpClient
------------------------------------------------------------------------------
  new(proxy = nil, agent = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::HTTPStreamHandler::HttpPostRequestFilter
------------------------------------------------------------------------------
  new(filterchain)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Header::Handler
------------------------------------------------------------------------------
  new(elename)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Header::HandlerSet
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Header::MappingHandler
------------------------------------------------------------------------------
  new(elename, registry = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Header::SimpleHandler
------------------------------------------------------------------------------
  new(elename)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::MIMEMessage
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::MIMEMessage::Header
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::MIMEMessage::Part
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::ArrayFactory_
------------------------------------------------------------------------------
  new(allow_original_mapping = false)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::BasetypeFactory_
------------------------------------------------------------------------------
  new(allow_original_mapping = false)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::DateTimeFactory_
------------------------------------------------------------------------------
  new(allow_original_mapping = false)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::EncodedRegistry
------------------------------------------------------------------------------
  new(config = {})

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::EncodedRegistry::Map
------------------------------------------------------------------------------
  new(registry)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::Factory
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::HashFactory_
------------------------------------------------------------------------------
  new(allow_original_mapping = false)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::LiteralRegistry
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::Object
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::EncodedRegistry
------------------------------------------------------------------------------
  new(config = {})

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::RegistrySupport
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::RubytypeFactory
------------------------------------------------------------------------------
  new(config = {})

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::SOAPException
------------------------------------------------------------------------------
  new(e)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::SchemaChoiceDefinition
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::SchemaComplexTypeDefinition
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::SchemaDefinition
------------------------------------------------------------------------------
  new(class_for, elename, type, anonymous, qualified)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::SchemaElementDefinition
------------------------------------------------------------------------------
  new(varname, mapped_class, elename, minoccurs, maxoccurs, as_any, as_array)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::SchemaEmptyDefinition
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::SchemaSequenceDefinition
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::StringFactory_
------------------------------------------------------------------------------
  new(allow_original_mapping = false)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::TypedArrayFactory_
------------------------------------------------------------------------------
  new(allow_original_mapping = false)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::WSDLEncodedRegistry
------------------------------------------------------------------------------
  new(definedtypes = XSD::NamedElements::Empty)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Mapping::WSDLLiteralRegistry
------------------------------------------------------------------------------
  new(definedtypes = XSD::NamedElements::Empty, definedelements = XSD::NamedElements::Empty)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::NS
------------------------------------------------------------------------------
  new(tag2ns = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::NestedException
------------------------------------------------------------------------------
  new(msg = nil, cause = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::NetHttpClient
------------------------------------------------------------------------------
  new(proxy = nil, agent = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::NetHttpClient::Response
------------------------------------------------------------------------------
  new(status, reason, contenttype, content)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Parser
------------------------------------------------------------------------------
  new(opt = {})

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Parser::ParseFrame
------------------------------------------------------------------------------
  new(ns, name, node, encodingstyle, handler)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Parser::ParseFrame::NodeContainer
------------------------------------------------------------------------------
  new(node)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::Property
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem yieldmanager-0.9.2)
=== Implementation from SOAP::Property
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::CGIStub
------------------------------------------------------------------------------
  new(appname, default_namespace)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::CGIStub::SOAPFCGIRequest
------------------------------------------------------------------------------
  new(request)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::CGIStub::SOAPStdinRequest
------------------------------------------------------------------------------
  new(stream)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::Driver
------------------------------------------------------------------------------
  new(endpoint_url, namespace = nil, soapaction = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::HTTPServer
------------------------------------------------------------------------------
  new(config)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::MappingRegistry
------------------------------------------------------------------------------
  new(*arg)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::Proxy
------------------------------------------------------------------------------
  new(endpoint_url, soapaction, options)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::Proxy::Operation
------------------------------------------------------------------------------
  new(soapaction, param_def, opt)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::Router
------------------------------------------------------------------------------
  new(actor)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::Router::ApplicationScopeOperation
------------------------------------------------------------------------------
  new(soapaction, receiver, name, param_def, opt)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::Router::Operation
------------------------------------------------------------------------------
  new(soapaction, name, param_def, opt)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::Router::RequestScopeOperation
------------------------------------------------------------------------------
  new(soapaction, receiver_factory, name, param_def, opt)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::SOAPMethod
------------------------------------------------------------------------------
  new(qname, param_def = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::SOAPMethodRequest
------------------------------------------------------------------------------
  new(qname, param_def = nil, soapaction = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::SOAPMethodResponse
------------------------------------------------------------------------------
  new(qname, param_def = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::SOAPVoid
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::SOAPlet
------------------------------------------------------------------------------
  new(router = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::RPC::StandaloneServer
------------------------------------------------------------------------------
  new(appname, default_namespace, host = "0.0.0.0", port = 8080)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPArray
------------------------------------------------------------------------------
  new(type = nil, rank = 1, arytype = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPAttachment
------------------------------------------------------------------------------
  new(value)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPBase64
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPBasetype
------------------------------------------------------------------------------
  new(*arg)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPBody
------------------------------------------------------------------------------
  new(data = nil, is_fault = false)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPCompoundtype
------------------------------------------------------------------------------
  new(*arg)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPElement
------------------------------------------------------------------------------
  new(elename, text = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPEnvelope
------------------------------------------------------------------------------
  new(header = nil, body = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPExternalReference
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPFault
------------------------------------------------------------------------------
  new(faultcode = nil, faultstring = nil, faultactor = nil, detail = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPHeader
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPHeaderItem
------------------------------------------------------------------------------
  new(element, mustunderstand = true, encodingstyle = nil, actor = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPNil
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPREXMLElementWrap
------------------------------------------------------------------------------
  new(ele)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPRawData
------------------------------------------------------------------------------
  new(obj)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPReference
------------------------------------------------------------------------------
  new(obj = nil)

------------------------------------------------------------------------------

Override the definition in SOAPBasetype.


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPStruct
------------------------------------------------------------------------------
  new(type = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::SOAPType
------------------------------------------------------------------------------
  new(*arg)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::StandaloneServer
------------------------------------------------------------------------------
  new(*arg)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::StreamHandler
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::StreamHandler::ConnectionData
------------------------------------------------------------------------------
  new(send_string = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::WSDLDriver
------------------------------------------------------------------------------
  new(wsdl, port, logdev)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::WSDLDriver::Servant__
------------------------------------------------------------------------------
  new(host, wsdl, port, logdev)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from SOAP::WSDLDriverFactory
------------------------------------------------------------------------------
  new(wsdl)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from SOCKSSocket
------------------------------------------------------------------------------
  SOCKSSocket.new(host, serv) => socket

------------------------------------------------------------------------------

Opens a SOCKS connection to <tt>host</tt> via the SOCKS server <tt>serv</tt>.


(from gem haml-3.0.13)
=== Implementation from Sass::CSS
------------------------------------------------------------------------------
  new(template, options = {})

------------------------------------------------------------------------------

@param template [String] The CSS stylesheet.
  This stylesheet can be encoded using any encoding
  that can be converted to Unicode.
  If the stylesheet contains an `@charset` declaration,
  that overrides the Ruby encoding
  (see {file:SASS_REFERENCE.md#encodings the encoding documentation})

@option options :old [Boolean] (false)
  Whether or not to output old property syntax
  (`:color blue` as opposed to `color: blue`).
  This is only meaningful when generating Sass code,
  rather than SCSS.


(from gem sass-3.1.15)
=== Implementation from Sass::CSS
------------------------------------------------------------------------------
  new(template, options = {})

------------------------------------------------------------------------------

@param template [String] The CSS stylesheet.
  This stylesheet can be encoded using any encoding
  that can be converted to Unicode.
  If the stylesheet contains an `@charset` declaration,
  that overrides the Ruby encoding
  (see {file:SASS_REFERENCE.md#encodings the encoding documentation})

@option options :old [Boolean] (false)
  Whether or not to output old property syntax
  (`:color blue` as opposed to `color: blue`).
  This is only meaningful when generating Sass code,
  rather than SCSS.


(from gem sass-3.1.15)
=== Implementation from Sass::CacheStores::Chain
------------------------------------------------------------------------------
  new(*caches)

------------------------------------------------------------------------------

Create a new cache chaining the given caches.

@param caches [Array<Sass::CacheStores::Base>] The caches to chain.


(from gem sass-3.1.15)
=== Implementation from Sass::CacheStores::Filesystem
------------------------------------------------------------------------------
  new(cache_location)

------------------------------------------------------------------------------

@param cache_location [String] see {#cache_location}


(from gem sass-3.1.15)
=== Implementation from Sass::CacheStores::Memory
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Create a new, empty cache store.


(from gem sass-3.1.15)
=== Implementation from Sass::CacheStores::Null
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem haml-3.0.13)
=== Implementation from Sass::Engine
------------------------------------------------------------------------------
  new(template, options={})

------------------------------------------------------------------------------

@param template [String] The Sass template.
  This template can be encoded using any encoding
  that can be converted to Unicode.
  If the template contains an `@charset` declaration,
  that overrides the Ruby encoding
  (see {file:SASS_REFERENCE.md#encodings the encoding documentation})

@param options [{Symbol => Object}] An options hash;
  see {file:SASS_REFERENCE.md#sass_options the Sass options documentation}


(from gem sass-3.1.15)
=== Implementation from Sass::Engine
------------------------------------------------------------------------------
  new(template, options={})

------------------------------------------------------------------------------

Creates a new Engine. Note that Engine should only be used directly when
compiling in-memory Sass code. If you're compiling a single Sass file from the
filesystem, use {Sass::Engine.for_file}. If you're compiling multiple files
from the filesystem, use {Sass::Plugin}.

@param template [String] The Sass template.
  This template can be encoded using any encoding
  that can be converted to Unicode.
  If the template contains an `@charset` declaration,
  that overrides the Ruby encoding
  (see {file:SASS_REFERENCE.md#encodings the encoding documentation})

@param options [{Symbol => Object}] An options hash.
  See {file:SASS_REFERENCE.md#sass_options the Sass options documentation}.

@see {Sass::Engine.for_file} @see {Sass::Plugin}


(from gem haml-3.0.13)
=== Implementation from Sass::Environment
------------------------------------------------------------------------------
  new(parent = nil)

------------------------------------------------------------------------------

@param parent [Environment] See {#parent}


(from gem sass-3.1.15)
=== Implementation from Sass::Environment
------------------------------------------------------------------------------
  new(parent = nil)

------------------------------------------------------------------------------

@param parent [Environment] See {#parent}


(from gem sass-3.1.15)
=== Implementation from Sass::Exec::Generic
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------

@param args [Array<String>] The command-line arguments


(from gem sass-3.1.15)
=== Implementation from Sass::Exec::Sass
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------

@param args [Array<String>] The command-line arguments


(from gem sass-3.1.15)
=== Implementation from Sass::Exec::SassConvert
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------

@param args [Array<String>] The command-line arguments


(from gem sass-3.1.15)
=== Implementation from Sass::Exec::Scss
------------------------------------------------------------------------------
  new(args)

------------------------------------------------------------------------------

@param args [Array<String>] The command-line arguments


(from gem sass-3.1.15)
=== Implementation from Sass::Importers::Filesystem
------------------------------------------------------------------------------
  new(root)

------------------------------------------------------------------------------

Creates a new filesystem importer that imports files relative to a given path.

@param root [String] The root path.
  This importer will import files relative to this path.


(from gem sass-3.1.15)
=== Implementation from Sass::Logger::Base
------------------------------------------------------------------------------
  new(log_level = :debug)

------------------------------------------------------------------------------


(from gem sass-3.1.15)
=== Implementation from Sass::Plugin::Compiler
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------

Creates a new compiler.

@param options [{Symbol => Object}]
  See {file:SASS_REFERENCE.md#sass_options the Sass options documentation}.


(from gem haml-3.0.13)
=== Implementation from Sass::Plugin::Rack
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------

Initialize the middleware.

@param app [#call] The Rack application


(from gem sass-3.1.15)
=== Implementation from Sass::Plugin::Rack
------------------------------------------------------------------------------
  new(app, dwell = 1.0)

------------------------------------------------------------------------------

Initialize the middleware.

@param app [#call] The Rack application @param dwell [Float] See {#dwell}


(from gem sass-3.1.15)
=== Implementation from Sass::Plugin::StalenessChecker
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------

Creates a new StalenessChecker for checking the staleness of several
stylesheets at once.

@param options [{Symbol => Object}]
  See {file:SASS_REFERENCE.md#sass_options the Sass options documentation}.


(from gem haml-3.0.13)
=== Implementation from Sass::Plugin::StalenessChecker
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a new StalenessChecker for checking the staleness of several
stylesheets at once.


(from gem sass-3.1.15)
=== Implementation from Sass::Repl
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------

@param options [{Symbol => Object}] An options hash.


(from gem haml-3.0.13)
=== Implementation from Sass::Repl
------------------------------------------------------------------------------
  new(options = {})

------------------------------------------------------------------------------

@param options [{Symbol => Object}] An options hash.


(from gem haml-3.0.13)
=== Implementation from Sass::SCSS::Parser
------------------------------------------------------------------------------
  new(str, line = 1)

------------------------------------------------------------------------------

@param str [String, StringScanner] The source document to parse.
  Note that `Parser` *won't* raise a nice error message if this isn't properly parsed;
  for that, you should use the higher-level {Sass::Engine} or {Sass::CSS}.

@param line [Fixnum] The line on which the source string appeared,
  if it's part of another document


(from gem sass-3.1.15)
=== Implementation from Sass::SCSS::Parser
------------------------------------------------------------------------------
  new(str, filename, line = 1)

------------------------------------------------------------------------------

@param str [String, StringScanner] The source document to parse.
  Note that `Parser` *won't* raise a nice error message if this isn't properly parsed;
  for that, you should use the higher-level {Sass::Engine} or {Sass::CSS}.

@param filename [String] The name of the file being parsed. Used for warnings.
@param line [Fixnum] The line on which the source string appeared,
  if it's part of another document.


(from gem haml-3.0.13)
=== Implementation from Sass::Script::Color
------------------------------------------------------------------------------
  new(attrs, allow_both_rgb_and_hsl = false)

------------------------------------------------------------------------------

Constructs an RGB or HSL color object, optionally with an alpha channel.

The RGB values must be between 0 and 255. The saturation and lightness values
must be between 0 and 100. The alpha value must be between 0 and 1.

@raise [Sass::SyntaxError] if any color value isn't in the specified range

@overload initialize(attrs)
  The attributes are specified as a hash.
  This hash must contain either `:hue`, `:saturation`, and `:value` keys,
  or `:red`, `:green`, and `:blue` keys.
  It cannot contain both HSL and RGB keys.
  It may also optionally contain an `:alpha` key.

  @param attrs [{Symbol => Numeric}] A hash of color attributes to values
  @raise [ArgumentError] if not enough attributes are specified,
    or both RGB and HSL attributes are specified

@overload initialize(rgba)
  The attributes are specified as an array.
  This overload only supports RGB or RGBA colors.

  @param rgba [Array<Numeric>] A three- or four-element array
    of the red, green, blue, and optionally alpha values (respectively)
    of the color
  @raise [ArgumentError] if not enough attributes are specified


(from gem sass-3.1.15)
=== Implementation from Sass::Script::Color
------------------------------------------------------------------------------
  new(attrs, allow_both_rgb_and_hsl = false)

------------------------------------------------------------------------------

Constructs an RGB or HSL color object, optionally with an alpha channel.

The RGB values must be between 0 and 255. The saturation and lightness values
must be between 0 and 100. The alpha value must be between 0 and 1.

@raise [Sass::SyntaxError] if any color value isn't in the specified range

@overload initialize(attrs)
  The attributes are specified as a hash.
  This hash must contain either `:hue`, `:saturation`, and `:value` keys,
  or `:red`, `:green`, and `:blue` keys.
  It cannot contain both HSL and RGB keys.
  It may also optionally contain an `:alpha` key.

  @param attrs [{Symbol => Numeric}] A hash of color attributes to values
  @raise [ArgumentError] if not enough attributes are specified,
    or both RGB and HSL attributes are specified

@overload initialize(rgba)
  The attributes are specified as an array.
  This overload only supports RGB or RGBA colors.

  @param rgba [Array<Numeric>] A three- or four-element array
    of the red, green, blue, and optionally alpha values (respectively)
    of the color
  @raise [ArgumentError] if not enough attributes are specified


(from gem sass-3.1.15)
=== Implementation from Sass::Script::Funcall
------------------------------------------------------------------------------
  new(name, args, keywords)

------------------------------------------------------------------------------

@param name [String] See {#name} @param args [Array<Script::Node>] See {#args}
@param keywords [{String => Script::Node}] See {#keywords}


(from gem haml-3.0.13)
=== Implementation from Sass::Script::Funcall
------------------------------------------------------------------------------
  new(name, args)

------------------------------------------------------------------------------

@param name [String] See {#name} @param name [Array<Script::Node>] See {#args}


(from gem haml-3.0.13)
=== Implementation from Sass::Script::Functions::EvaluationContext
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------

@param options [{Symbol => Object}] See {#options}


(from gem sass-3.1.15)
=== Implementation from Sass::Script::Functions::EvaluationContext
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------

@param options [{Symbol => Object}] See {#options}


(from gem sass-3.1.15)
=== Implementation from Sass::Script::Interpolation
------------------------------------------------------------------------------
  new(before, mid, after, wb, wa, originally_text = false)

------------------------------------------------------------------------------

Interpolation in a property is of the form `before #{mid} after`.

@param before [Node] The SassScript before the interpolation @param mid [Node]
The SassScript within the interpolation @param after [Node] The SassScript
after the interpolation @param wb [Boolean] Whether there was whitespace
between `before` and `#{` @param wa [Boolean] Whether there was whitespace
between `}` and `after` @param originally_text [Boolean]
  Whether the original format of the interpolation was plain text,
  not an interpolation.
  This is used when converting back to SassScript.


(from gem haml-3.0.13)
=== Implementation from Sass::Script::Interpolation
------------------------------------------------------------------------------
  new(before, mid, after, wb, wa, originally_text = false)

------------------------------------------------------------------------------

Interpolation in a property is of the form `before #{mid} after`.

@param before [Node] The SassScript before the interpolation @param mid [Node]
The SassScript within the interpolation @param after [Node] The SassScript
after the interpolation @param wb [Boolean] Whether there was whitespace
between `before` and `#{` @param wa [Boolean] Whether there was whitespace
between `}` and `after` @param originally_text [Boolean]
  Whether the original format of the interpolation was plain text,
  not an interpolation.
  This is used when converting back to SassScript.


(from gem haml-3.0.13)
=== Implementation from Sass::Script::Lexer
------------------------------------------------------------------------------
  new(str, line, offset, options)

------------------------------------------------------------------------------

@param str [String, StringScanner] The source text to lex @param line [Fixnum]
The line on which the SassScript appears.
  Used for error reporting

@param offset [Fixnum] The number of characters in on which the SassScript
appears.
  Used for error reporting

@param options [{Symbol => Object}] An options hash;
  see {file:SASS_REFERENCE.md#sass_options the Sass options documentation}


(from gem sass-3.1.15)
=== Implementation from Sass::Script::Lexer
------------------------------------------------------------------------------
  new(str, line, offset, options)

------------------------------------------------------------------------------

@param str [String, StringScanner] The source text to lex @param line [Fixnum]
The line on which the SassScript appears.
  Used for error reporting

@param offset [Fixnum] The number of characters in on which the SassScript
appears.
  Used for error reporting

@param options [{Symbol => Object}] An options hash;
  see {file:SASS_REFERENCE.md#sass_options the Sass options documentation}


(from gem sass-3.1.15)
=== Implementation from Sass::Script::List
------------------------------------------------------------------------------
  new(value, separator)

------------------------------------------------------------------------------

Creates a new list.

@param value [Array<Literal>] See {#value} @param separator [String] See
{#separator}


(from gem sass-3.1.15)
=== Implementation from Sass::Script::Literal
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------

Creates a new literal.

@param value [Object] The object for {#value}


(from gem haml-3.0.13)
=== Implementation from Sass::Script::Literal
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------

Creates a new literal.

@param value [Object] The object for {#value}


(from gem haml-3.0.13)
=== Implementation from Sass::Script::Node
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a new script node.


(from gem haml-3.0.13)
=== Implementation from Sass::Script::Number
------------------------------------------------------------------------------
  new(value, numerator_units = [], denominator_units = [])

------------------------------------------------------------------------------

@param value [Numeric] The value of the number @param numerator_units
[Array<String>] See {#numerator_units} @param denominator_units
[Array<String>] See {#denominator_units}


(from gem sass-3.1.15)
=== Implementation from Sass::Script::Number
------------------------------------------------------------------------------
  new(value, numerator_units = NO_UNITS, denominator_units = NO_UNITS)

------------------------------------------------------------------------------

@param value [Numeric] The value of the number @param numerator_units
[Array<String>] See {#numerator_units} @param denominator_units
[Array<String>] See {#denominator_units}


(from gem sass-3.1.15)
=== Implementation from Sass::Script::Operation
------------------------------------------------------------------------------
  new(operand1, operand2, operator)

------------------------------------------------------------------------------

@param operand1 [Script::Node] The parse-tree node
  for the right-hand side of the operator

@param operand2 [Script::Node] The parse-tree node
  for the left-hand side of the operator

@param operator [Symbol] The operator to perform.
  This should be one of the binary operator names in {Lexer::OPERATORS}


(from gem haml-3.0.13)
=== Implementation from Sass::Script::Operation
------------------------------------------------------------------------------
  new(operand1, operand2, operator)

------------------------------------------------------------------------------

@param operand1 [Script::Node] The parse-tree node
  for the right-hand side of the operator

@param operand2 [Script::Node] The parse-tree node
  for the left-hand side of the operator

@param operator [Symbol] The operator to perform.
  This should be one of the binary operator names in {Lexer::OPERATORS}


(from gem sass-3.1.15)
=== Implementation from Sass::Script::Parser
------------------------------------------------------------------------------
  new(str, line, offset, options = {})

------------------------------------------------------------------------------

@param str [String, StringScanner] The source text to parse @param line
[Fixnum] The line on which the SassScript appears.
  Used for error reporting

@param offset [Fixnum] The number of characters in on which the SassScript
appears.
  Used for error reporting

@param options [{Symbol => Object}] An options hash;
  see {file:SASS_REFERENCE.md#sass_options the Sass options documentation}


(from gem haml-3.0.13)
=== Implementation from Sass::Script::Parser
------------------------------------------------------------------------------
  new(str, line, offset, options = {})

------------------------------------------------------------------------------

@param str [String, StringScanner] The source text to parse @param line
[Fixnum] The line on which the SassScript appears.
  Used for error reporting

@param offset [Fixnum] The number of characters in on which the SassScript
appears.
  Used for error reporting

@param options [{Symbol => Object}] An options hash;
  see {file:SASS_REFERENCE.md#sass_options the Sass options documentation}


(from gem haml-3.0.13)
=== Implementation from Sass::Script::String
------------------------------------------------------------------------------
  new(value, type = :identifier)

------------------------------------------------------------------------------

Creates a new string.

@param value [String] See {#value} @param type [Symbol] See {#type}


(from gem sass-3.1.15)
=== Implementation from Sass::Script::String
------------------------------------------------------------------------------
  new(value, type = :identifier)

------------------------------------------------------------------------------

Creates a new string.

@param value [String] See {#value} @param type [Symbol] See {#type}


(from gem haml-3.0.13)
=== Implementation from Sass::Script::StringInterpolation
------------------------------------------------------------------------------
  new(before, mid, after)

------------------------------------------------------------------------------

Interpolation in a string is of the form `"before #{mid} after"`, where
`before` and `after` may include more interpolation.

@param before [Node] The string before the interpolation @param mid [Node] The
SassScript within the interpolation @param after [Node] The string after the
interpolation


(from gem sass-3.1.15)
=== Implementation from Sass::Script::StringInterpolation
------------------------------------------------------------------------------
  new(before, mid, after)

------------------------------------------------------------------------------

Interpolation in a string is of the form `"before #{mid} after"`, where
`before` and `after` may include more interpolation.

@param before [Node] The string before the interpolation @param mid [Node] The
SassScript within the interpolation @param after [Node] The string after the
interpolation


(from gem haml-3.0.13)
=== Implementation from Sass::Script::UnaryOperation
------------------------------------------------------------------------------
  new(operand, operator)

------------------------------------------------------------------------------

@param operand [Script::Node] The parse-tree node
  for the object of the operator

@param operator [Symbol] The operator to perform


(from gem sass-3.1.15)
=== Implementation from Sass::Script::UnaryOperation
------------------------------------------------------------------------------
  new(operand, operator)

------------------------------------------------------------------------------

@param operand [Script::Node] The parse-tree node
  for the object of the operator

@param operator [Symbol] The operator to perform


(from gem haml-3.0.13)
=== Implementation from Sass::Script::Variable
------------------------------------------------------------------------------
  new(name)

------------------------------------------------------------------------------

@param name [String] See {#name}


(from gem sass-3.1.15)
=== Implementation from Sass::Script::Variable
------------------------------------------------------------------------------
  new(name)

------------------------------------------------------------------------------

@param name [String] See {#name}


(from gem haml-3.0.13)
=== Implementation from Sass::Selector::Attribute
------------------------------------------------------------------------------
  new(name, namespace, operator, value)

------------------------------------------------------------------------------

@param name [Array<String, Sass::Script::Node>] The attribute name @param
namespace [Array<String, Sass::Script::Node>, nil] See {#namespace} @param
operator [String] The matching operator, e.g. `"="` or `"^="` @param value
[Array<String, Sass::Script::Node>] See {#value}


(from gem sass-3.1.15)
=== Implementation from Sass::Selector::Attribute
------------------------------------------------------------------------------
  new(name, namespace, operator, value)

------------------------------------------------------------------------------

@param name [Array<String, Sass::Script::Node>] The attribute name @param
namespace [Array<String, Sass::Script::Node>, nil] See {#namespace} @param
operator [String] The matching operator, e.g. `"="` or `"^="` @param value
[Array<String, Sass::Script::Node>] See {#value}


(from gem haml-3.0.13)
=== Implementation from Sass::Selector::Class
------------------------------------------------------------------------------
  new(name)

------------------------------------------------------------------------------

@param name [Array<String, Sass::Script::Node>] The class name


(from gem sass-3.1.15)
=== Implementation from Sass::Selector::Class
------------------------------------------------------------------------------
  new(name)

------------------------------------------------------------------------------

@param name [Array<String, Sass::Script::Node>] The class name


(from gem haml-3.0.13)
=== Implementation from Sass::Selector::CommaSequence
------------------------------------------------------------------------------
  new(seqs)

------------------------------------------------------------------------------

@param seqs [Array<Sequence>] See {#members}


(from gem sass-3.1.15)
=== Implementation from Sass::Selector::CommaSequence
------------------------------------------------------------------------------
  new(seqs)

------------------------------------------------------------------------------

@param seqs [Array<Sequence>] See {#members}


(from gem haml-3.0.13)
=== Implementation from Sass::Selector::Element
------------------------------------------------------------------------------
  new(name, namespace)

------------------------------------------------------------------------------

@param name [Array<String, Sass::Script::Node>] The element name @param
namespace [Array<String, Sass::Script::Node>, nil] See {#namespace}


(from gem sass-3.1.15)
=== Implementation from Sass::Selector::Element
------------------------------------------------------------------------------
  new(name, namespace)

------------------------------------------------------------------------------

@param name [Array<String, Sass::Script::Node>] The element name @param
namespace [Array<String, Sass::Script::Node>, nil] See {#namespace}


(from gem haml-3.0.13)
=== Implementation from Sass::Selector::Id
------------------------------------------------------------------------------
  new(name)

------------------------------------------------------------------------------

@param name [Array<String, Sass::Script::Node>] The id name


(from gem sass-3.1.15)
=== Implementation from Sass::Selector::Id
------------------------------------------------------------------------------
  new(name)

------------------------------------------------------------------------------

@param name [Array<String, Sass::Script::Node>] The id name


(from gem haml-3.0.13)
=== Implementation from Sass::Selector::Interpolation
------------------------------------------------------------------------------
  new(script)

------------------------------------------------------------------------------

@param script [Sass::Script::Node] The script to run


(from gem sass-3.1.15)
=== Implementation from Sass::Selector::Interpolation
------------------------------------------------------------------------------
  new(script)

------------------------------------------------------------------------------

@param script [Sass::Script::Node] The script to run


(from gem haml-3.0.13)
=== Implementation from Sass::Selector::Pseudo
------------------------------------------------------------------------------
  new(type, name, arg)

------------------------------------------------------------------------------

@param type [Symbol] See {#type} @param name [Array<String,
Sass::Script::Node>] The name of the selector @param arg [nil, Array<String,
Sass::Script::Node>] The argument to the selector,
  or nil if no argument was given


(from gem sass-3.1.15)
=== Implementation from Sass::Selector::Pseudo
------------------------------------------------------------------------------
  new(type, name, arg)

------------------------------------------------------------------------------

@param type [Symbol] See {#type} @param name [Array<String,
Sass::Script::Node>] The name of the selector @param arg [nil, Array<String,
Sass::Script::Node>] The argument to the selector,
  or nil if no argument was given


(from gem haml-3.0.13)
=== Implementation from Sass::Selector::SelectorPseudoClass
------------------------------------------------------------------------------
  new(name, selector)

------------------------------------------------------------------------------

@param [String] The name of the pseudoclass @param [Selector::Sequence] The
selector argument


(from gem sass-3.1.15)
=== Implementation from Sass::Selector::SelectorPseudoClass
------------------------------------------------------------------------------
  new(name, selector)

------------------------------------------------------------------------------

@param [String] The name of the pseudoclass @param [Selector::CommaSequence]
The selector argument


(from gem haml-3.0.13)
=== Implementation from Sass::Selector::Sequence
------------------------------------------------------------------------------
  new(seqs_and_ops)

------------------------------------------------------------------------------

@param seqs_and_ops [Array<SimpleSequence, String>] See {#members}


(from gem sass-3.1.15)
=== Implementation from Sass::Selector::Sequence
------------------------------------------------------------------------------
  new(seqs_and_ops)

------------------------------------------------------------------------------

@param seqs_and_ops [Array<SimpleSequence, String>] See {#members}


(from gem sass-3.1.15)
=== Implementation from Sass::Selector::SimpleSequence
------------------------------------------------------------------------------
  new(selectors)

------------------------------------------------------------------------------

@param selectors [Array<Simple>] See {#members}


(from gem haml-3.0.13)
=== Implementation from Sass::Selector::SimpleSequence
------------------------------------------------------------------------------
  new(selectors)

------------------------------------------------------------------------------

@param selectors [Array<Simple>] See {#members}


(from gem haml-3.0.13)
=== Implementation from Sass::Selector::Universal
------------------------------------------------------------------------------
  new(namespace)

------------------------------------------------------------------------------

@param namespace [Array<String, Sass::Script::Node>, nil] See {#namespace}


(from gem sass-3.1.15)
=== Implementation from Sass::Selector::Universal
------------------------------------------------------------------------------
  new(namespace)

------------------------------------------------------------------------------

@param namespace [Array<String, Sass::Script::Node>, nil] See {#namespace}


(from gem sass-3.1.15)
=== Implementation from Sass::SyntaxError
------------------------------------------------------------------------------
  new(msg, attrs = {})

------------------------------------------------------------------------------

@param msg [String] The error message @param attrs [{Symbol => Object}] The
information in the backtrace entry.
  See \{#sass\_backtrace}


(from gem haml-3.0.13)
=== Implementation from Sass::SyntaxError
------------------------------------------------------------------------------
  new(msg, attrs = {})

------------------------------------------------------------------------------

@param msg [String] The error message @param attrs [{Symbol => Object}] The
information in the backtrace entry.
  See \{#sass\_backtrace}


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::CharsetNode
------------------------------------------------------------------------------
  new(name)

------------------------------------------------------------------------------

@param name [String] see {#name}


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::CommentNode
------------------------------------------------------------------------------
  new(value, silent, loud)

------------------------------------------------------------------------------

@param value [Array<String, Sass::Script::Node>] See {#value} @param silent
[Boolean] See {#silent} @param loud [Boolean] See {#loud}


(from gem haml-3.0.13)
=== Implementation from Sass::Tree::CommentNode
------------------------------------------------------------------------------
  new(value, silent)

------------------------------------------------------------------------------

@param value [String] See {#value} @param silent [Boolean] See {#silent}


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::DebugNode
------------------------------------------------------------------------------
  new(expr)

------------------------------------------------------------------------------

@param expr [Script::Node] The expression to print


(from gem haml-3.0.13)
=== Implementation from Sass::Tree::DebugNode
------------------------------------------------------------------------------
  new(expr)

------------------------------------------------------------------------------

@param expr [Script::Node] The expression to print


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::DirectiveNode
------------------------------------------------------------------------------
  new(value)

------------------------------------------------------------------------------

@param value [String] See {#value}


(from gem haml-3.0.13)
=== Implementation from Sass::Tree::DirectiveNode
------------------------------------------------------------------------------
  new(value)

------------------------------------------------------------------------------

@param value [String] See {#value}


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::EachNode
------------------------------------------------------------------------------
  new(var, list)

------------------------------------------------------------------------------

@param var [String] The name of the loop variable @param list [Script::Node]
The parse tree for the list


(from gem haml-3.0.13)
=== Implementation from Sass::Tree::ExtendNode
------------------------------------------------------------------------------
  new(selector)

------------------------------------------------------------------------------

@param selector [Array<String, Sass::Script::Node>]
  The CSS selector to extend,
  interspersed with {Sass::Script::Node}s
  representing `#{}`-interpolation.


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::ExtendNode
------------------------------------------------------------------------------
  new(selector)

------------------------------------------------------------------------------

@param selector [Array<String, Sass::Script::Node>]
  The CSS selector to extend,
  interspersed with {Sass::Script::Node}s
  representing `#{}`-interpolation.


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::ForNode
------------------------------------------------------------------------------
  new(var, from, to, exclusive)

------------------------------------------------------------------------------

@param var [String] See {#var} @param from [Script::Node] See {#from} @param
to [Script::Node] See {#to} @param exclusive [Boolean] See {#exclusive}


(from gem haml-3.0.13)
=== Implementation from Sass::Tree::ForNode
------------------------------------------------------------------------------
  new(var, from, to, exclusive)

------------------------------------------------------------------------------

@param var [String] The name of the loop variable @param from [Script::Node]
The parse tree for the initial expression @param to [Script::Node] The parse
tree for the final expression @param exclusive [Boolean] Whether to include
`to` in the loop
  or stop just before


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::FunctionNode
------------------------------------------------------------------------------
  new(name, args)

------------------------------------------------------------------------------

@param name [String] The function name @param args [Array<(Script::Node,
Script::Node)>] The arguments for the function.


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::IfNode
------------------------------------------------------------------------------
  new(expr)

------------------------------------------------------------------------------

@param expr [Script::Expr] See {#expr}


(from gem haml-3.0.13)
=== Implementation from Sass::Tree::IfNode
------------------------------------------------------------------------------
  new(expr)

------------------------------------------------------------------------------

@param expr [Script::Expr] The conditional expression.
  If this is nil, this is an `@else` node, not an `@else if`


(from gem haml-3.0.13)
=== Implementation from Sass::Tree::ImportNode
------------------------------------------------------------------------------
  new(imported_filename)

------------------------------------------------------------------------------

@param imported_filename [String] The name of the imported file


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::ImportNode
------------------------------------------------------------------------------
  new(imported_filename)

------------------------------------------------------------------------------

@param imported_filename [String] The name of the imported file


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::MediaNode
------------------------------------------------------------------------------
  new(query)

------------------------------------------------------------------------------

@param query [Array<String>] See {#query}


(from gem haml-3.0.13)
=== Implementation from Sass::Tree::MixinDefNode
------------------------------------------------------------------------------
  new(name, args)

------------------------------------------------------------------------------

@param name [String] The mixin name @param args [Array<(Script::Node,
Script::Node)>] The arguments for the mixin.
  Each element is a tuple containing the variable for argument
  and the parse tree for the default value of the argument


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::MixinDefNode
------------------------------------------------------------------------------
  new(name, args)

------------------------------------------------------------------------------

@param name [String] The mixin name @param args [Array<(Script::Node,
Script::Node)>] See {#args}


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::MixinNode
------------------------------------------------------------------------------
  new(name, args, keywords)

------------------------------------------------------------------------------

@param name [String] The name of the mixin @param args [Array<Script::Node>]
See {#args} @param keywords [{String => Script::Node}] See {#keywords}


(from gem haml-3.0.13)
=== Implementation from Sass::Tree::MixinNode
------------------------------------------------------------------------------
  new(name, args)

------------------------------------------------------------------------------

@param name [String] The name of the mixin @param args [Array<Script::Node>]
The arguments to the mixin


(from gem haml-3.0.13)
=== Implementation from Sass::Tree::Node
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::Node
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem haml-3.0.13)
=== Implementation from Sass::Tree::PropNode
------------------------------------------------------------------------------
  new(name, value, prop_syntax)

------------------------------------------------------------------------------

@param name [Array<String, Sass::Script::Node>] See {#name} @param value
[Sass::Script::Node] See {#value} @param prop_syntax [Symbol] `:new` if this
property uses `a: b`-style syntax,
  `:old` if it uses `:a b`-style syntax


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::PropNode
------------------------------------------------------------------------------
  new(name, value, prop_syntax)

------------------------------------------------------------------------------

@param name [Array<String, Sass::Script::Node>] See {#name} @param value
[Sass::Script::Node] See {#value} @param prop_syntax [Symbol] `:new` if this
property uses `a: b`-style syntax,
  `:old` if it uses `:a b`-style syntax


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::ReturnNode
------------------------------------------------------------------------------
  new(expr)

------------------------------------------------------------------------------

@param expr [Script::Node] The expression to return


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::RootNode
------------------------------------------------------------------------------
  new(template)

------------------------------------------------------------------------------

@param template [String] The Sass template from which this node was created


(from gem haml-3.0.13)
=== Implementation from Sass::Tree::RootNode
------------------------------------------------------------------------------
  new(template)

------------------------------------------------------------------------------

@param template [String] The Sass template from which this node was created


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::RuleNode
------------------------------------------------------------------------------
  new(rule)

------------------------------------------------------------------------------

@param rule [Array<String, Sass::Script::Node>]
  The CSS rule. See \{#rule}


(from gem haml-3.0.13)
=== Implementation from Sass::Tree::RuleNode
------------------------------------------------------------------------------
  new(rule)

------------------------------------------------------------------------------

@param rule [Array<String, Sass::Script::Node>]
  The CSS rule. See \{#rule}


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::VariableNode
------------------------------------------------------------------------------
  new(name, expr, guarded)

------------------------------------------------------------------------------

@param name [String] The name of the variable @param expr [Script::Node] See
{#expr} @param guarded [Boolean] See {#guarded}


(from gem haml-3.0.13)
=== Implementation from Sass::Tree::VariableNode
------------------------------------------------------------------------------
  new(name, expr, guarded)

------------------------------------------------------------------------------

@param name [String] The name of the variable @param expr [Script::Node] The
parse tree for the initial variable value @param guarded [Boolean] Whether
this is a guarded variable assignment (`||=`)


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::Visitors::Convert
------------------------------------------------------------------------------
  new(options, format)

------------------------------------------------------------------------------


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::Visitors::Cssize
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::Visitors::Perform
------------------------------------------------------------------------------
  new(env)

------------------------------------------------------------------------------


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::Visitors::SetOptions
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::Visitors::ToCss
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem haml-3.0.13)
=== Implementation from Sass::Tree::WarnNode
------------------------------------------------------------------------------
  new(expr)

------------------------------------------------------------------------------

@param expr [Script::Node] The expression to print


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::WarnNode
------------------------------------------------------------------------------
  new(expr)

------------------------------------------------------------------------------

@param expr [Script::Node] The expression to print


(from gem haml-3.0.13)
=== Implementation from Sass::Tree::WhileNode
------------------------------------------------------------------------------
  new(expr)

------------------------------------------------------------------------------

@param expr [Script::Node] The parse tree for the continue expression


(from gem sass-3.1.15)
=== Implementation from Sass::Tree::WhileNode
------------------------------------------------------------------------------
  new(expr)

------------------------------------------------------------------------------

@param expr [Script::Node] See {#expr}


(from gem sass-3.1.15)
=== Implementation from Sass::Util::MultibyteStringScanner
------------------------------------------------------------------------------
  new(str)

------------------------------------------------------------------------------


(from gem sass-3.1.15)
=== Implementation from Sass::Util::StaticConditionalContext
------------------------------------------------------------------------------
  new(set)

------------------------------------------------------------------------------

@param set [#include?] The set of variables that are defined for this context.


(from gem sass-3.1.15)
=== Implementation from Sass::Util::SubsetMap
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a new, empty SubsetMap.


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::Client::Base
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------

Create a new client driver

Example:

Selenium::Client::Driver.new \
  :host => "localhost",
  :port => 4444,
  :browser => "*firefox",
  :timeout_in_seconds => 10,
  :url => "http://localhost:3000",

You can also set the default javascript framework used for :wait_for AJAX and
effects semantics (:prototype is the default value):

Selenium::Client::Driver.new \
  :host => "localhost",
  :port => 4444,
  :browser => "*firefox",
  :timeout_in_seconds => 10,
  :url => "http://localhost:3000",
  :javascript_framework => :jquery

You can also enables automatic highlighting of located elements by passing the
highlight_located_element option, e.g.

Selenium::Client::Driver.new \
  :host => "localhost",
  :port => 4444,
  :browser => "*firefox",
  :highlight_located_element => true


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::Client::JavascriptExpressionBuilder
------------------------------------------------------------------------------
  new(javascript_framework_name=nil)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::Rake::ServerTask
------------------------------------------------------------------------------
  new(prefix = "selenium:server") { |self| ... }

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::Server
------------------------------------------------------------------------------
  new(jar, opts = {})

------------------------------------------------------------------------------

@param [String] jar Path to the server jar. @param [Hash] opts the options to
create the server process with

@option opts [Integer] :port Port the server should listen on (default: 4444).
@option opts [Integer] :timeout Seconds to wait for server launch/shutdown
(default: 30) @option opts [true,false] :background Run the server in the
background (default: false) @option opts [true,false,String] :log Either a
path to a log file,
  or true to pass server log to stdout.

@raise [Errno::ENOENT] if the jar file does not exist


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::ActionBuilder
------------------------------------------------------------------------------
  new(mouse, keyboard)

------------------------------------------------------------------------------

@api private


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Alert
------------------------------------------------------------------------------
  new(bridge)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Android::Bridge
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Chrome::Bridge
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Chrome::Profile
------------------------------------------------------------------------------
  new(model = nil)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Chrome::Service
------------------------------------------------------------------------------
  new(executable_path, port)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Driver
------------------------------------------------------------------------------
  new(bridge)

------------------------------------------------------------------------------

A new Driver instance with the given bridge. End users should use
Selenium::WebDriver.for instead of using this directly.

@api private


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Element
------------------------------------------------------------------------------
  new(bridge, id)

------------------------------------------------------------------------------

Creates a new Element

@api private


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Error::ServerError
------------------------------------------------------------------------------
  new(response)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Firefox::Bridge
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Firefox::Extension
------------------------------------------------------------------------------
  new(path)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Firefox::Launcher
------------------------------------------------------------------------------
  new(binary, port, profile = nil)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Firefox::Profile
------------------------------------------------------------------------------
  new(model = nil)

------------------------------------------------------------------------------

Create a new Profile instance

@example User configured profile

  profile = Selenium::WebDriver::Firefox::Profile.new
  profile['network.proxy.http'] = 'localhost'
  profile['network.proxy.http_port'] = 9090

  driver = Selenium::WebDriver.for :firefox, :profile => profile


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Firefox::ProfilesIni
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Firefox::SocketLock
------------------------------------------------------------------------------
  new(port, timeout)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::HTML5::LocalStorage
------------------------------------------------------------------------------
  new(bridge)

------------------------------------------------------------------------------

@api private


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::HTML5::SessionStorage
------------------------------------------------------------------------------
  new(bridge)

------------------------------------------------------------------------------

@api private


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::IE::Bridge
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::IE::Server
------------------------------------------------------------------------------
  new(binary_path, opts = {})

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::IPhone::Bridge
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Keyboard
------------------------------------------------------------------------------
  new(bridge)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::LogEntry
------------------------------------------------------------------------------
  new(level, timestamp, message)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Mouse
------------------------------------------------------------------------------
  new(bridge)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Navigation
------------------------------------------------------------------------------
  new(bridge)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Opera::Bridge
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Opera::Service
------------------------------------------------------------------------------
  new(jar, opts = {})

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Options
------------------------------------------------------------------------------
  new(bridge)

------------------------------------------------------------------------------

@api private


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::PhantomJS::Bridge
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::PhantomJS::Service
------------------------------------------------------------------------------
  new(executable_path, port)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Proxy
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Remote::Bridge
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------

Initializes the bridge with the given server URL.

@param url         [String] url for the remote server @param http_client
[Object] an HTTP client instance that implements the same protocol as
Http::Default @param desired_capabilities [Capabilities] an instance of
Remote::Capabilities describing the capabilities you want


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Remote::Capabilities
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------

@option :browser_name           [String] required browser name @option
:version                [String] required browser version number @option
:platform               [Symbol] one of :any, :win, :mac, or :x @option
:javascript_enabled     [Boolean] does the driver have javascript enabled?
@option :css_selectors_enabled  [Boolean] does the driver support CSS
selectors? @option :takes_screenshot       [Boolean] can this driver take
screenshots? @option :native_events          [Boolean] does this driver use
native events? @option :proxy                  [Selenium::WebDriver::Proxy,
Hash] proxy configuration

Firefox-specific options:

@option :firefox_profile        [Selenium::WebDriver::Firefox::Profile] the
firefox profile to use

@api public


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Remote::Http::Common
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Remote::Response
------------------------------------------------------------------------------
  new(code, payload = nil)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Safari::Bridge
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Safari::Server
------------------------------------------------------------------------------
  new(port, command_timeout)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::SocketPoller
------------------------------------------------------------------------------
  new(host, port, timeout = 0, interval = 0.25)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Support::BlockEventListener
------------------------------------------------------------------------------
  new(callback)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Support::Color
------------------------------------------------------------------------------
  new(red, green, blue, alpha = 1)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Support::EventFiringBridge
------------------------------------------------------------------------------
  new(delegate, listener)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Support::Select
------------------------------------------------------------------------------
  new(element)

------------------------------------------------------------------------------

@param [Element] element The select element to use


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::TargetLocator
------------------------------------------------------------------------------
  new(bridge)

------------------------------------------------------------------------------

@api private


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Timeouts
------------------------------------------------------------------------------
  new(bridge)

------------------------------------------------------------------------------


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::TouchActionBuilder
------------------------------------------------------------------------------
  new(mouse, keyboard, touch_screen)

------------------------------------------------------------------------------

@api private


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::TouchScreen
------------------------------------------------------------------------------
  new(bridge)

------------------------------------------------------------------------------

@api private


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Wait
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------

Create a new Wait instance

@param [Hash] opts Options for this instance @option opts [Numeric] :timeout
(5) Seconds to wait before timing out. @option opts [Numeric] :interval (0.2)
Seconds to sleep between polls. @option opts [String] :message Exception
mesage if timed out. @option opts [Array, Exception] :ignore Exceptions to
ignore while polling (default: Error::NoSuchElementError)


(from gem selenium-webdriver-2.27.0)
=== Implementation from Selenium::WebDriver::Window
------------------------------------------------------------------------------
  new(bridge)

------------------------------------------------------------------------------

@api private


(from ruby site)
=== Implementation from Set
------------------------------------------------------------------------------
  new(enum = nil) { |o| ... }

------------------------------------------------------------------------------

Creates a new set containing the elements of the given enumerable object.

If a block is given, the elements of enum are preprocessed by the given block.


(from gem sexp_processor-3.1.0)
=== Implementation from Sexp
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------

Create a new Sexp containing <tt>args</tt>.


(from gem sexp_processor-3.1.0)
=== Implementation from SexpProcessor
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------

Creates a new SexpProcessor.  Use super to invoke this initializer from
SexpProcessor subclasses, then use the attributes above to customize the
functionality of the SexpProcessor


(from gem sexp_processor-3.1.0)
=== Implementation from SexpProcessor::Environment
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Shell
------------------------------------------------------------------------------
  new(pwd = Dir.pwd, umask = nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Shell::AppendFile
------------------------------------------------------------------------------
  new(sh, to_filename, filter)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Shell::AppendIO
------------------------------------------------------------------------------
  new(sh, io, filter)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Shell::Cat
------------------------------------------------------------------------------
  new(sh, *filenames)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Shell::CommandProcessor
------------------------------------------------------------------------------
  new(shell)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Shell::Concat
------------------------------------------------------------------------------
  new(sh, *jobs)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Shell::Echo
------------------------------------------------------------------------------
  new(sh, *strings)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Shell::Filter
------------------------------------------------------------------------------
  new(sh)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Shell::Glob
------------------------------------------------------------------------------
  new(sh, pattern)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Shell::ProcessController
------------------------------------------------------------------------------
  new(shell)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Shell::SystemCommand
------------------------------------------------------------------------------
  new(sh, command, *opts)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Shell::Tee
------------------------------------------------------------------------------
  new(sh, filename)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Shell::Void
------------------------------------------------------------------------------
  new(sh, *opts)

------------------------------------------------------------------------------


(from gem shotgun-0.9)
=== Implementation from Shotgun
------------------------------------------------------------------------------
  new(rackup_file, &block)

------------------------------------------------------------------------------


(from gem shotgun-0.9)
=== Implementation from Shotgun::Loader
------------------------------------------------------------------------------
  new(rackup_file, &block)

------------------------------------------------------------------------------


(from gem shotgun-0.9)
=== Implementation from Shotgun::Static
------------------------------------------------------------------------------
  new(app, public_dir='./public')

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from SignalException
------------------------------------------------------------------------------
  SignalException.new(sig_name)              ->  signal_exception
  SignalException.new(sig_number [, name])   ->  signal_exception

------------------------------------------------------------------------------

Construct a new SignalException object.  <tt>sig_name</tt> should be a known
signal name.


(from gem sinatra-1.3.3)
=== Implementation from Sinatra::Helpers::Stream
------------------------------------------------------------------------------
  new(scheduler = self.class, keep_open = false, &back)

------------------------------------------------------------------------------


(from gem sinatra-1.3.3)
=== Implementation from Sinatra::Helpers::Stream::Base
------------------------------------------------------------------------------
  new(*args, &bk)

------------------------------------------------------------------------------

Create a new instance of the class fronted by its middleware pipeline. The
object is guaranteed to respond to #call but may not be an instance of the
class new was called on.


(from gem sinatra-1.3.3)
=== Implementation from Sinatra::Helpers::Stream::Templates
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem sinatra-1.3.3)
=== Implementation from Sinatra::ShowExceptions
------------------------------------------------------------------------------
  new(app)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from SizedQueue
------------------------------------------------------------------------------
  new(max)

------------------------------------------------------------------------------

Creates a fixed-length queue with a maximum size of <tt>max</tt>.


(from gem fastthread-1.0.7)
=== Implementation from SizedQueue
------------------------------------------------------------------------------
  Mutex.new

------------------------------------------------------------------------------

Creates a new Mutex


(from ruby site)
=== Implementation from Socket
------------------------------------------------------------------------------
  Socket.new(domain, socktype [, protocol]) => socket

------------------------------------------------------------------------------

Creates a new socket object.

<em>domain</em> should be a communications domain such as: :INET, :INET6,
:UNIX, etc.

<em>socktype</em> should be a socket type such as: :STREAM, :DGRAM, :RAW, etc.

<em>protocol</em> should be a protocol defined in the domain. This is
optional. If it is not given, 0 is used internally.

  Socket.new(:INET, :STREAM) # TCP socket
  Socket.new(:INET, :DGRAM)  # UDP socket
  Socket.new(:UNIX, :STREAM) # UNIX stream socket
  Socket.new(:UNIX, :DGRAM)  # UNIX datagram socket


(from ruby site)
=== Implementation from Socket::AncillaryData
------------------------------------------------------------------------------
  Socket::AncillaryData.new(family, cmsg_level, cmsg_type, cmsg_data) -> ancillarydata

------------------------------------------------------------------------------

<em>family</em> should be an integer, a string or a symbol.
* Socket::AF_INET, "AF_INET", "INET", :AF_INET, :INET
* Socket::AF_UNIX, "AF_UNIX", "UNIX", :AF_UNIX, :UNIX
* etc.

<em>cmsg_level</em> should be an integer, a string or a symbol.
* Socket::SOL_SOCKET, "SOL_SOCKET", "SOCKET", :SOL_SOCKET and :SOCKET
* Socket::IPPROTO_IP, "IP" and :IP
* Socket::IPPROTO_IPV6, "IPV6" and :IPV6
* Socket::IPPROTO_TCP, "TCP" and :TCP
* etc.

<em>cmsg_type</em> should be an integer, a string or a symbol. If a
string/symbol is specified, it is interpreted depend on <em>cmsg_level</em>.
* Socket::SCM_RIGHTS, "SCM_RIGHTS", "RIGHTS", :SCM_RIGHTS, :RIGHTS for
  SOL_SOCKET
* Socket::IP_RECVTTL, "RECVTTL" and :RECVTTL for IPPROTO_IP
* Socket::IPV6_PKTINFO, "PKTINFO" and :PKTINFO for IPPROTO_IPV6
* etc.

<em>cmsg_data</em> should be a string.

  p Socket::AncillaryData.new(:INET, :TCP, :NODELAY, "")
  #=> #<Socket::AncillaryData: INET TCP NODELAY "">

  p Socket::AncillaryData.new(:INET6, :IPV6, :PKTINFO, "")
  #=> #<Socket::AncillaryData: INET6 IPV6 PKTINFO "">


(from ruby site)
=== Implementation from Socket::Option
------------------------------------------------------------------------------
  Socket::Option.new(family, level, optname, data) => sockopt

------------------------------------------------------------------------------

Returns a new Socket::Option object.

  sockopt = Socket::Option.new(:INET, :SOCKET, :KEEPALIVE, [1].pack("i"))
  p sockopt #=> #<Socket::Option: INET SOCKET KEEPALIVE 1>


(from ruby site)
=== Implementation from Socket::UDPSource
------------------------------------------------------------------------------
  new(remote_address, local_address, &reply_proc)

------------------------------------------------------------------------------

<tt>remote_adress</tt> is an Addrinfo object.

<tt>local_adress</tt> is an Addrinfo object.

<tt>reply_proc</tt> is a Proc used to send reply back to the source.


(from gem ParseTree-3.0.8)
=== Implementation from SomethingWithInitialize
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem rspec-rails-1.3.2)
=== Implementation from Spec::Rails::Example::CookiesProxy
------------------------------------------------------------------------------
  new(example)

------------------------------------------------------------------------------


(from gem rspec-rails-1.3.2)
=== Implementation from Spec::Rails::Example::HelperExampleGroup::HelperObject
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem rspec-rails-1.3.2)
=== Implementation from Spec::Rails::Example::RoutingHelpers::RouteFor
------------------------------------------------------------------------------
  new(example, options)

------------------------------------------------------------------------------


(from gem rspec-rails-1.3.2)
=== Implementation from Spec::Rails::Matchers::BeRoutable
------------------------------------------------------------------------------
  new(example)

------------------------------------------------------------------------------


(from gem rspec-rails-1.3.2)
=== Implementation from Spec::Runner::Configuration
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Column
------------------------------------------------------------------------------
  new(idx, format, opts={})

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Excel
------------------------------------------------------------------------------
  new(file_path)

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Excel::Error
------------------------------------------------------------------------------
  new(code)

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Excel::ExcelCompatibleWorkbook
------------------------------------------------------------------------------
  new(file_path, *args)

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Excel::Offset
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Excel::Reader
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Excel::SstEntry
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Excel::Workbook
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Excel::Worksheet
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Excel::Writer::Format
------------------------------------------------------------------------------
  new(writer, workbook, format=workbook.default_format, opts={})

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Excel::Writer::Workbook
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Excel::Writer::Worksheet
------------------------------------------------------------------------------
  new(workbook, worksheet)

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Font
------------------------------------------------------------------------------
  new(name, opts={})

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Format
------------------------------------------------------------------------------
  new(opts={}) { |self| ... }

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Link
------------------------------------------------------------------------------
  new(url='', description=url, fragment=nil)

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::ParseExcel::Worksheet::Cell
------------------------------------------------------------------------------
  new(value, format, row, idx)

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Row
------------------------------------------------------------------------------
  new(worksheet, idx, cells=[])

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Workbook
------------------------------------------------------------------------------
  new(io = nil, opts={:default_format => Format.new})

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Worksheet
------------------------------------------------------------------------------
  new(opts={})

------------------------------------------------------------------------------


(from gem spreadsheet-0.6.5.7)
=== Implementation from Spreadsheet::Writer
------------------------------------------------------------------------------
  new(io_or_path)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from SshDirPublisher
------------------------------------------------------------------------------
  new(host, remote_dir, local_dir)

------------------------------------------------------------------------------


(from gem rake-10.0.2)
=== Implementation from SshDirPublisher
------------------------------------------------------------------------------
  new(host, remote_dir, local_dir)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from SshFilePublisher
------------------------------------------------------------------------------
  new(host, remote_dir, local_dir, *files)

------------------------------------------------------------------------------

Create a publisher using the give host information.


(from gem rake-10.0.2)
=== Implementation from SshFilePublisher
------------------------------------------------------------------------------
  new(host, remote_dir, local_dir, *files)

------------------------------------------------------------------------------

Create a publisher using the give host information.


(from ruby site)
=== Implementation from String
------------------------------------------------------------------------------
  String.new(str="")   -> new_str

------------------------------------------------------------------------------

Returns a new string object containing a copy of <em>str</em>.


(from ruby site)
=== Implementation from StringIO
------------------------------------------------------------------------------
  StringIO.new(string=""[, mode])

------------------------------------------------------------------------------

Creates new StringIO instance from with <em>string</em> and <em>mode</em>.


(from ruby site)
=== Implementation from StringScanner
------------------------------------------------------------------------------
  StringScanner.new(string, dup = false)

------------------------------------------------------------------------------

Creates a new StringScanner object to scan over the given <tt>string</tt>.
<tt>dup</tt> argument is obsolete and not used now.


(from ruby site)
=== Implementation from Struct
------------------------------------------------------------------------------
  Struct.new( [aString] [, aSym]+> )    -> StructClass
  StructClass.new(arg, ...)             -> obj
  StructClass[arg, ...]                 -> obj

------------------------------------------------------------------------------

Creates a new class, named by <em>aString</em>, containing accessor methods
for the given symbols. If the name <em>aString</em> is omitted, an anonymous
structure class will be created. Otherwise, the name of this struct will
appear as a constant in class <tt>Struct</tt>, so it must be unique for all
<tt>Struct</tt>s in the system and should start with a capital letter.
Assigning a structure class to a constant effectively gives the class the name
of the constant.

<tt>Struct::new</tt> returns a new <tt>Class</tt> object, which can then be
used to create specific instances of the new structure. The number of actual
parameters must be less than or equal to the number of attributes defined for
this class; unset parameters default to <tt>nil</tt>.  Passing too many
parameters will raise an <tt>ArgumentError</tt>.

The remaining methods listed in this section (class and instance) are defined
for this generated class.

  # Create a structure with a name in Struct
  Struct.new("Customer", :name, :address)    #=> Struct::Customer
  Struct::Customer.new("Dave", "123 Main")   #=> #<struct Struct::Customer name="Dave", address="123 Main">

  # Create a structure named by its constant
  Customer = Struct.new(:name, :address)     #=> Customer
  Customer.new("Dave", "123 Main")           #=> #<struct Customer name="Dave", address="123 Main">


(from ruby site)
=== Implementation from Sync_m
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem syntax-1.0.0)
=== Implementation from Syntax::Convertors::Abstract
------------------------------------------------------------------------------
  new( tokenizer )

------------------------------------------------------------------------------

Creates a new convertor that uses the given tokenizer.


(from gem syntax-1.0.0)
=== Implementation from Syntax::Token
------------------------------------------------------------------------------
  new( text, group, instruction = :none )

------------------------------------------------------------------------------

Create a new Token representing the given text, and belonging to the given
group.


(from ruby site)
=== Implementation from SystemCallError
------------------------------------------------------------------------------
  SystemCallError.new(msg, errno)  -> system_call_error_subclass

------------------------------------------------------------------------------

If <em>errno</em> corresponds to a known system error code, constructs the
appropriate <tt>Errno</tt> class for that error, otherwise constructs a
generic <tt>SystemCallError</tt> object. The error number is subsequently
available via the <tt>errno</tt> method.


(from ruby site)
=== Implementation from SystemExit
------------------------------------------------------------------------------
  SystemExit.new(status=0)   -> system_exit

------------------------------------------------------------------------------

Create a new <tt>SystemExit</tt> exception with the given status.


(from ruby site)
=== Implementation from TCPServer
------------------------------------------------------------------------------
  TCPServer.new([hostname,] port)                    => tcpserver

------------------------------------------------------------------------------

Creates a new server socket bound to <em>port</em>.

If <em>hostname</em> is given, the socket is bound to it.

  serv = TCPServer.new("127.0.0.1", 28561)
  s = serv.accept
  s.puts Time.now
  s.close


(from ruby site)
=== Implementation from TCPSocket
------------------------------------------------------------------------------
  TCPSocket.new(remote_host, remote_port, local_host=nil, local_port=nil)

------------------------------------------------------------------------------

Opens a TCP connection to <tt>remote_host</tt> on <tt>remote_port</tt>.  If
<tt>local_host</tt> and <tt>local_port</tt> are specified, then those
parameters are used on the local end to establish the connection.


(from gem actionmailer-2.3.5)
=== Implementation from TMail::Address
------------------------------------------------------------------------------
  new( local, domain )

------------------------------------------------------------------------------

Address.new(local, domain)

Accepts:

* local - Left of the at symbol

* domain - Array of the domain split at the periods.

For example:

  Address.new("mikel", ["lindsaar", "net"])
  #=> "#<TMail::Address mikel@lindsaar.net>"


(from gem actionmailer-2.3.5)
=== Implementation from TMail::AddressGroup
------------------------------------------------------------------------------
  new( name, addrs )

------------------------------------------------------------------------------


(from gem actionmailer-2.3.5)
=== Implementation from TMail::FilePort
------------------------------------------------------------------------------
  new( fname )

------------------------------------------------------------------------------


(from gem actionmailer-2.3.5)
=== Implementation from TMail::HeaderField
------------------------------------------------------------------------------
  new( body, conf, intern = false )

------------------------------------------------------------------------------


(from gem actionmailer-2.3.5)
=== Implementation from TMail::Maildir
------------------------------------------------------------------------------
  new( dir = nil )

------------------------------------------------------------------------------


(from gem actionmailer-2.3.5)
=== Implementation from TMail::Maildir
------------------------------------------------------------------------------
  new( dir = nil )

------------------------------------------------------------------------------


(from gem actionmailer-2.3.5)
=== Implementation from TMail::UNIXMbox
------------------------------------------------------------------------------
  new( fname, mhdir, readonly, static )

------------------------------------------------------------------------------


(from gem actionmailer-2.3.5)
=== Implementation from TMail::MhMailbox
------------------------------------------------------------------------------
  new( dir )

------------------------------------------------------------------------------


(from gem actionmailer-2.3.5)
=== Implementation from TMail::MhMailbox
------------------------------------------------------------------------------
  new( dir )

------------------------------------------------------------------------------


(from gem actionmailer-2.3.5)
=== Implementation from TMail::StringPort
------------------------------------------------------------------------------
  new( str = '' )

------------------------------------------------------------------------------


(from gem actionmailer-2.3.5)
=== Implementation from TMail::UNIXMbox
------------------------------------------------------------------------------
  new( fname, mhdir, readonly, static )

------------------------------------------------------------------------------


(from gem tzinfo-0.3.35)
=== Implementation from TZInfo::Country
------------------------------------------------------------------------------
  new(identifier)

------------------------------------------------------------------------------

If identifier is a CountryInfo object, initializes the Country instance, 
otherwise calls get(identifier).


(from gem tzinfo-0.3.35)
=== Implementation from TZInfo::TZDataParser
------------------------------------------------------------------------------
  new(input_dir, output_dir)

------------------------------------------------------------------------------

Initializes a new TZDataParser. input_dir must contain the extracted tzdata
tarball. output_dir is the location to output the modules (in definitions and
indexes directories).


(from gem tzinfo-0.3.35)
=== Implementation from TZInfo::Timezone
------------------------------------------------------------------------------
  new(identifier = nil)

------------------------------------------------------------------------------

If identifier is nil calls super(), otherwise calls get. An identfier  should
always be passed in when called externally.


(from gem tzinfo-0.3.35)
=== Implementation from TZInfo::TimezonePeriod
------------------------------------------------------------------------------
  new(start_transition, end_transition, offset = nil)

------------------------------------------------------------------------------

Initializes a new TimezonePeriod.


(from gem tzinfo-0.3.35)
=== Implementation from TZInfo::TimezoneProxy
------------------------------------------------------------------------------
  new(identifier)

------------------------------------------------------------------------------

Construct a new TimezoneProxy for the given identifier. The identifier is not
checked when constructing the proxy. It will be validated on the when the real
Timezone is loaded.


(from ruby site)
=== Implementation from TempIO
------------------------------------------------------------------------------
  new(string = '')

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Tempfile
------------------------------------------------------------------------------
  new(basename, [tmpdir = Dir.tmpdir], [options])

------------------------------------------------------------------------------

Creates a temporary file with permissions 0600 (= only readable and writable
by the owner) and opens it with mode "w+".

The <tt>basename</tt> parameter is used to determine the name of the temporary
file. You can either pass a String or an Array with 2 String elements. In the
former form, the temporary file's base name will begin with the given string.
In the latter form, the temporary file's base name will begin with the array's
first element, and end with the second element. For example:

  file = Tempfile.new('hello')
  file.path  # => something like: "/tmp/hello2843-8392-92849382--0"

  # Use the Array form to enforce an extension in the filename:
  file = Tempfile.new(['hello', '.jpg'])
  file.path  # => something like: "/tmp/hello2843-8392-92849382--0.jpg"

The temporary file will be placed in the directory as specified by the
<tt>tmpdir</tt> parameter. By default, this is <tt>Dir.tmpdir</tt>. When $SAFE
> 0 and the given <tt>tmpdir</tt> is tainted, it uses '/tmp' as the temporary
directory. Please note that ENV values are tainted by default, and
<tt>Dir.tmpdir</tt>'s return value might come from environment variables (e.g.
<tt>$TMPDIR</tt>).

  file = Tempfile.new('hello', '/home/aisaka')
  file.path  # => something like: "/home/aisaka/hello2843-8392-92849382--0"

You can also pass an options hash. Under the hood, Tempfile creates the
temporary file using <tt>File.open</tt>. These options will be passed to
<tt>File.open</tt>. This is mostly useful for specifying encoding options,
e.g.:

  Tempfile.new('hello', '/home/aisaka', :encoding => 'ascii-8bit')

  # You can also omit the 'tmpdir' parameter:
  Tempfile.new('hello', :encoding => 'ascii-8bit')

=== Exceptions

If Tempfile.new cannot find a unique filename within a limited number of
tries, then it will raise an exception.


(from gem metro-0.3.3)
=== Implementation from TemplateMessage
------------------------------------------------------------------------------
  new(details = {})

------------------------------------------------------------------------------


(from gem metro-0.3.3)
=== Implementation from TemplateMessage::Message
------------------------------------------------------------------------------
  new(name,details)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Test::Unit::AutoRunner
------------------------------------------------------------------------------
  new(force_standalone = false, default_dir = nil, argv = ARGV) { |self| ... }

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Test::Unit::Options
------------------------------------------------------------------------------
  new(*, &block)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Test::Unit::Runner::Worker
------------------------------------------------------------------------------
  new(io, pid, status)

------------------------------------------------------------------------------


(from gem eventmachine-1.0.0)
=== Implementation from TestConnection
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem texplay-0.4.3)
=== Implementation from TexPlay::EmptyImageStub
------------------------------------------------------------------------------
  new(width, height)

------------------------------------------------------------------------------

@param width (see ImageStub#initialize) @param height (see
ImageStub#initialize)


(from gem texplay-0.4.3)
=== Implementation from TexPlay::ImageStub
------------------------------------------------------------------------------
  new(blob_data, width, height)

------------------------------------------------------------------------------

The first pixel in the blob will be at the top left hand corner of the created
image, since that is the orientation of Gosu images.

@param [String] blob_data Raw data string to import. Must be RGBA ordered, (4
* width * height) bytes in length. @param [Integer] width Number of pixels
wide. @param [Integer] height Number of pixels high.


(from gem texplay-0.4.3)
=== Implementation from TexPlay::LSystem
------------------------------------------------------------------------------
  new(&block)

------------------------------------------------------------------------------


(from gem actionmailer-2.3.5)
=== Implementation from Text::Format
------------------------------------------------------------------------------
  new(arg = nil, &block)

------------------------------------------------------------------------------

This constructor takes advantage of a technique for Ruby object construction
introduced by Andy Hunt and Dave Thomas (see reference), where optional values
are set using commands in a block.

  Text::Format.new {
      columns         = 72
      left_margin     = 0
      right_margin    = 0
      first_indent    = 4
      body_indent     = 0
      format_style    = Text::Format::LEFT_ALIGN
      extra_space     = false
      abbreviations   = {}
      tag_paragraph   = false
      tag_text        = []
      nobreak         = false
      nobreak_regex   = {}
      tabstop         = 8
      text            = nil
  }

As shown above, <tt>arg</tt> is optional. If <tt>arg</tt> is specified and is
a <tt>String</tt>, then arg is used as the default value of <tt>#text</tt>.
Alternately, an existing Text::Format object can be used or a Hash can be
used. With all forms, a block can be specified.

<b>Reference</b>:
  "Object Construction and Blocks"
  <http://www.pragmaticprogrammer.com/ruby/articles/insteval.html>



(from gem maruku-0.6.1)
=== Implementation from Textile2Signature
------------------------------------------------------------------------------
  new(s)

------------------------------------------------------------------------------


(from gem thin-1.5.0)
=== Implementation from Thin::Backends::Base
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem thin-1.5.0)
=== Implementation from Thin::Backends::SwiftiplyClient
------------------------------------------------------------------------------
  new(host, port, options={})

------------------------------------------------------------------------------


(from gem thin-1.5.0)
=== Implementation from Thin::Backends::TcpServer
------------------------------------------------------------------------------
  new(host, port)

------------------------------------------------------------------------------


(from gem thin-1.5.0)
=== Implementation from Thin::Backends::UnixServer
------------------------------------------------------------------------------
  new(socket)

------------------------------------------------------------------------------


(from gem thin-1.5.0)
=== Implementation from Thin::Command
------------------------------------------------------------------------------
  new(name, options={})

------------------------------------------------------------------------------


(from gem thin-1.5.0)
=== Implementation from Thin::Controllers::Cluster
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------

Create a new cluster of servers launched using <tt>options</tt>.


(from gem thin-1.5.0)
=== Implementation from Thin::Controllers::Controller
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------


(from gem thin-1.5.0)
=== Implementation from Thin::Controllers::Service
------------------------------------------------------------------------------
  new(options)

------------------------------------------------------------------------------


(from gem thin-1.5.0)
=== Implementation from Thin::Headers
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem thin-1.5.0)
=== Implementation from Thin::OptionRequired
------------------------------------------------------------------------------
  new(option)

------------------------------------------------------------------------------


(from gem thin-1.5.0)
=== Implementation from Thin::Request
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem thin-1.5.0)
=== Implementation from Thin::Response
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem thin-1.5.0)
=== Implementation from Thin::Runner
------------------------------------------------------------------------------
  new(argv)

------------------------------------------------------------------------------


(from gem thin-1.5.0)
=== Implementation from Thin::Server
------------------------------------------------------------------------------
  new(*args, &block)

------------------------------------------------------------------------------


(from gem thin-1.5.0)
=== Implementation from Thin::Stats::Adapter
------------------------------------------------------------------------------
  new(app, path='/stats')

------------------------------------------------------------------------------


(from gem thor-0.16.0)
=== Implementation from Thor::Actions
------------------------------------------------------------------------------
  new(args=[], options={}, config={})

------------------------------------------------------------------------------

Extends initializer to add more configuration options.

==== Configuration
behavior<Symbol>:
  The actions default behavior. Can be :invoke or :revoke. It also accepts
  :force, :skip and :pretend to set the behavior and the respective option.


destination_root<String>:
  The root directory needed for some actions.



(from gem bundler-1.2.3)
=== Implementation from Thor::Actions
------------------------------------------------------------------------------
  new(args=[], options={}, config={})

------------------------------------------------------------------------------

Extends initializer to add more configuration options.

==== Configuration
behavior<Symbol>:
  The actions default behavior. Can be :invoke or :revoke. It also accepts
  :force, :skip and :pretend to set the behavior and the respective option.


destination_root<String>:
  The root directory needed for some actions.



(from gem thor-0.16.0)
=== Implementation from Thor::Base
------------------------------------------------------------------------------
  new(args=[], options={}, config={})

------------------------------------------------------------------------------

It receives arguments in an Array and two hashes, one for options and other
for configuration.

Notice that it does not check if all required arguments were supplied. It
should be done by the parser.

==== Parameters
args<Array[Object]>:
  An array of objects. The objects are applied to their respective accessors
  declared with <tt>argument</tt>.


options<Hash>:
  An options hash that will be available as self.options. The hash given is
  converted to a hash with indifferent access, magic predicates
  (options.skip?) and then frozen.


config<Hash>:
  Configuration for this Thor class.



(from gem bundler-1.2.3)
=== Implementation from Thor::Base
------------------------------------------------------------------------------
  new(args=[], options={}, config={})

------------------------------------------------------------------------------

It receives arguments in an Array and two hashes, one for options and other
for configuration.

Notice that it does not check if all required arguments were supplied. It
should be done by the parser.

==== Parameters
args<Array[Object]>:
  An array of objects. The objects are applied to their respective accessors
  declared with <tt>argument</tt>.


options<Hash>:
  An options hash that will be available as self.options. The hash given is
  converted to a hash with indifferent access, magic predicates
  (options.skip?) and then frozen.


config<Hash>:
  Configuration for this Thor class.



(from gem bundler-1.2.3)
=== Implementation from Thor::DynamicTask
------------------------------------------------------------------------------
  new(name, options=nil)

------------------------------------------------------------------------------


(from gem thor-0.16.0)
=== Implementation from Thor::DynamicTask
------------------------------------------------------------------------------
  new(name, options=nil)

------------------------------------------------------------------------------


(from gem bundler-1.2.3)
=== Implementation from Thor::Shell
------------------------------------------------------------------------------
  new(args=[], options={}, config={})

------------------------------------------------------------------------------

Add shell to initialize config values.

==== Configuration
shell<Object>:
  An instance of the shell to be used.


==== Examples

  class MyScript < Thor
    argument :first, :type => :numeric
  end

  MyScript.new [1.0], { :foo => :bar }, :shell => Thor::Shell::Basic.new


(from gem thor-0.16.0)
=== Implementation from Thor::Shell
------------------------------------------------------------------------------
  new(args=[], options={}, config={})

------------------------------------------------------------------------------

Add shell to initialize config values.

==== Configuration
shell<Object>:
  An instance of the shell to be used.


==== Examples

  class MyScript < Thor
    argument :first, :type => :numeric
  end

  MyScript.new [1.0], { :foo => :bar }, :shell => Thor::Shell::Basic.new


(from gem bundler-1.2.3)
=== Implementation from Thor::Task
------------------------------------------------------------------------------
  new(name, description, long_description, usage, options=nil)

------------------------------------------------------------------------------


(from gem thor-0.16.0)
=== Implementation from Thor::Task
------------------------------------------------------------------------------
  new(name, description, long_description, usage, options=nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Thread
------------------------------------------------------------------------------
  new(*arg, &block)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from ThreadsWait
------------------------------------------------------------------------------
  new(*threads)

------------------------------------------------------------------------------

Creates a ThreadsWait object, specifying the threads to wait on. Non-blocking.


(from gem tilt-1.3.3)
=== Implementation from Tilt
------------------------------------------------------------------------------
  new(file, line=nil, options={}, &block)

------------------------------------------------------------------------------

Create a new template for the given file using the file's extension to
determine the the template mapping.


(from gem tilt-1.3.3)
=== Implementation from Tilt::Cache
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem tilt-1.3.3)
=== Implementation from Tilt::Template
------------------------------------------------------------------------------
  new(file=nil, line=1, options={}, &block)

------------------------------------------------------------------------------

Create a new template with the file, line, and options specified. By default,
template data is read from the file. When a block is given, it should read
template data and return as a String. When file is nil, a block is required.

All arguments are optional.


(from ruby site)
=== Implementation from Time
------------------------------------------------------------------------------
  Time.new -> time
  Time.new(year, month=nil, day=nil, hour=nil, min=nil, sec=nil, utc_offset=nil) -> time

------------------------------------------------------------------------------

Returns a <tt>Time</tt> object.

It is initialized to the current system time if no argument. <b>Note:</b> The
object created will be created using the resolution available on your system
clock, and so may include fractional seconds.

If one or more arguments specified, the time is initialized to the specified
time. <em>sec</em> may have fraction if it is a rational.

<em>utc_offset</em> is the offset from UTC. It is a string such as "+09:00" or
a number of seconds such as 32400.

  a = Time.new      #=> 2007-11-19 07:50:02 -0600
  b = Time.new      #=> 2007-11-19 07:50:02 -0600
  a == b            #=> false
  "%.6f" % a.to_f   #=> "1195480202.282373"
  "%.6f" % b.to_f   #=> "1195480202.283415"

  Time.new(2008,6,21, 13,30,0, "+09:00") #=> 2008-06-21 13:30:00 +0900

  # A trip for RubyConf 2007
  t1 = Time.new(2007,11,1,15,25,0, "+09:00") # JST (Narita)
  t2 = Time.new(2007,11,1,12, 5,0, "-05:00") # CDT (Minneapolis)
  t3 = Time.new(2007,11,1,13,25,0, "-05:00") # CDT (Minneapolis)
  t4 = Time.new(2007,11,1,16,53,0, "-04:00") # EDT (Charlotte)
  t5 = Time.new(2007,11,5, 9,24,0, "-05:00") # EST (Charlotte)
  t6 = Time.new(2007,11,5,11,21,0, "-05:00") # EST (Detroit)
  t7 = Time.new(2007,11,5,13,45,0, "-05:00") # EST (Detroit)
  t8 = Time.new(2007,11,6,17,10,0, "+09:00") # JST (Narita)
  p((t2-t1)/3600.0)                          #=> 10.666666666666666
  p((t4-t3)/3600.0)                          #=> 2.466666666666667
  p((t6-t5)/3600.0)                          #=> 1.95
  p((t8-t7)/3600.0)                          #=> 13.416666666666666


(from gem tins-0.3.12)
=== Implementation from Tins::Bijection
------------------------------------------------------------------------------
  new(inverted = Bijection.new(self))

------------------------------------------------------------------------------


(from gem tins-0.3.12)
=== Implementation from Tins::Find::Finder
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------


(from gem tins-0.3.12)
=== Implementation from Tins::Generator
------------------------------------------------------------------------------
  new(enums)

------------------------------------------------------------------------------

Create a new Generator instance. Use the objects in the Array <em>enums</em>
as dimensions. The should all respond to the :each method (see module
Enumerable in the core ruby library).


(from gem tins-0.3.12)
=== Implementation from Tins::Limited
------------------------------------------------------------------------------
  new(maximum)

------------------------------------------------------------------------------

Create a Limited instance, that runs <em>maximum</em> threads at most.


(from gem tins-0.3.12)
=== Implementation from Tins::LinesFile
------------------------------------------------------------------------------
  new(lines, line_number = nil)

------------------------------------------------------------------------------


(from gem tins-0.3.12)
=== Implementation from Tins::StringVersion::Version
------------------------------------------------------------------------------
  new(string)

------------------------------------------------------------------------------


(from gem tins-0.3.12)
=== Implementation from Tins::TimeDummy::ClassMethods
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem treetop-1.4.10)
=== Implementation from Treetop::Compiler::LexicalAddressSpace
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem treetop-1.4.10)
=== Implementation from Treetop::Compiler::RubyBuilder
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem treetop-1.4.10)
=== Implementation from Treetop::Compiler::SequenceElementAccessorModule
------------------------------------------------------------------------------
  new(sequence_elements)

------------------------------------------------------------------------------


(from gem treetop-1.4.10)
=== Implementation from Treetop::Runtime::CompiledParser
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem treetop-1.4.10)
=== Implementation from Treetop::Runtime::SyntaxNode
------------------------------------------------------------------------------
  new(input, interval, elements = nil)

------------------------------------------------------------------------------


(from gem treetop-1.4.10)
=== Implementation from Treetop::Runtime::TerminalParseFailure
------------------------------------------------------------------------------
  new(index, expected_string)

------------------------------------------------------------------------------


(from gem treetop-1.4.10)
=== Implementation from Treetop::Runtime::TerminalSyntaxNode
------------------------------------------------------------------------------
  new(input, interval)

------------------------------------------------------------------------------


(from gem trollop-1.16.2)
=== Implementation from Trollop::Parser
------------------------------------------------------------------------------
  new(*a, &b)

------------------------------------------------------------------------------

Initializes the parser, and instance-evaluates any block given.


(from ruby site)
=== Implementation from UDPSocket
------------------------------------------------------------------------------
  UDPSocket.new([address_family]) => socket

------------------------------------------------------------------------------

Creates a new UDPSocket object.

<em>address_family</em> should be an integer, a string or a symbol:
Socket::AF_INET, "AF_INET", :INET, etc.

  UDPSocket.new                   #=> #<UDPSocket:fd 3>
  UDPSocket.new(Socket::AF_INET6) #=> #<UDPSocket:fd 4>


(from ruby site)
=== Implementation from UNIXServer
------------------------------------------------------------------------------
  UNIXServer.new(path) => unixserver

------------------------------------------------------------------------------

Creates a new UNIX server socket bound to <em>path</em>.

  serv = UNIXServer.new("/tmp/sock")
  s = serv.accept
  p s.read


(from ruby site)
=== Implementation from UNIXSocket
------------------------------------------------------------------------------
  UNIXSocket.new(path) => unixsocket

------------------------------------------------------------------------------

Creates a new UNIX client socket connected to <em>path</em>.

  s = UNIXSocket.new("/tmp/sock")
  s.send "hello", 0


(from ruby site)
=== Implementation from URI::FTP
------------------------------------------------------------------------------
  new(*arg)

------------------------------------------------------------------------------

== Description

Creates a new URI::FTP object from generic URL components with no syntax
checking.

Unlike build(), this method does not escape the path component as required by
RFC1738; instead it is treated as per RFC2396.

Arguments are <tt>scheme</tt>, <tt>userinfo</tt>, <tt>host</tt>,
<tt>port</tt>, <tt>registry</tt>, <tt>path</tt>, <tt>opaque</tt>,
<tt>query</tt> and <tt>fragment</tt>, in that order.


(from ruby site)
=== Implementation from URI::Generic
------------------------------------------------------------------------------
  new(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = DEFAULT_PARSER, arg_check = false)

------------------------------------------------------------------------------

== Args

<tt>scheme</tt>:
  Protocol scheme, i.e. 'http','ftp','mailto' and so on.

<tt>userinfo</tt>:
  User name and password, i.e. 'sdmitry:bla'

<tt>host</tt>:
  Server host name

<tt>port</tt>:
  Server port

<tt>registry</tt>:
  Registry of naming authorities.

<tt>path</tt>:
  Path on server

<tt>opaque</tt>:
  Opaque part

<tt>query</tt>:
  Query data

<tt>fragment</tt>:
  A part of URI after '#' sign

<tt>parser</tt>:
  Parser for internal use [URI::DEFAULT_PARSER by default]

<tt>arg_check</tt>:
  Check arguments [false by default]


== Description

Creates a new URI::Generic instance from ``generic'' components without check.


(from ruby site)
=== Implementation from URI::HTTP
------------------------------------------------------------------------------
  new(*arg)

------------------------------------------------------------------------------

== Description

Create a new URI::HTTP object from generic URI components as per RFC 2396. No
HTTP-specific syntax checking (as per RFC 1738) is performed.

Arguments are <tt>scheme</tt>, <tt>userinfo</tt>, <tt>host</tt>,
<tt>port</tt>, <tt>registry</tt>, <tt>path</tt>, <tt>opaque</tt>,
<tt>query</tt> and <tt>fragment</tt>, in that order.

Example:

  uri = URI::HTTP.new('http', nil, "www.example.com", nil, "/path",
    "query", 'fragment')

See also URI::Generic.new


(from ruby site)
=== Implementation from URI::LDAP
------------------------------------------------------------------------------
  new(*arg)

------------------------------------------------------------------------------

== Description

Create a new URI::LDAP object from generic URI components as per RFC 2396. No
LDAP-specific syntax checking is performed.

Arguments are <tt>scheme</tt>, <tt>userinfo</tt>, <tt>host</tt>,
<tt>port</tt>, <tt>registry</tt>, <tt>path</tt>, <tt>opaque</tt>,
<tt>query</tt> and <tt>fragment</tt>, in that order.

Example:

  uri = URI::LDAP.new("ldap", nil, "ldap.example.com", nil,
    "/dc=example;dc=com", "query", nil, nil, nil, nil)

See also URI::Generic.new


(from ruby site)
=== Implementation from URI::MailTo
------------------------------------------------------------------------------
  new(*arg)

------------------------------------------------------------------------------

== Description

Creates a new URI::MailTo object from generic URL components with no syntax
checking.

This method is usually called from URI::parse, which checks the validity of
each component.


(from ruby site)
=== Implementation from URI::Parser
------------------------------------------------------------------------------
  new(opts = {})

------------------------------------------------------------------------------

== Synopsis

  URI::Parser.new([opts])

== Args

The constructor accepts a hash as options for parser. Keys of options are
pattern names of URI components and values of options are pattern strings. The
constructor generetes set of regexps for parsing URIs.

You can use the following keys:

  * :ESCAPED (URI::PATTERN::ESCAPED in default)
  * :UNRESERVED (URI::PATTERN::UNRESERVED in default)
  * :DOMLABEL (URI::PATTERN::DOMLABEL in default)
  * :TOPLABEL (URI::PATTERN::TOPLABEL in default)
  * :HOSTNAME (URI::PATTERN::HOSTNAME in default)

== Examples

  p = URI::Parser.new(:ESCAPED => "(?:%[a-fA-F0-9]{2}|%u[a-fA-F0-9]{4})")
  u = p.parse("http://example.jp/%uABCD") #=> #<URI::HTTP:0xb78cf4f8 URL:http://example.jp/%uABCD>
  URI.parse(u.to_s) #=> raises URI::InvalidURIError

  s = "http://examle.com/ABCD"
  u1 = p.parse(s) #=> #<URI::HTTP:0xb78c3220 URL:http://example.com/ABCD>
  u2 = URI.parse(s) #=> #<URI::HTTP:0xb78b6d54 URL:http://example.com/ABCD>
  u1 == u2 #=> true
  u1.eql?(u2) #=> false


(from gem net-scp-1.0.4)
=== Implementation from URI::SCP
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem ParseTree-3.0.8)
=== Implementation from Unifier
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Vector
------------------------------------------------------------------------------
  new(array)

------------------------------------------------------------------------------

Vector.new is private; use Vector[] or Vector.elements to create.


(from ruby site)
=== Implementation from WEBrick::BasicLog
------------------------------------------------------------------------------
  new(log_file=nil, level=nil)

------------------------------------------------------------------------------

Initializes a new logger for <tt>log_file</tt> that outputs messages at
<tt>level</tt> or higher.  <tt>log_file</tt> can be a filename, an IO-like
object that responds to #<< or nil which outputs to $stderr.

If no level is given INFO is chosen by default


(from ruby site)
=== Implementation from WEBrick::CGI
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from WEBrick::CGI::Socket
------------------------------------------------------------------------------
  new(config, env, stdin, stdout)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from WEBrick::Cookie
------------------------------------------------------------------------------
  new(name, value)

------------------------------------------------------------------------------

attr_accessor :comment_url, :discard, :port


(from ruby site)
=== Implementation from WEBrick::GenericServer
------------------------------------------------------------------------------
  new(config={}, default=Config::General)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from WEBrick::HTTPAuth::BasicAuth
------------------------------------------------------------------------------
  new(config, default=Config::BasicAuth)

------------------------------------------------------------------------------

Creates a new BasicAuth instance.

See WEBrick::Config::BasicAuth for default configuration entries

You must supply the following configuration entries:

:Realm:
  The name of the realm being protected.

:UserDB:
  A database of usernames and passwords. A WEBrick::HTTPAuth::Htpasswd
  instance should be used.



(from ruby site)
=== Implementation from WEBrick::HTTPAuth::DigestAuth
------------------------------------------------------------------------------
  new(config, default=Config::DigestAuth)

------------------------------------------------------------------------------

Creates a new DigestAuth instance.  Be sure to use the same DigestAuth
instance for multiple requests as it saves state between requests in order to
perform authentication.

See WEBrick::Config::DigestAuth for default configuration entries

You must supply the following configuration entries:

:Realm:
  The name of the realm being protected.

:UserDB:
  A database of usernames and passwords. A WEBrick::HTTPAuth::Htdigest
  instance should be used.



(from ruby site)
=== Implementation from WEBrick::HTTPAuth::Htdigest
------------------------------------------------------------------------------
  new(path)

------------------------------------------------------------------------------

Open a digest password database at <tt>path</tt>


(from ruby site)
=== Implementation from WEBrick::HTTPAuth::Htgroup
------------------------------------------------------------------------------
  new(path)

------------------------------------------------------------------------------

Open a group database at <tt>path</tt>


(from ruby site)
=== Implementation from WEBrick::HTTPAuth::Htpasswd
------------------------------------------------------------------------------
  new(path)

------------------------------------------------------------------------------

Open a password database at <tt>path</tt>


(from ruby site)
=== Implementation from WEBrick::HTTPProxyServer
------------------------------------------------------------------------------
  new(config={}, default=Config::HTTP)

------------------------------------------------------------------------------

Proxy server configurations.  The proxy server handles the following
configuration items in addition to those supported by HTTPServer:

:ProxyAuthProc:
  Called with a request and response to authorize a request

:ProxyVia:
  Appended to the via header

:ProxyURI:
  The proxy server's URI

:ProxyContentHandler:
  Called with a request and resopnse and allows modification of the response

:ProxyTimeout:
  Sets the proxy timeouts to 30 seconds for open and 60 seconds for read
  operations



(from ruby site)
=== Implementation from WEBrick::HTTPRequest
------------------------------------------------------------------------------
  new(config)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from WEBrick::HTTPResponse
------------------------------------------------------------------------------
  new(config)

------------------------------------------------------------------------------

Creates a new HTTP response object


(from ruby site)
=== Implementation from WEBrick::HTTPServer
------------------------------------------------------------------------------
  new(config={}, default=Config::HTTP)

------------------------------------------------------------------------------

Creates a new HTTP server according to <tt>config</tt>

An HTTP server uses the following attributes:

:AccessLog:
  An array of access logs.  See WEBrick::AccessLog

:BindAddress:
  Local address for the server to bind to

:DocumentRoot:
  Root path to serve files from

:DocumentRootOptions:
  Options for the default HTTPServlet::FileHandler

:HTTPVersion:
  The HTTP version of this server

:Port:
  Port to listen on

:RequestCallback:
  Called with a request and response before each request is serviced.

:RequestTimeout:
  Maximum time to wait between requests

:ServerAlias:
  Array of alternate names for this server for virtual hosting

:ServerName:
  Name for this server for virtual hosting



(from ruby site)
=== Implementation from WEBrick::HTTPServer::MountTable
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from WEBrick::HTTPServlet::AbstractServlet
------------------------------------------------------------------------------
  new(server, *options)

------------------------------------------------------------------------------

Initializes a new servlet for <tt>server</tt> using <tt>options</tt> which are
stored as-is in +@options+.  +@logger+ is also provided.


(from ruby site)
=== Implementation from WEBrick::HTTPServlet::CGIHandler
------------------------------------------------------------------------------
  new(server, name)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from WEBrick::HTTPServlet::DefaultFileHandler
------------------------------------------------------------------------------
  new(server, local_path)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from WEBrick::HTTPServlet::ERBHandler
------------------------------------------------------------------------------
  new(server, name)

------------------------------------------------------------------------------

Creates a new ERBHandler on <tt>server</tt> that will evaluate and serve the
ERB file <tt>name</tt>


(from ruby site)
=== Implementation from WEBrick::HTTPServlet::FileHandler
------------------------------------------------------------------------------
  new(server, root, options={}, default=Config::FileHandler)

------------------------------------------------------------------------------

Creates a FileHandler servlet on <tt>server</tt> that serves files starting at
directory <tt>root</tt>

If <tt>options</tt> is a Hash the following keys are allowed:

:AcceptableLanguages:
  Array of languages allowed for accept-language

:DirectoryCallback:
  Allows preprocessing of directory requests

:FancyIndexing:
  If true, show an index for directories

:FileCallback:
  Allows preprocessing of file requests

:HandlerCallback:
  Allows preprocessing of requests

:HandlerTable:
  Maps file suffixes to file handlers. DefaultFileHandler is used by default
  but any servlet can be used.

:NondisclosureName:
  Do not show files matching this array of globs

:UserDir:
  Directory inside ~user to serve content from for /~user requests.  Only
  works if mounted on /


If <tt>options</tt> is true or false then <tt>:FancyIndexing</tt> is enabled
or disabled respectively.


(from ruby site)
=== Implementation from WEBrick::HTTPServlet::ProcHandler
------------------------------------------------------------------------------
  new(proc)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from WEBrick::HTTPUtils::FormData
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from WEBrick::HTTPVersion
------------------------------------------------------------------------------
  new(version)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from WEBrick::Log
------------------------------------------------------------------------------
  new(log_file=nil, level=nil)

------------------------------------------------------------------------------

Same as BasicLog#initialize

You can set the timestamp format through #time_format


(from ruby site)
=== Implementation from WEBrick::Utils::TimeoutHandler
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from WIN32OLE
------------------------------------------------------------------------------
  WIN32OLE.new(server, [host]) -> WIN32OLE object

------------------------------------------------------------------------------

Returns a new WIN32OLE object(OLE Automation object). The first argument
server specifies OLE Automation server. The first argument should be CLSID or
PROGID. If second argument host specified, then returns OLE Automation object
on host.

  WIN32OLE.new('Excel.Application') # => Excel OLE Automation WIN32OLE object.
  WIN32OLE.new('{00024500-0000-0000-C000-000000000046}') # => Excel OLE Automation WIN32OLE object.


(from ruby site)
=== Implementation from WIN32OLE_EVENT
------------------------------------------------------------------------------
  WIN32OLE_EVENT.new(ole, event) #=> WIN32OLE_EVENT object.

------------------------------------------------------------------------------

Returns OLE event object. The first argument specifies WIN32OLE object. The
second argument specifies OLE event name.
  ie = WIN32OLE.new('InternetExplorer.Application')
  ev = WIN32OLE_EVENT.new(ie, 'DWebBrowserEvents')


(from ruby site)
=== Implementation from WIN32OLE_METHOD
------------------------------------------------------------------------------
  WIN32OLE_METHOD.new(ole_type,  method) -> WIN32OLE_METHOD object

------------------------------------------------------------------------------

Returns a new WIN32OLE_METHOD object which represents the information about
OLE method. The first argument <em>ole_type</em> specifies WIN32OLE_TYPE
object. The second argument <em>method</em> specifies OLE method name defined
OLE class which represents WIN32OLE_TYPE object.

  tobj = WIN32OLE_TYPE.new('Microsoft Excel 9.0 Object Library', 'Workbook')
  method = WIN32OLE_METHOD.new(tobj, 'SaveAs')


(from ruby site)
=== Implementation from WIN32OLE_PARAM
------------------------------------------------------------------------------
  new(p1, p2)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from WIN32OLE_TYPE
------------------------------------------------------------------------------
  WIN32OLE_TYPE.new(typelib, ole_class) -> WIN32OLE_TYPE object

------------------------------------------------------------------------------

Returns a new WIN32OLE_TYPE object. The first argument <em>typelib</em>
specifies OLE type library name. The second argument specifies OLE class name.

  WIN32OLE_TYPE.new('Microsoft Excel 9.0 Object Library', 'Application')
      # => WIN32OLE_TYPE object of Application class of Excel.


(from ruby site)
=== Implementation from WIN32OLE_TYPELIB
------------------------------------------------------------------------------
  WIN32OLE_TYPELIB.new(typelib [, version1, version2]) -> WIN32OLE_TYPELIB object

------------------------------------------------------------------------------

Returns a new WIN32OLE_TYPELIB object.

The first argument <em>typelib</em>  specifies OLE type library name or GUID
or OLE library file. The second argument is major version or version of the
type library. The third argument is minor version. The second argument and
third argument are optional. If the first argument is type library name, then
the second and third argument are ignored.

  tlib1 = WIN32OLE_TYPELIB.new('Microsoft Excel 9.0 Object Library')
  tlib2 = WIN32OLE_TYPELIB.new('{00020813-0000-0000-C000-000000000046}')
  tlib3 = WIN32OLE_TYPELIB.new('{00020813-0000-0000-C000-000000000046}', 1.3)
  tlib4 = WIN32OLE_TYPELIB.new('{00020813-0000-0000-C000-000000000046}', 1, 3)
  tlib5 = WIN32OLE_TYPELIB.new("C:\\WINNT\\SYSTEM32\\SHELL32.DLL")
  puts tlib1.name  # -> 'Microsoft Excel 9.0 Object Library'
  puts tlib2.name  # -> 'Microsoft Excel 9.0 Object Library'
  puts tlib3.name  # -> 'Microsoft Excel 9.0 Object Library'
  puts tlib4.name  # -> 'Microsoft Excel 9.0 Object Library'
  puts tlib5.name  # -> 'Microsoft Shell Controls And Automation'


(from ruby site)
=== Implementation from WIN32OLE_VARIANT
------------------------------------------------------------------------------
  WIN32OLE_VARIANT.new(val, vartype) #=> WIN32OLE_VARIANT object.

------------------------------------------------------------------------------

Returns Ruby object wrapping OLE variant. The first argument specifies Ruby
object to convert OLE variant variable. The second argument specifies VARIANT
type. In some situation, you need the WIN32OLE_VARIANT object to pass OLE
method

  shell = WIN32OLE.new("Shell.Application")
  folder = shell.NameSpace("C:\\Windows")
  item = folder.ParseName("tmp.txt")
  # You can't use Ruby String object to call FolderItem.InvokeVerb.
  # Instead, you have to use WIN32OLE_VARIANT object to call the method.
  shortcut = WIN32OLE_VARIANT.new("Create Shortcut(\&S)")
  item.invokeVerb(shortcut)


(from gem soap4r-1.5.8)
=== Implementation from WSDL::Binding
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::Definitions
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::Documentation
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::Import
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::Info
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::Message
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::Operation
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::Operation::NameInfo
------------------------------------------------------------------------------
  new(op_name, optype_name, parts)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::OperationBinding
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::Param
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::Parser
------------------------------------------------------------------------------
  new(opt = {})

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::Parser::ParseFrame
------------------------------------------------------------------------------
  new(ns, name, node)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::Part
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::Port
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::PortType
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::Address
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::Binding
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::Body
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::CGIStubCreator
------------------------------------------------------------------------------
  new(definitions, name_creator, modulepath = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::ClassDefCreator
------------------------------------------------------------------------------
  new(definitions, name_creator, modulepath = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::ClassNameCreator
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::ClientSkeltonCreator
------------------------------------------------------------------------------
  new(definitions, name_creator, modulepath = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::DriverCreator
------------------------------------------------------------------------------
  new(definitions, name_creator, modulepath = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::EncodedMappingRegistryCreator
------------------------------------------------------------------------------
  new(definitions, name_creator, modulepath, defined_const)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::Fault
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::Header
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::HeaderFault
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::LiteralMappingRegistryCreator
------------------------------------------------------------------------------
  new(definitions, name_creator, modulepath, defined_const)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::MappingRegistryCreator
------------------------------------------------------------------------------
  new(definitions, name_creator, modulepath = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::MethodDefCreator
------------------------------------------------------------------------------
  new(definitions, name_creator, modulepath, defined_const)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::Operation
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::Operation::OperationInfo
------------------------------------------------------------------------------
  new(style, use, encodingstyle, op_name, optype_name, headerparts, bodyparts, faultpart, soapaction)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::ServantSkeltonCreator
------------------------------------------------------------------------------
  new(definitions, name_creator, modulepath = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::ServletStubCreator
------------------------------------------------------------------------------
  new(definitions, name_creator, modulepath = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::StandaloneServerStubCreator
------------------------------------------------------------------------------
  new(definitions, name_creator, modulepath = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::SOAP::WSDL2Ruby
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::Service
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::Types
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::All
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Annotation
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Any
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::AnyAttribute
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Attribute
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::AttributeGroup
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Choice
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::ComplexContent
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::ComplexExtension
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::ComplexRestriction
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::ComplexType
------------------------------------------------------------------------------
  new(name = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Content
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Element
------------------------------------------------------------------------------
  new(name = nil, type = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Enumeration
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::FractionDigits
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Group
------------------------------------------------------------------------------
  new(name = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Import
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::ImportHandler
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Importer
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Include
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Length
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::List
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::MaxExclusive
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::MaxInclusive
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::MaxLength
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::MinExclusive
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::MinInclusive
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::MinLength
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Parser
------------------------------------------------------------------------------
  new(opt = {})

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Parser::ParseFrame
------------------------------------------------------------------------------
  new(ns, name, node)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Pattern
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Schema
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Sequence
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::SimpleContent
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::SimpleExtension
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::SimpleRestriction
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::SimpleType
------------------------------------------------------------------------------
  new(name = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::TotalDigits
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Union
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::Unique
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::WhiteSpace
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from WSDL::XMLSchema::XSD2Ruby
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from WeakRef
------------------------------------------------------------------------------
  new(orig)

------------------------------------------------------------------------------

Creates a weak reference to <tt>orig</tt>


(from gem httpclient-2.3.0.1)
=== Implementation from WebAgent::Cookie
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem httpclient-2.3.0.1)
=== Implementation from WebAgent::CookieManager
------------------------------------------------------------------------------
  new(file=nil)

------------------------------------------------------------------------------


(from gem websocket-1.0.4)
=== Implementation from WebSocket::Frame::Base
------------------------------------------------------------------------------
  new(args = {})

------------------------------------------------------------------------------

Initialize frame @param args [Hash] Arguments for frame @option args [String] 
:data default data for frame @option args [String]  :type Type of frame -
available types are "text", "binary", "ping", "pong" and "close"(support
depends on draft version) @option args [Integer] :version Version of draft.
Currently supported version are 75, 76 and 00-13.


(from gem websocket-1.0.4)
=== Implementation from WebSocket::Frame::Data
------------------------------------------------------------------------------
  new(*args)

------------------------------------------------------------------------------


(from gem websocket-1.0.4)
=== Implementation from WebSocket::Frame::Incoming
------------------------------------------------------------------------------
  new(args = {})

------------------------------------------------------------------------------


(from gem websocket-1.0.4)
=== Implementation from WebSocket::Handshake::Base
------------------------------------------------------------------------------
  new(args = {})

------------------------------------------------------------------------------

Initialize new WebSocket Handshake and set it's state to :new


(from gem websocket-1.0.4)
=== Implementation from WebSocket::Handshake::Client
------------------------------------------------------------------------------
  new(args = {})

------------------------------------------------------------------------------

Initialize new WebSocket Client

@param [Hash] args Arguments for client

@option args [String]  :host Host of request. Required if no :url param was
provided. @option args [String]  :origin Origin of request. Optional, should
be used mostly by browsers. Default: nil @option args [String]  :path Path of
request. Should start with '/'. Default: '/' @option args [Integer] :port Port
of request. Default: nil @option args [String]  :query. Query for request.
Should be in format "aaa=bbb&ccc=ddd" @option args [Boolean] :secure Defines
protocol to use. If true then wss://, otherwise ws://. This option will not
change default port - it should be handled by programmer. @option args
[String]  :url URL of request. Must by in format like
ws://example.com/path?query=true. Every part of this url will be overriden by
more specific arguments. @option args [String]  :uri Alias to :url @option
args [Integer] :version Version of WebSocket to use. Default: 13 (this is
version from RFC)

@example
  Websocket::Handshake::Client.new(:url => "ws://example.com/path?query=true")


(from gem websocket-1.0.4)
=== Implementation from WebSocket::Handshake::Server
------------------------------------------------------------------------------
  new(args = {})

------------------------------------------------------------------------------

Initialize new WebSocket Server

@param [Hash] args Arguments for server

@option args [Boolean] :secure If true then server will use wss:// protocol

@example
  Websocket::Handshake::Server.new(:secure => true)


(from gem will_paginate-2.3.16)
=== Implementation from WillPaginate::Collection
------------------------------------------------------------------------------
  new(page, per_page = WillPaginate.per_page, total = nil)

------------------------------------------------------------------------------

Arguments to the constructor are the current page number, per-page limit and
the total number of entries. The last argument is optional because it is best
to do lazy counting; in other words, count <b>conditionally</b> after
populating the collection using the <tt>replace</tt> method.


(from gem will_paginate-2.3.16)
=== Implementation from WillPaginate::InvalidPage
------------------------------------------------------------------------------
  new(value, page_num = nil)

------------------------------------------------------------------------------


(from gem will_paginate-2.3.16)
=== Implementation from WillPaginate::NamedScope::Scope
------------------------------------------------------------------------------
  new(proxy_scope, options) { |*args| ... }

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Win32::Registry
------------------------------------------------------------------------------
  new(hkey, parent, keyname, disposition)

------------------------------------------------------------------------------

initialize


(from ruby site)
=== Implementation from Win32::Registry::Error
------------------------------------------------------------------------------
  new(code)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Win32::Registry::PredefinedKey
------------------------------------------------------------------------------
  new(hkey, keyname)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Win32::SSPI::Identity
------------------------------------------------------------------------------
  new(user = nil, domain = nil, password = nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Win32::SSPI::NegotiateAuth
------------------------------------------------------------------------------
  new(user = nil, domain = nil)

------------------------------------------------------------------------------

Creates a new instance ready for authentication as the given user in the given
domain. Defaults to current user and domain as defined by ENV["USERDOMAIN"]
and ENV["USERNAME"] if no arguments are supplied.


(from ruby site)
=== Implementation from Win32::SSPI::SSPIResult
------------------------------------------------------------------------------
  new(value)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Win32::SSPI::SecurityBuffer
------------------------------------------------------------------------------
  new(buffer = nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Win32API
------------------------------------------------------------------------------
  new(dllname, func, import, export = "0", calltype = :stdcall)

------------------------------------------------------------------------------


(from gem texplay-0.4.3)
=== Implementation from WinClass
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem texplay-0.4.3)
=== Implementation from WinClass::View
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem wrong-0.6.2)
=== Implementation from Wrong::Chunk
------------------------------------------------------------------------------
  new(file, line_number, &block)

------------------------------------------------------------------------------

line parameter is 1-based


(from gem wrong-0.6.2)
=== Implementation from Wrong::Config
------------------------------------------------------------------------------
  new(string = nil)

------------------------------------------------------------------------------


(from gem wrong-0.6.2)
=== Implementation from Wrong::FailureMessage
------------------------------------------------------------------------------
  new(chunk, valence, explanation)

------------------------------------------------------------------------------


(from gem wrong-0.6.2)
=== Implementation from Wrong::FailureMessage::Formatter
------------------------------------------------------------------------------
  new(predicate)

------------------------------------------------------------------------------


(from gem wrong-0.6.2)
=== Implementation from Wrong::StringComparison
------------------------------------------------------------------------------
  new(first, second)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::Base64
------------------------------------------------------------------------------
  new(str, state = :dec)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::BasicServer
------------------------------------------------------------------------------
  new(class_delim=".")

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::CGIServer
------------------------------------------------------------------------------
  new(*a)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::Client
------------------------------------------------------------------------------
  new(host=nil, path=nil, port=nil, proxy_host=nil, proxy_port=nil, user=nil, password=nil, use_ssl=nil, timeout=nil)

------------------------------------------------------------------------------

Constructors
-------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::Client::Proxy
------------------------------------------------------------------------------
  new(server, prefix, args=[], meth=:call, delim=".")

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::Create
------------------------------------------------------------------------------
  new(xml_writer = nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::DateTime
------------------------------------------------------------------------------
  new(year, month, day, hour, min, sec)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::FaultException
------------------------------------------------------------------------------
  new(faultCode, faultString)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::Marshal
------------------------------------------------------------------------------
  new( parser = nil, writer = nil )

------------------------------------------------------------------------------

instance methods ----------------------------


(from ruby site)
=== Implementation from XMLRPC::ModRubyServer
------------------------------------------------------------------------------
  new(*a)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::Server
------------------------------------------------------------------------------
  new(port=8080, host="127.0.0.1", maxConnections=4, stdlog=$stdout, audit=true, debug=true, *a)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::Service::BasicInterface
------------------------------------------------------------------------------
  new(prefix)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::Service::Interface
------------------------------------------------------------------------------
  new(prefix, &p)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::Service::PublicInstanceMethodsInterface
------------------------------------------------------------------------------
  new(prefix)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::WEBrickServlet
------------------------------------------------------------------------------
  new(*a)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::XMLParser::NQXMLTreeParser
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::XMLParser::NQXMLStreamParser
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::XMLParser::NQXMLTreeParser
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::XMLParser::REXMLStreamParser
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::XMLParser::StreamParserMixin
------------------------------------------------------------------------------
  new(*a)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::XMLParser::XMLTreeParser
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::XMLParser::XMLScanStreamParser
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::XMLParser::XMLStreamParser
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::XMLParser::XMLTreeParser
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMLRPC::XMLWriter::XMLParser
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMP
------------------------------------------------------------------------------
  new(bind = nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from XMP::StringInputMethod
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem xpath-1.0.0)
=== Implementation from XPath::Expression
------------------------------------------------------------------------------
  new(expression, *arguments)

------------------------------------------------------------------------------


(from gem xpath-1.0.0)
=== Implementation from XPath::Literal
------------------------------------------------------------------------------
  new(value)

------------------------------------------------------------------------------


(from gem xpath-1.0.0)
=== Implementation from XPath::Union
------------------------------------------------------------------------------
  new(*expressions)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::CodeGen::ClassDef
------------------------------------------------------------------------------
  new(name, baseclass = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::CodeGen::MethodDef
------------------------------------------------------------------------------
  new(name, *params) { || ... }

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::CodeGen::ModuleDef
------------------------------------------------------------------------------
  new(name)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::Mapping::Mapper
------------------------------------------------------------------------------
  new(registry)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::NS
------------------------------------------------------------------------------
  new(tag2ns = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::NS::Assigner
------------------------------------------------------------------------------
  new(known_tag)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::NSDBase
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::NamedElements
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::QName
------------------------------------------------------------------------------
  new(namespace = nil, name = nil)

------------------------------------------------------------------------------


(from gem nokogiri-1.5.5)
=== Implementation from XSD::XMLParser::Nokogiri
------------------------------------------------------------------------------
  new(host, opt = {})

------------------------------------------------------------------------------

Create a new XSD parser with <tt>host</tt> and <tt>opt</tt>


(from gem soap4r-1.5.8)
=== Implementation from XSD::XMLParser::Parser
------------------------------------------------------------------------------
  new(host, opt = {})

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDAnySimpleType
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDAnyURI
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDBase64Binary
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------

String in Ruby could be a binary.


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDBoolean
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDByte
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDDate
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDDateTime
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDDecimal
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDDouble
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDDuration
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDENTITIES
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDENTITY
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDFloat
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDGDay
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDGMonth
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDGMonthDay
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDGYear
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDGYearMonth
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDHexBinary
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------

String in Ruby could be a binary.


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDID
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDIDREF
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDIDREFS
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDInt
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDInteger
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDLanguage
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDLong
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDNCName
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDNMTOKEN
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDNMTOKENS
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDName
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDNegativeInteger
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDNil
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDNonNegativeInteger
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDNonPositiveInteger
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDNormalizedString
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDPositiveInteger
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDQName
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDShort
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDString
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDTime
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDToken
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDUnsignedByte
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDUnsignedInt
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDUnsignedLong
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from gem soap4r-1.5.8)
=== Implementation from XSD::XSDUnsignedShort
------------------------------------------------------------------------------
  new(value = nil)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from YAML::Store
------------------------------------------------------------------------------
  initialize( file_name, yaml_opts = {} )

------------------------------------------------------------------------------

Creates a new YAML::Store object, which will store data in <tt>file_name</tt>.
If the file does not already exist, it will be created.

Options passed in through <tt>yaml_opts</tt> will be used when converting the
store to YAML via Hash#to_yaml().


(from gem yieldmanager-0.9.2)
=== Implementation from Yieldmanager::Client
------------------------------------------------------------------------------
  new(options = nil)

------------------------------------------------------------------------------

Creates interface object.

Options:
* :user (required) - Yieldmanager user
* :pass (required) - Yieldmanager pass
* :env (optional) - Yieldmanager environment "prod" or "test" (defaults to
  prod)


(from gem yieldmanager-0.9.2)
=== Implementation from Yieldmanager::Report
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem yieldmanager-0.9.2)
=== Implementation from Yieldmanager::Report::ReportRow
------------------------------------------------------------------------------
  new(report)

------------------------------------------------------------------------------


(from gem ZenTest-4.7.0)
=== Implementation from ZenTest
------------------------------------------------------------------------------
  new()

------------------------------------------------------------------------------


(from gem rubyzip-0.9.9)
=== Implementation from Zip::ZipEntry
------------------------------------------------------------------------------
  new(zipfile = "", name = "", comment = "", extra = "", compressed_size = 0, crc = 0, compression_method = ZipEntry::DEFLATED, size = 0, time = DOSTime.now)

------------------------------------------------------------------------------


(from gem rubyzip-0.9.9)
=== Implementation from Zip::ZipExtraField
------------------------------------------------------------------------------
  new(binstr = nil)

------------------------------------------------------------------------------

start main of ZipExtraField < Hash


(from gem rubyzip-0.9.9)
=== Implementation from Zip::ZipExtraField::IUnix
------------------------------------------------------------------------------
  new(binstr = nil)

------------------------------------------------------------------------------


(from gem rubyzip-0.9.9)
=== Implementation from Zip::ZipExtraField::UniversalTime
------------------------------------------------------------------------------
  new(binstr = nil)

------------------------------------------------------------------------------


(from gem rubyzip-0.9.9)
=== Implementation from Zip::ZipFile
------------------------------------------------------------------------------
  new(fileName, create = nil, buffer = false)

------------------------------------------------------------------------------

Opens a zip archive. Pass true as the second parameter to create a new archive
if it doesn't exist already.


(from gem rubyzip-0.9.9)
=== Implementation from Zip::ZipFileSystem::ZipFsDir
------------------------------------------------------------------------------
  new(mappedZip)

------------------------------------------------------------------------------


(from gem rubyzip-0.9.9)
=== Implementation from Zip::ZipFileSystem::ZipFsDir
------------------------------------------------------------------------------
  new(aDirectoryName)

------------------------------------------------------------------------------


(from gem rubyzip-0.9.9)
=== Implementation from Zip::ZipFileSystem::ZipFsFile
------------------------------------------------------------------------------
  new(mappedZip)

------------------------------------------------------------------------------


(from gem rubyzip-0.9.9)
=== Implementation from Zip::ZipFileSystem::ZipFsFile
------------------------------------------------------------------------------
  new(fileName, openMode = "r")

------------------------------------------------------------------------------


(from gem rubyzip-0.9.9)
=== Implementation from Zip::ZipFileSystem::ZipFsFile::ZipFsStat
------------------------------------------------------------------------------
  new(zipFsFile, entryName)

------------------------------------------------------------------------------


(from gem rubyzip-0.9.9)
=== Implementation from Zip::ZipInputStream
------------------------------------------------------------------------------
  new(filename, offset = 0, io = nil)

------------------------------------------------------------------------------

Opens the indicated zip file. An exception is thrown if the specified offset
in the specified filename is not a local zip entry header.


(from gem rubyzip-0.9.9)
=== Implementation from Zip::ZipOutputStream
------------------------------------------------------------------------------
  new(fileName, stream=false)

------------------------------------------------------------------------------

Opens the indicated zip file. If a file with that name already exists it will
be overwritten.


(from gem rubyzip-0.9.9)
=== Implementation from Zip::ZipStreamableDirectory
------------------------------------------------------------------------------
  new(zipfile, entry, srcPath = nil, permissionInt = nil)

------------------------------------------------------------------------------


(from gem rubyzip-0.9.9)
=== Implementation from Zip::ZipStreamableStream
------------------------------------------------------------------------------
  new(entry)

------------------------------------------------------------------------------


(from ruby site)
=== Implementation from Zlib::Deflate
------------------------------------------------------------------------------
  Zlib::Deflate.new(level=nil, windowBits=nil, memlevel=nil, strategy=nil)

------------------------------------------------------------------------------

== Arguments

<tt>level</tt>:
  An Integer compression level between BEST_SPEED and BEST_COMPRESSION

<tt>windowBits</tt>:
  An Integer for the windowBits size. Should be in the range 8..15, larger
  values of this parameter result in better at the expense of memory usage.

<tt>memlevel</tt>:
  Specifies how much memory should be allocated for the internal compression
  state. Between DEF_MEM_LEVEL and MAX_MEM_LEVEL

<tt>strategy</tt>:
  A parameter to tune the compression algorithm. Use the DEFAULT_STRATEGY for
  normal data, FILTERED for data produced by a filter (or predictor),
  HUFFMAN_ONLY to force Huffman encoding only (no string match).


== Description

Creates a new deflate stream for compression. See zlib.h for details of each
argument. If an argument is nil, the default value of that argument is used.

== examples

=== basic

  f = File.new("compressed.file","w+")
  #=> #<File:compressed.file>
  f << Zlib::Deflate.new().deflate(File.read("big.file"))
  #=> #<File:compressed.file>
  f.close
  #=> nil

=== a little more robust

  compressed_file = File.open("compressed.file", "w+")
  #=> #<File:compressed.file>
  zd = Zlib::Deflate.new(Zlib::BEST_COMPRESSION, 15, Zlib::MAX_MEM_LEVEL, Zlib::HUFFMAN_ONLY)
  #=> #<Zlib::Deflate:0x000000008610a0>
  compressed_file << zd.deflate(File.read("big.file"))
  #=> "\xD4z\xC6\xDE\b\xA1K\x1Ej\x8A ..."
  compressed_file.close
  #=> nil
  zd.close
  #=> nil

(while this example will work, for best optimization the flags need to be
reviewed for your specific function)


(from ruby site)
=== Implementation from Zlib::GzipReader
------------------------------------------------------------------------------
  Zlib::GzipReader.new(io)

------------------------------------------------------------------------------

Creates a GzipReader object associated with <tt>io</tt>. The GzipReader object
reads gzipped data from <tt>io</tt>, and parses/decompresses them.  At least,
<tt>io</tt> must have a <tt>read</tt> method that behaves same as the
<tt>read</tt> method in IO class.

If the gzip file header is incorrect, raises an Zlib::GzipFile::Error
exception.


(from ruby site)
=== Implementation from Zlib::GzipWriter
------------------------------------------------------------------------------
  Zlib::GzipWriter.new(io, level, strategy)

------------------------------------------------------------------------------

Creates a GzipWriter object associated with <tt>io</tt>. <tt>level</tt> and
<tt>strategy</tt> should be the same as the arguments of Zlib::Deflate.new. 
The GzipWriter object writes gzipped data to <tt>io</tt>.  At least,
<tt>io</tt> must respond to the <tt>write</tt> method that behaves same as
write method in IO class.


(from ruby site)
=== Implementation from Zlib::Inflate
------------------------------------------------------------------------------
  Zlib::Inflate.new(window_bits)

------------------------------------------------------------------------------

== Arguments

<tt>windowBits</tt>:
  An Integer for the windowBits size. Should be in the range 8..15, larger
  values of this parameter result in better at the expense of memory usage.


== Description

Creates a new inflate stream for decompression. See zlib.h for details of the
argument.  If <tt>window_bits</tt> is <tt>nil</tt>, the default value is used.

== Example

  cf = File.open("compressed.file")
  ucf = File.open("uncompressed.file", "w+")
  zi = Zlib::Inflate.new(Zlib::MAX_WBITS)

  ucf << zi.inflate(cf.read)

  ucf.close
  zi.close
  cf.close

or

  File.open("compressed.file") {|cf|
    zi = Zlib::Inflate.new
    File.open("uncompressed.file", "w+") {|ucf|
      ucf << zi.inflate(cf.read)
    }
    zi.close
  }


