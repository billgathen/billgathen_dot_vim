!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
<C-W><C-F>	vim-ruby/ftplugin/ruby.vim	/^    nnoremap <silent> <buffer> <C-W><C-F> :<C-U>exe <SID>gf(v:count1,"\\<Lt>C-W>\\<Lt>C-F>",'split')<CR>$/;"	m
<C-W><C-]>	vim-ruby/ftplugin/ruby.vim	/^    nnoremap <silent> <buffer> <C-W><C-]>  :<C-U>exe v:count1."stag <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
<C-W>]	vim-ruby/ftplugin/ruby.vim	/^    nnoremap <silent> <buffer> <C-W>]      :<C-U>exe v:count1."stag <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
<C-W>f	vim-ruby/ftplugin/ruby.vim	/^    nnoremap <silent> <buffer> <C-W>f     :<C-U>exe <SID>gf(v:count1,"\\<Lt>C-W>f",'split')<CR>$/;"	m
<C-W>g<C-]>	vim-ruby/ftplugin/ruby.vim	/^    nnoremap <silent> <buffer> <C-W>g<C-]> :<C-U>exe        "stjump <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
<C-W>g]	vim-ruby/ftplugin/ruby.vim	/^    nnoremap <silent> <buffer> <C-W>g]     :<C-U>exe      "stselect <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
<C-W>gf	vim-ruby/ftplugin/ruby.vim	/^    nnoremap <silent> <buffer> <C-W>gf    :<C-U>exe <SID>gf(v:count1,"\\<Lt>C-W>gf",'tabedit')<CR>$/;"	m
<C-W>g}	vim-ruby/ftplugin/ruby.vim	/^    nnoremap <silent> <buffer> <C-W>g}     :<C-U>exe        "ptjump <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
<C-W>}	vim-ruby/ftplugin/ruby.vim	/^    nnoremap <silent> <buffer> <C-W>}      :<C-U>exe          "ptag <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
<C-]>	vim-ruby/ftplugin/ruby.vim	/^    nnoremap <silent> <buffer> <C-]>       :<C-U>exe  v:count1."tag <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
<Plug>Commentary	vim-commentary/plugin/commentary.vim	/^nnoremap <silent> <Plug>Commentary     :<C-U>set opfunc=<SID>go<CR>g@$/;"	m
<Plug>CommentaryLine	vim-commentary/plugin/commentary.vim	/^nnoremap <silent> <Plug>CommentaryLine :<C-U>set opfunc=<SID>go<Bar>exe 'norm! 'v:count1.'g@_'<CR>$/;"	m
<Plug>CommentaryUndo	vim-commentary/plugin/commentary.vim	/^nnoremap <silent> <Plug>CommentaryUndo :<C-U>call <SID>undo()<CR>$/;"	m
<Plug>ToggleBackground	vim-colors-solarized/autoload/togglebg.vim	/^inoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>a$/;"	m
<Plug>ToggleBackground	vim-colors-solarized/autoload/togglebg.vim	/^nnoremap <unique> <script> <Plug>ToggleBackground <SID>TogBG$/;"	m
<Plug>ToggleBackground	vim-colors-solarized/autoload/togglebg.vim	/^vnoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>gv$/;"	m
<SID>TogBG	vim-colors-solarized/autoload/togglebg.vim	/^noremap <SID>TogBG  :call <SID>TogBG()<CR>$/;"	m
<c-r><tab>	snipmate.vim/after/plugin/snipMate.vim	/^ino <silent> <c-r><tab> <c-r>=ShowAvailableSnips()<cr>$/;"	m
<s-tab>	snipmate.vim/after/plugin/snipMate.vim	/^ino <silent> <s-tab> <c-r>=BackwardsSnippet()<cr>$/;"	m
<tab>	snipmate.vim/after/plugin/snipMate.vim	/^ino <silent> <tab> <c-r>=TriggerSnippet()<cr>$/;"	m
ARCHIVE	vim-coffee-script/Makefile	/^ARCHIVE = vim-coffee-script-$(VERSION).zip$/;"	m
ARCHIVE_DIRS	vim-coffee-script/Makefile	/^ARCHIVE_DIRS = after compiler doc ftdetect ftplugin indent syntax$/;"	m
BackupDir	vim-ruby/bin/vim-ruby-install.rb	/^  class BackupDir$/;"	c	class:VimRubyInstaller
BackwardsSnippet	snipmate.vim/plugin/snipMate.vim	/^fun! BackwardsSnippet()$/;"	f
Bar	vim-ruby/etc/examples/indent/end_constructs.rb	/^  class Bar$/;"	c	class:Foo
BuildTabStops	snipmate.vim/autoload/snipMate.vim	/^fun s:BuildTabStops(snip, lnum, col, indent)$/;"	f
ChooseSnippet	snipmate.vim/plugin/snipMate.vim	/^fun s:ChooseSnippet(scope, trigger)$/;"	f
Close	snipmate.vim/ftplugin/html_snip_helper.vim	/^fun! Close()$/;"	f
CoffeeCompile	vim-coffee-script/ftplugin/coffee.vim	/^\\        CoffeeCompile call s:CoffeeCompile(<line1>, <line2>, <q-args>)$/;"	c
CoffeeCompile	vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompile(startline, endline, args)$/;"	f
CoffeeCompileClose	vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompileClose()$/;"	f
CoffeeCompileComplete	vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompileComplete(arg, cmdline, cursor)$/;"	f
CoffeeCompileResetVars	vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompileResetVars()$/;"	f
CoffeeCompileRestorePos	vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompileRestorePos()$/;"	f
CoffeeCompileSavePos	vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompileSavePos()$/;"	f
CoffeeCompileUpdate	vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompileUpdate(startline, endline)$/;"	f
CoffeeCompileWatchUpdate	vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompileWatchUpdate()$/;"	f
CoffeeMake	vim-coffee-script/compiler/coffee.vim	/^command! -bang -bar -nargs=* CoffeeMake make<bang> <args>$/;"	c
CoffeeRun	vim-coffee-script/ftplugin/coffee.vim	/^command! -range=% -bar CoffeeRun <line1>,<line2>:w !coffee -s$/;"	c
CoffeeUpdateMakePrg	vim-coffee-script/compiler/coffee.vim	/^augroup CoffeeUpdateMakePrg$/;"	a
CompilerSet	vim-ruby/compiler/eruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim-ruby/compiler/rspec.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim-ruby/compiler/ruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim-ruby/compiler/rubyunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
Count	snipmate.vim/autoload/snipMate.vim	/^fun s:Count(haystack, needle)$/;"	f
DefRuby	vim-ruby/autoload/rubycomplete.vim	/^function! s:DefRuby()$/;"	f
DefineSnips	snipmate.vim/plugin/snipMate.vim	/^fun s:DefineSnips(dir, aliasft, realft)$/;"	f
Env	vim-ruby/bin/vim-ruby-install.rb	/^class Env$/;"	c
ErrMsg	vim-ruby/autoload/rubycomplete.vim	/^function! s:ErrMsg(msg)$/;"	f
ExtractSnips	snipmate.vim/plugin/snipMate.vim	/^fun! ExtractSnips(dir, ft)$/;"	f
ExtractSnipsFile	snipmate.vim/plugin/snipMate.vim	/^fun! ExtractSnipsFile(file, ft)$/;"	f
FileWriter	vim-ruby/bin/vim-ruby-install.rb	/^class FileWriter$/;"	c
Filename	snipmate.vim/autoload/snipMate.vim	/^fun! Filename(...)$/;"	f
FindComment	vim-coffee-script/indent/coffee.vim	/^function! s:FindComment(linenum)$/;"	f
FindRightmostOpenBracket	vim-ruby/indent/ruby.vim	/^function s:FindRightmostOpenBracket(lnum)$/;"	f
Foo	vim-ruby/etc/examples/indent/end_constructs.rb	/^module Foo$/;"	m
Foo	vim-ruby/etc/examples/indent/nested_hashes.rb	/^class Foo$/;"	c
GetBufferRubyClass	vim-ruby/autoload/rubycomplete.vim	/^function! s:GetBufferRubyClass(name, ...)$/;"	f
GetBufferRubyEntity	vim-ruby/autoload/rubycomplete.vim	/^function! s:GetBufferRubyEntity( name, type, ... )$/;"	f
GetBufferRubyModule	vim-ruby/autoload/rubycomplete.vim	/^function! s:GetBufferRubyModule(name, ...)$/;"	f
GetBufferRubySingletonMethods	vim-ruby/autoload/rubycomplete.vim	/^function! s:GetBufferRubySingletonMethods(name)$/;"	f
GetCoffeeIndent	vim-coffee-script/indent/coffee.vim	/^function! GetCoffeeIndent(curlinenum)$/;"	f
GetCoffeeIndent	vim-coffee-script/indent/coffee.vim	/^function! s:GetCoffeeIndent(curlinenum)$/;"	f
GetErubyIndent	vim-ruby/indent/eruby.vim	/^function! GetErubyIndent(...)$/;"	f
GetMSL	vim-ruby/indent/ruby.vim	/^function s:GetMSL(lnum)$/;"	f
GetMakePrg	vim-coffee-script/compiler/coffee.vim	/^function! s:GetMakePrg()$/;"	f
GetMatch	vim-coffee-script/indent/coffee.vim	/^function! s:GetMatch(curline)$/;"	f
GetPrevNormalLine	vim-coffee-script/indent/coffee.vim	/^function! s:GetPrevNormalLine(startlinenum)$/;"	f
GetRubyIndent	vim-ruby/indent/ruby.vim	/^function GetRubyIndent(...)$/;"	f
GetRubyVarType	vim-ruby/autoload/rubycomplete.vim	/^function! s:GetRubyVarType(v)$/;"	f
GetSnippet	snipmate.vim/plugin/snipMate.vim	/^fun s:GetSnippet(word, scope)$/;"	f
GetSnippets	snipmate.vim/plugin/snipMate.vim	/^fun! GetSnippets(dir, filetypes)$/;"	f
GetTrimmedLine	vim-coffee-script/indent/coffee.vim	/^function! s:GetTrimmedLine(linenum)$/;"	f
IsComment	vim-coffee-script/indent/coffee.vim	/^function! s:IsComment(linenum, col)$/;"	f
IsCommentLine	vim-coffee-script/indent/coffee.vim	/^function! s:IsCommentLine(linenum)$/;"	f
IsCommentOrString	vim-coffee-script/indent/coffee.vim	/^function! s:IsCommentOrString(linenum, col)$/;"	f
IsInClassDef	vim-ruby/autoload/rubycomplete.vim	/^function! s:IsInClassDef()$/;"	f
IsInString	vim-ruby/indent/ruby.vim	/^function s:IsInString(lnum, col)$/;"	f
IsInStringOrComment	vim-ruby/indent/ruby.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
IsInStringOrDocumentation	vim-ruby/indent/ruby.vim	/^function s:IsInStringOrDocumentation(lnum, col)$/;"	f
IsPosInClassDef	vim-ruby/autoload/rubycomplete.vim	/^function! s:IsPosInClassDef(pos)$/;"	f
IsString	vim-coffee-script/indent/coffee.vim	/^function! s:IsString(linenum, col)$/;"	f
MakeSnip	snipmate.vim/plugin/snipMate.vim	/^fun! MakeSnip(scope, trigger, content, ...)$/;"	f
Match	vim-ruby/indent/ruby.vim	/^function s:Match(lnum, regex)$/;"	f
MatchLast	vim-ruby/indent/ruby.vim	/^function s:MatchLast(lnum, regex)$/;"	f
MaxLookback	vim-coffee-script/indent/coffee.vim	/^function! s:MaxLookback(startlinenum)$/;"	f
PrevNonBlankNonString	vim-ruby/indent/ruby.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
ProcessFile	snipmate.vim/plugin/snipMate.vim	/^fun s:ProcessFile(file, ft, ...)$/;"	f
ProcessSnippet	snipmate.vim/autoload/snipMate.vim	/^fun s:ProcessSnippet(snip)$/;"	f
REF	vim-coffee-script/Makefile	/^REF = HEAD$/;"	m
ReloadAllSnippets	snipmate.vim/plugin/snipMate.vim	/^fun! ReloadAllSnippets()$/;"	f
ReloadSnippets	snipmate.vim/plugin/snipMate.vim	/^fun! ReloadSnippets(ft)$/;"	f
RemoveSnippet	snipmate.vim/autoload/snipMate.vim	/^fun s:RemoveSnippet()$/;"	f
ResetAllSnippets	snipmate.vim/plugin/snipMate.vim	/^fun! ResetAllSnippets()$/;"	f
ResetSnippets	snipmate.vim/plugin/snipMate.vim	/^fun! ResetSnippets(ft)$/;"	f
RubyBalloonexpr	vim-ruby/ftplugin/ruby.vim	/^function! RubyBalloonexpr()$/;"	f
RubyCursorIdentifier	vim-ruby/ftplugin/ruby.vim	/^function! RubyCursorIdentifier()$/;"	f
SearchPair	vim-coffee-script/indent/coffee.vim	/^function! s:SearchPair(start, end)$/;"	f
SelectWord	snipmate.vim/autoload/snipMate.vim	/^fun s:SelectWord()$/;"	f
SetMakePrg	vim-coffee-script/compiler/coffee.vim	/^function! s:SetMakePrg()$/;"	f
SetOption	vim-colors-solarized/colors/solarized.vim	/^function! s:SetOption(name,default)$/;"	f
ShouldSkip	vim-coffee-script/indent/coffee.vim	/^function! s:ShouldSkip(startlinenum, linenum, col)$/;"	f
ShowAvailableSnips	snipmate.vim/plugin/snipMate.vim	/^fun! ShowAvailableSnips()$/;"	f
SkipExpr	vim-coffee-script/indent/coffee.vim	/^function! s:SkipExpr(startlinenum)$/;"	f
SmartSearch	vim-coffee-script/indent/coffee.vim	/^function! s:SmartSearch(linenum, regex)$/;"	f
SolarizedHiTrail	vim-colors-solarized/colors/solarized.vim	/^augroup SolarizedHiTrail$/;"	a
SolarizedHiTrail	vim-colors-solarized/colors/solarized.vim	/^function! s:SolarizedHiTrail()$/;"	f
SolarizedMenu	vim-colors-solarized/colors/solarized.vim	/^function! SolarizedMenu()$/;"	f
SolarizedOptions	vim-colors-solarized/colors/solarized.vim	/^    command SolarizedOptions :call s:SolarizedOptions()$/;"	c
SolarizedOptions	vim-colors-solarized/colors/solarized.vim	/^function! s:SolarizedOptions()$/;"	f
SyntaxName	vim-coffee-script/indent/coffee.vim	/^function! s:SyntaxName(linenum, col)$/;"	f
TargetDirectory	vim-ruby/bin/vim-ruby-install.rb	/^class TargetDirectory$/;"	c
TargetDirectory	vim-ruby/bin/vim-ruby-install.rb	/^class TargetDirectory::Finder$/;"	c
TogBG	vim-colors-solarized/autoload/togglebg.vim	/^function! s:TogBG()$/;"	f
ToggleBG	vim-colors-solarized/autoload/togglebg.vim	/^    command ToggleBG :call s:TogBG()$/;"	c
ToggleBackground	vim-colors-solarized/autoload/togglebg.vim	/^function! ToggleBackground()$/;"	f
ToolBar.togglebg	vim-colors-solarized/autoload/togglebg.vim	/^inoremenu <script> ToolBar.togglebg <ESC><SID>TogBG<ESC>a$/;"	m
ToolBar.togglebg	vim-colors-solarized/autoload/togglebg.vim	/^nnoremenu <script> ToolBar.togglebg <SID>TogBG$/;"	m
ToolBar.togglebg	vim-colors-solarized/autoload/togglebg.vim	/^vnoremenu <script> ToolBar.togglebg <ESC><SID>TogBG<ESC>gv$/;"	m
TriggerSnippet	snipmate.vim/plugin/snipMate.vim	/^fun! TriggerSnippet()$/;"	f
UpdateChangedSnip	snipmate.vim/autoload/snipMate.vim	/^fun s:UpdateChangedSnip(entering)$/;"	f
UpdateMakePrg	vim-coffee-script/compiler/coffee.vim	/^  function! s:UpdateMakePrg()$/;"	f
UpdatePlaceholderTabStops	snipmate.vim/autoload/snipMate.vim	/^fun s:UpdatePlaceholderTabStops()$/;"	f
UpdateTabStops	snipmate.vim/autoload/snipMate.vim	/^fun s:UpdateTabStops()$/;"	f
UpdateVars	snipmate.vim/autoload/snipMate.vim	/^fun s:UpdateVars()$/;"	f
VERSION	vim-coffee-script/Makefile	/^VERSION = $(shell git describe --always $(REF))$/;"	m
VimRubyInstaller	vim-ruby/bin/vim-ruby-install.rb	/^class VimRubyInstaller$/;"	c
Window.Toggle\	vim-colors-solarized/autoload/togglebg.vim	/^inoremenu <script> Window.Toggle\\ Background <ESC><SID>TogBG<ESC>a$/;"	m
Window.Toggle\	vim-colors-solarized/autoload/togglebg.vim	/^nnoremenu <script> Window.Toggle\\ Background <SID>TogBG$/;"	m
Window.Toggle\	vim-colors-solarized/autoload/togglebg.vim	/^vnoremenu <script> Window.Toggle\\ Background <ESC><SID>TogBG<ESC>gv$/;"	m
X	vim-ruby/etc/examples/indent/blocks.rb	/^module X$/;"	m
[M	vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [M :<C-U>call <SID>searchsyn('\\<end\\>','rubyDefine','b','n')<CR>$/;"	m
[[	vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [[ :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>','rubyModule\\<Bar>rubyClass','b','n')<CR>$/;"	m
[]	vim-ruby/bin/vim-ruby-install.rb	/^    def [](path)$/;"	f	class:VimRubyInstaller.BackupDir
[]	vim-ruby/bin/vim-ruby-install.rb	/^  def [](path)$/;"	f	class:TargetDirectory
[]	vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [] :<C-U>call <SID>searchsyn('\\<end\\>','rubyModule\\<Bar>rubyClass','b','n')<CR>$/;"	m
[m	vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [m :<C-U>call <SID>searchsyn('\\<def\\>','rubyDefine','b','n')<CR>$/;"	m
\\	vim-commentary/plugin/commentary.vim	/^  nmap \\\\  <Plug>Commentary$/;"	m
\\\	vim-commentary/plugin/commentary.vim	/^  nmap \\\\\\ <Plug>CommentaryLine$/;"	m
\\u	vim-commentary/plugin/commentary.vim	/^  nmap \\\\u <Plug>CommentaryUndo$/;"	m
]M	vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]M :<C-U>call <SID>searchsyn('\\<end\\>','rubyDefine','','n')<CR>$/;"	m
][	vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ][ :<C-U>call <SID>searchsyn('\\<end\\>','rubyModule\\<Bar>rubyClass','','n')<CR>$/;"	m
]]	vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]] :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>','rubyModule\\<Bar>rubyClass','','n')<CR>$/;"	m
]m	vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]m :<C-U>call <SID>searchsyn('\\<def\\>','rubyDefine','','n')<CR>$/;"	m
_ensure_directory_exists	vim-ruby/bin/vim-ruby-install.rb	/^  def _ensure_directory_exists(path)$/;"	f	class:FileWriter
_potential_directories	vim-ruby/bin/vim-ruby-install.rb	/^  def _potential_directories$/;"	f	class:TargetDirectory
_same_contents?	vim-ruby/bin/vim-ruby-install.rb	/^  def _same_contents?(p1, p2)$/;"	f	class:VimRubyInstaller
_valid_vim_ruby_dir	vim-ruby/bin/vim-ruby-install.rb	/^  def Env._valid_vim_ruby_dir(dir)$/;"	F	class:Env
_vim_system_dir	vim-ruby/bin/vim-ruby-install.rb	/^  def _vim_system_dir$/;"	f	class:TargetDirectory
_vim_user_dir	vim-ruby/bin/vim-ruby-install.rb	/^  def _vim_user_dir$/;"	f	class:TargetDirectory
aM	vim-ruby/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> aM :<C-U>call <SID>wrap_a('[[','][')<CR>$/;"	m
am	vim-ruby/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> am :<C-U>call <SID>wrap_a('[m',']M')<CR>$/;"	m
ask_user	vim-ruby/bin/vim-ruby-install.rb	/^  def Env.ask_user(message)$/;"	F	class:Env
b:browsefilter	vim-ruby/ftplugin/eruby.vim	/^  let b:browsefilter="eRuby Files (*.erb, *.rhtml)\\t*.erb;*.rhtml\\n" . s:browsefilter$/;"	v
b:browsefilter	vim-ruby/ftplugin/ruby.vim	/^  let b:browsefilter = "Ruby Source Files (*.rb)\\t*.rb\\n" .$/;"	v
b:current_syntax	vim-coffee-script/syntax/coffee.vim	/^  let b:current_syntax = 'coffee'$/;"	v
b:current_syntax	vim-coffee-script/syntax/eco.vim	/^let b:current_syntax = 'eco'$/;"	v
b:current_syntax	vim-ruby/syntax/eruby.vim	/^let b:current_syntax = 'eruby'$/;"	v
b:current_syntax	vim-ruby/syntax/ruby.vim	/^let b:current_syntax = "ruby"$/;"	v
b:did_ftplugin	vim-coffee-script/ftplugin/coffee.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim-ruby/ftplugin/eruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim-ruby/ftplugin/ruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_indent	vim-coffee-script/indent/coffee.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim-ruby/indent/eruby.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim-ruby/indent/ruby.vim	/^let b:did_indent = 1$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^      let b:eco_subtype = b:current_syntax$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^      let b:eco_subtype = g:eco_default_subtype$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = 'html'$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = 'javascript'$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = 'ruby'$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = 'text'$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = 'yaml'$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eco\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^  let b:eco_subtype = matchstr(s:lines,'eco_subtype=\\zs\\w\\+')$/;"	v
b:eruby_nest_level	vim-ruby/syntax/eruby.vim	/^  let b:eruby_nest_level = 1$/;"	v
b:eruby_nest_level	vim-ruby/syntax/eruby.vim	/^  let b:eruby_nest_level = strlen(substitute(substitute(substitute(expand("%:t"),'@','','g'),'\\c\\.\\%(erb\\|rhtml\\)\\>','@','g'),'[^@]','','g'))$/;"	v
b:eruby_subtype	vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubis\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eruby_subtype	vim-ruby/ftplugin/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
b:eruby_subtype	vim-ruby/ftplugin/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype	vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubis\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eruby_subtype	vim-ruby/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
b:eruby_subtype	vim-ruby/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype_indentexpr	vim-ruby/indent/eruby.vim	/^let b:eruby_subtype_indentexpr = &l:indentexpr$/;"	v
b:match_ignorecase	vim-ruby/ftplugin/ruby.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_skip	vim-ruby/ftplugin/ruby.vim	/^  let b:match_skip =$/;"	v
b:match_words	vim-ruby/ftplugin/eruby.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	vim-ruby/ftplugin/ruby.vim	/^  let b:match_words =$/;"	v
b:ruby_no_expensive	vim-ruby/syntax/ruby.vim	/^  let b:ruby_no_expensive = 1$/;"	v
b:undo_ftplugin	vim-ruby/ftplugin/eruby.vim	/^let b:undo_ftplugin = "setl cms< "$/;"	v
b:undo_ftplugin	vim-ruby/ftplugin/ruby.vim	/^    let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	vim-ruby/ftplugin/ruby.vim	/^  let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	vim-ruby/ftplugin/ruby.vim	/^let b:undo_ftplugin = "setl fo< inc< inex< sua< def< com< cms< path< tags< kp<"$/;"	v
backup	vim-ruby/bin/vim-ruby-install.rb	/^    def backup(basedir, path)$/;"	f	class:VimRubyInstaller.BackupDir
coffee_make_options	vim-coffee-script/compiler/coffee.vim	/^  let coffee_make_options = ""$/;"	v
colors_name	vim-colors-solarized/colors/solarized.vim	/^let colors_name = "solarized"$/;"	v
contents	vim-ruby/bin/vim-ruby-install.rb	/^    def contents$/;"	f	class:VimRubyInstaller.BackupDir
copy	vim-ruby/bin/vim-ruby-install.rb	/^  def copy(path)$/;"	f	class:TargetDirectory
copy	vim-ruby/bin/vim-ruby-install.rb	/^  def copy(source_path, target_path)$/;"	f	class:FileWriter
current_compiler	vim-coffee-script/compiler/coffee.vim	/^let current_compiler = 'coffee'$/;"	v
current_compiler	vim-ruby/compiler/eruby.vim	/^let current_compiler = "eruby"$/;"	v
current_compiler	vim-ruby/compiler/rspec.vim	/^let current_compiler = "rspec"$/;"	v
current_compiler	vim-ruby/compiler/ruby.vim	/^let current_compiler = "ruby"$/;"	v
current_compiler	vim-ruby/compiler/rubyunit.vim	/^let current_compiler = "rubyunit"$/;"	v
determine_home_dir	vim-ruby/bin/vim-ruby-install.rb	/^  def Env.determine_home_dir$/;"	F	class:Env
determine_source_directory	vim-ruby/bin/vim-ruby-install.rb	/^  def Env.determine_source_directory$/;"	F	class:Env
determine_target_os	vim-ruby/bin/vim-ruby-install.rb	/^  def Env.determine_target_os$/;"	F	class:Env
determine_vim_dir	vim-ruby/bin/vim-ruby-install.rb	/^  def Env.determine_vim_dir$/;"	F	class:Env
dprint	vim-ruby/autoload/rubycomplete.vim	/^function! s:dprint(msg)$/;"	f
find_target_directory	vim-ruby/bin/vim-ruby-install.rb	/^  def find_target_directory$/;"	f	class:TargetDirectory
finder	vim-ruby/bin/vim-ruby-install.rb	/^  def self.finder$/;"	F	class:TargetDirectory
foo	vim-ruby/etc/examples/indent/blocks.rb	/^def foo$/;"	f
g:did_ft	snipmate.vim/plugin/snipMate.vim	/^let g:did_ft = {}$/;"	v
g:did_ruby_ftplugin_functions	vim-ruby/ftplugin/ruby.vim	/^let g:did_ruby_ftplugin_functions = 1$/;"	v
g:eco_default_subtype	vim-coffee-script/syntax/eco.vim	/^  let g:eco_default_subtype = "html"$/;"	v
g:eruby_default_subtype	vim-ruby/ftplugin/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:eruby_default_subtype	vim-ruby/syntax/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:loaded_commentary	vim-commentary/plugin/commentary.vim	/^let g:loaded_commentary = 1$/;"	v
g:loaded_togglebg	vim-colors-solarized/autoload/togglebg.vim	/^let g:loaded_togglebg = 1$/;"	v
g:rubycomplete_buffer_loading	vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_buffer_loading = 0$/;"	v
g:rubycomplete_classes_in_global	vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_classes_in_global = 0$/;"	v
g:rubycomplete_include_object	vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_object = 0$/;"	v
g:rubycomplete_include_objectspace	vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_objectspace = 0$/;"	v
g:rubycomplete_rails	vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_rails = 0$/;"	v
g<C-]>	vim-ruby/ftplugin/ruby.vim	/^    nnoremap <silent> <buffer> g<C-]>      :<C-U>exe         "tjump <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
g]	vim-ruby/ftplugin/ruby.vim	/^    nnoremap <silent> <buffer> g]          :<C-U>exe       "tselect <C-R>=RubyCursorIdentifier()<CR>"<CR>$/;"	m
gf	vim-ruby/ftplugin/ruby.vim	/^    nnoremap <silent> <buffer> gf         :<C-U>exe <SID>gf(v:count1,"gf",'edit')<CR>$/;"	m
gf	vim-ruby/ftplugin/ruby.vim	/^function! s:gf(count,map,edit) abort$/;"	f
go	vim-commentary/plugin/commentary.vim	/^function! s:go(type,...) abort$/;"	f
hs_highlight_boolean	vim-colors-solarized/colors/solarized.vim	/^let hs_highlight_boolean=1$/;"	v
hs_highlight_delimiters	vim-colors-solarized/colors/solarized.vim	/^let hs_highlight_delimiters=1$/;"	v
iM	vim-ruby/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> iM :<C-U>call <SID>wrap_i('[[','][')<CR>$/;"	m
im	vim-ruby/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> im :<C-U>call <SID>wrap_i('[m',']M')<CR>$/;"	m
initialize	vim-ruby/bin/vim-ruby-install.rb	/^    def initialize(path)$/;"	f	class:VimRubyInstaller.BackupDir
initialize	vim-ruby/bin/vim-ruby-install.rb	/^  def initialize(directory, writer)$/;"	f	class:TargetDirectory
initialize	vim-ruby/bin/vim-ruby-install.rb	/^  def initialize(ending, file_permissions=0644, directory_permissions=0755)$/;"	f	class:FileWriter
initialize	vim-ruby/bin/vim-ruby-install.rb	/^  def initialize(source, target)$/;"	f	class:VimRubyInstaller
install	vim-ruby/bin/vim-ruby-install.rb	/^  def install$/;"	f	class:VimRubyInstaller
loaded_snips	snipmate.vim/plugin/snipMate.vim	/^let loaded_snips = 1$/;"	v
main_syntax	vim-ruby/syntax/eruby.vim	/^  let main_syntax = 'eruby'$/;"	v
mkpath	vim-ruby/bin/vim-ruby-install.rb	/^  def mkpath(directory)$/;"	f	class:FileWriter
path	vim-ruby/bin/vim-ruby-install.rb	/^    def path$/;"	f	class:VimRubyInstaller.BackupDir
path	vim-ruby/bin/vim-ruby-install.rb	/^  def path$/;"	f	class:TargetDirectory
prefix	vim-ruby/ftplugin/ruby.vim	/^        let prefix = ''$/;"	v
prefix	vim-ruby/ftplugin/ruby.vim	/^        let prefix = 'env PATH='.$PATH.' '$/;"	v
ruby_minlines	vim-ruby/syntax/ruby.vim	/^    let ruby_minlines = 50$/;"	v
rubycomplete#Complete	vim-ruby/autoload/rubycomplete.vim	/^function! rubycomplete#Complete(findstart, base)$/;"	f
rubycomplete#Init	vim-ruby/autoload/rubycomplete.vim	/^function! rubycomplete#Init()$/;"	f
s:COMPOUND_ASSIGNMENT	vim-coffee-script/indent/coffee.vim	/^let s:COMPOUND_ASSIGNMENT = '[:=]\\s*\\%(if\\|unless\\|for\\|while\\|until\\|'$/;"	v
s:CONTINUATION	vim-coffee-script/indent/coffee.vim	/^let s:CONTINUATION = '\\<\\%(is\\|isnt\\|and\\|or\\)\\>$'$/;"	v
s:CONTINUATION_BLOCK	vim-coffee-script/indent/coffee.vim	/^let s:CONTINUATION_BLOCK = '[([{:=]$'$/;"	v
s:DOT_ACCESS	vim-coffee-script/indent/coffee.vim	/^let s:DOT_ACCESS = '^\\.'$/;"	v
s:INDENT_AFTER_KEYWORD	vim-coffee-script/indent/coffee.vim	/^let s:INDENT_AFTER_KEYWORD = '^\\%(if\\|unless\\|else\\|for\\|while\\|until\\|'$/;"	v
s:INDENT_AFTER_OPERATOR	vim-coffee-script/indent/coffee.vim	/^let s:INDENT_AFTER_OPERATOR = '\\%([([{:=]\\|[-=]>\\)$'$/;"	v
s:MAX_LOOKBACK	vim-coffee-script/indent/coffee.vim	/^let s:MAX_LOOKBACK = 50$/;"	v
s:OUTDENT_AFTER	vim-coffee-script/indent/coffee.vim	/^let s:OUTDENT_AFTER = '^\\%(return\\|break\\|continue\\|throw\\)\\>'$/;"	v
s:POSTFIX_CONDITION	vim-coffee-script/indent/coffee.vim	/^let s:POSTFIX_CONDITION = '\\S\\s\\+\\zs\\<\\%(if\\|unless\\)\\>'$/;"	v
s:SINGLE_LINE_ELSE	vim-coffee-script/indent/coffee.vim	/^let s:SINGLE_LINE_ELSE = '^else\\s\\+\\%(\\<\\%(if\\|unless\\)\\>\\)\\@!'$/;"	v
s:SYNTAX_COMMENT	vim-coffee-script/indent/coffee.vim	/^let s:SYNTAX_COMMENT = 'coffee\\%(Comment\\|BlockComment\\|HeregexComment\\)'$/;"	v
s:SYNTAX_STRING	vim-coffee-script/indent/coffee.vim	/^let s:SYNTAX_STRING = 'coffee\\%(String\\|AssignString\\|Embed\\|Regex\\|Heregex\\|'$/;"	v
s:SYNTAX_STRING_COMMENT	vim-coffee-script/indent/coffee.vim	/^let s:SYNTAX_STRING_COMMENT = s:SYNTAX_STRING . '\\|' . s:SYNTAX_COMMENT$/;"	v
s:b	vim-colors-solarized/colors/solarized.vim	/^    let s:b           = ""$/;"	v
s:b	vim-colors-solarized/colors/solarized.vim	/^    let s:b           = ",bold"$/;"	v
s:back	vim-colors-solarized/colors/solarized.vim	/^        let s:back    = s:base03$/;"	v
s:back	vim-colors-solarized/colors/solarized.vim	/^    let s:back        = "NONE"$/;"	v
s:back	vim-colors-solarized/colors/solarized.vim	/^    let s:back        = s:back$/;"	v
s:back	vim-colors-solarized/colors/solarized.vim	/^    let s:back        = s:base02$/;"	v
s:back	vim-colors-solarized/colors/solarized.vim	/^    let s:back        = s:base03$/;"	v
s:base0	vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = "#808080"$/;"	v
s:base0	vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = "#839496"$/;"	v
s:base0	vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = "12"$/;"	v
s:base0	vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = "244"$/;"	v
s:base0	vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = "LightBlue"     " 4*$/;"	v
s:base0	vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = s:base1$/;"	v
s:base0	vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = s:temp00$/;"	v
s:base00	vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = "#585858"$/;"	v
s:base00	vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = "#657b83"$/;"	v
s:base00	vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = "11"$/;"	v
s:base00	vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = "240"$/;"	v
s:base00	vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = "LightYellow"   " 3*$/;"	v
s:base00	vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = s:base0$/;"	v
s:base01	vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = "#4e4e4e"$/;"	v
s:base01	vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = "#586e75"$/;"	v
s:base01	vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = "10"$/;"	v
s:base01	vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = "239"$/;"	v
s:base01	vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = "LightGreen"    " 2*$/;"	v
s:base01	vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = s:base00$/;"	v
s:base01	vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = s:base1$/;"	v
s:base02	vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = "#073642"$/;"	v
s:base02	vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = "#262626"$/;"	v
s:base02	vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = "0"$/;"	v
s:base02	vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = "235"$/;"	v
s:base02	vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = "Black"         " 0$/;"	v
s:base02	vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = s:base2$/;"	v
s:base03	vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = "#002b36"$/;"	v
s:base03	vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = "#1c1c1c"$/;"	v
s:base03	vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = "234"$/;"	v
s:base03	vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = "8"$/;"	v
s:base03	vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = "DarkGray"      " 0*$/;"	v
s:base03	vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = s:base3$/;"	v
s:base1	vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = "#8a8a8a"$/;"	v
s:base1	vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = "#93a1a1"$/;"	v
s:base1	vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = "14"$/;"	v
s:base1	vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = "245"$/;"	v
s:base1	vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = "LightCyan"     " 6*$/;"	v
s:base1	vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = s:base2$/;"	v
s:base1	vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = s:temp01$/;"	v
s:base2	vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = "#d7d7af"$/;"	v
s:base2	vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = "#eee8d5"$/;"	v
s:base2	vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = "187"$/;"	v
s:base2	vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = "7"$/;"	v
s:base2	vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = "LightGray"     " 7$/;"	v
s:base2	vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = s:base3$/;"	v
s:base2	vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = s:temp02$/;"	v
s:base3	vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = "#fdf6e3"$/;"	v
s:base3	vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = "#ffffd7"$/;"	v
s:base3	vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = "15"$/;"	v
s:base3	vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = "230"$/;"	v
s:base3	vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = "White"         " 7*$/;"	v
s:base3	vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = s:temp03$/;"	v
s:bb	vim-colors-solarized/colors/solarized.vim	/^    let s:bb          = ""$/;"	v
s:bb	vim-colors-solarized/colors/solarized.vim	/^    let s:bb          = ",bold"$/;"	v
s:block_regex	vim-ruby/indent/ruby.vim	/^let s:block_regex =$/;"	v
s:blue	vim-colors-solarized/colors/solarized.vim	/^    let s:blue        = "#0087ff"$/;"	v
s:blue	vim-colors-solarized/colors/solarized.vim	/^    let s:blue        = "#268bd2"$/;"	v
s:blue	vim-colors-solarized/colors/solarized.vim	/^    let s:blue        = "33"$/;"	v
s:blue	vim-colors-solarized/colors/solarized.vim	/^    let s:blue        = "4"$/;"	v
s:blue	vim-colors-solarized/colors/solarized.vim	/^    let s:blue        = "DarkBlue"      " 4$/;"	v
s:bracket_continuation_regex	vim-ruby/indent/ruby.vim	/^let s:bracket_continuation_regex = '%\\@<!\\%([({[]\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:bright	vim-colors-solarized/colors/solarized.vim	/^    let s:bright      = "* term=bold cterm=bold"$/;"	v
s:browsefilter	vim-ruby/ftplugin/eruby.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	vim-ruby/ftplugin/eruby.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:browsefilter	vim-ruby/ftplugin/eruby.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:c	vim-colors-solarized/colors/solarized.vim	/^    let s:c               = ",undercurl"$/;"	v
s:code	vim-ruby/ftplugin/ruby.vim	/^      let s:code = "print $:.join(%q{,})"$/;"	v
s:colorscheme_list	vim-colors-solarized/colors/solarized.vim	/^let s:colorscheme_list=[$/;"	v
s:continuation_regex	vim-ruby/indent/ruby.vim	/^let s:continuation_regex =$/;"	v
s:cpo_save	vim-ruby/compiler/eruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim-ruby/compiler/rspec.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim-ruby/compiler/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim-ruby/compiler/rubyunit.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim-ruby/ftplugin/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim-ruby/indent/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cyan	vim-colors-solarized/colors/solarized.vim	/^    let s:cyan        = "#00afaf"$/;"	v
s:cyan	vim-colors-solarized/colors/solarized.vim	/^    let s:cyan        = "#2aa198"$/;"	v
s:cyan	vim-colors-solarized/colors/solarized.vim	/^    let s:cyan        = "37"$/;"	v
s:cyan	vim-colors-solarized/colors/solarized.vim	/^    let s:cyan        = "6"$/;"	v
s:cyan	vim-colors-solarized/colors/solarized.vim	/^    let s:cyan        = "DarkCyan"      " 6$/;"	v
s:defaults_list	vim-colors-solarized/colors/solarized.vim	/^let s:defaults_list=[$/;"	v
s:did_snip_helper	snipmate.vim/ftplugin/html_snip_helper.vim	/^let s:did_snip_helper = 1$/;"	v
s:did_snips_mappings	snipmate.vim/after/plugin/snipMate.vim	/^let s:did_snips_mappings = 1$/;"	v
s:end_end_regex	vim-ruby/indent/ruby.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end:\\@!\\>'$/;"	v
s:end_middle_regex	vim-ruby/indent/ruby.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue:\\@!\\>\\|when\\|elsif\\):\\@!\\>'$/;"	v
s:end_skip_expr	vim-ruby/indent/ruby.vim	/^let s:end_skip_expr = s:skip_expr .$/;"	v
s:end_start_regex	vim-ruby/indent/ruby.vim	/^let s:end_start_regex =$/;"	v
s:fg_pdef	vim-colors-solarized/colors/solarized.vim	/^let s:fg_pdef = s:fg_violet$/;"	v
s:fg_phead	vim-colors-solarized/colors/solarized.vim	/^let s:fg_phead = s:fg_orange$/;"	v
s:fg_ptable	vim-colors-solarized/colors/solarized.vim	/^let s:fg_ptable = s:fg_blue$/;"	v
s:green	vim-colors-solarized/colors/solarized.vim	/^    let s:green       = "#5f8700"$/;"	v
s:green	vim-colors-solarized/colors/solarized.vim	/^    let s:green       = "#719e07" "experimental$/;"	v
s:green	vim-colors-solarized/colors/solarized.vim	/^    let s:green       = "2"$/;"	v
s:green	vim-colors-solarized/colors/solarized.vim	/^    let s:green       = "64"$/;"	v
s:green	vim-colors-solarized/colors/solarized.vim	/^    let s:green       = "DarkGreen"     " 2$/;"	v
s:i	vim-colors-solarized/colors/solarized.vim	/^    let s:i           = ""$/;"	v
s:i	vim-colors-solarized/colors/solarized.vim	/^    let s:i           = ",italic"$/;"	v
s:lazycat_list	vim-colors-solarized/colors/solarized.vim	/^let s:lazycat_list=[$/;"	v
s:lines	vim-coffee-script/syntax/eco.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	vim-ruby/ftplugin/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	vim-ruby/syntax/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:magenta	vim-colors-solarized/colors/solarized.vim	/^    let s:magenta     = "#af005f"$/;"	v
s:magenta	vim-colors-solarized/colors/solarized.vim	/^    let s:magenta     = "#d33682"$/;"	v
s:magenta	vim-colors-solarized/colors/solarized.vim	/^    let s:magenta     = "125"$/;"	v
s:magenta	vim-colors-solarized/colors/solarized.vim	/^    let s:magenta     = "5"$/;"	v
s:magenta	vim-colors-solarized/colors/solarized.vim	/^    let s:magenta     = "DarkMagenta"   " 5$/;"	v
s:match_words	vim-ruby/ftplugin/eruby.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	vim-ruby/ftplugin/eruby.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	vim-ruby/ftplugin/eruby.vim	/^let s:match_words = ""$/;"	v
s:n	vim-colors-solarized/colors/solarized.vim	/^    let s:n               = "NONE"$/;"	v
s:non_bracket_continuation_regex	vim-ruby/indent/ruby.vim	/^let s:non_bracket_continuation_regex = '\\%([\\\\.,:*\/%+]\\|\\<and\\|\\<or\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:none	vim-colors-solarized/colors/solarized.vim	/^    let s:none            = "NONE"$/;"	v
s:ob	vim-colors-solarized/colors/solarized.vim	/^    let s:ob              = ""$/;"	v
s:options_list	vim-colors-solarized/colors/solarized.vim	/^let s:options_list=[$/;"	v
s:orange	vim-colors-solarized/colors/solarized.vim	/^    let s:orange      = "#cb4b16"$/;"	v
s:orange	vim-colors-solarized/colors/solarized.vim	/^    let s:orange      = "#d75f00"$/;"	v
s:orange	vim-colors-solarized/colors/solarized.vim	/^    let s:orange      = "166"$/;"	v
s:orange	vim-colors-solarized/colors/solarized.vim	/^    let s:orange      = "9"$/;"	v
s:orange	vim-colors-solarized/colors/solarized.vim	/^    let s:orange      = "LightRed"      " 1*$/;"	v
s:ou	vim-colors-solarized/colors/solarized.vim	/^    let s:ou              = ""$/;"	v
s:ou	vim-colors-solarized/colors/solarized.vim	/^    let s:ou          = ",underline"$/;"	v
s:pat	vim-coffee-script/compiler/coffee.vim	/^let s:pat = '^' . current_compiler$/;"	v
s:r	vim-colors-solarized/colors/solarized.vim	/^    let s:r               = ",reverse"$/;"	v
s:red	vim-colors-solarized/colors/solarized.vim	/^    let s:red         = "#af0000"$/;"	v
s:red	vim-colors-solarized/colors/solarized.vim	/^    let s:red         = "#dc322f"$/;"	v
s:red	vim-colors-solarized/colors/solarized.vim	/^    let s:red         = "1"$/;"	v
s:red	vim-colors-solarized/colors/solarized.vim	/^    let s:red         = "124"$/;"	v
s:red	vim-colors-solarized/colors/solarized.vim	/^    let s:red         = "DarkRed"       " 1$/;"	v
s:ruby_deindent_keywords	vim-ruby/indent/ruby.vim	/^let s:ruby_deindent_keywords =$/;"	v
s:ruby_indent_keywords	vim-ruby/indent/ruby.vim	/^let s:ruby_indent_keywords = '^\\s*\\zs\\<\\%(module\\|class\\|def\\|if\\|for' .$/;"	v
s:ruby_path	vim-ruby/ftplugin/ruby.vim	/^      let s:ruby_path = substitute(&g:path,',,$',',','') . ',' . s:ruby_path$/;"	v
s:ruby_path	vim-ruby/ftplugin/ruby.vim	/^    let s:ruby_path = substitute(join(s:ruby_paths,","), '\\%(^\\|,\\)\\.\\%(,\\|$\\)', ',,', '')$/;"	v
s:ruby_path	vim-ruby/ftplugin/ruby.vim	/^    let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path,',') : g:ruby_path$/;"	v
s:ruby_paths	vim-ruby/ftplugin/ruby.vim	/^        let s:ruby_paths = split(system(prefix."ruby -e '" . s:code . "'"),',')$/;"	v
s:ruby_paths	vim-ruby/ftplugin/ruby.vim	/^        let s:ruby_paths = split(system(prefix.'ruby -e "' . s:code . '"'),',')$/;"	v
s:ruby_paths	vim-ruby/ftplugin/ruby.vim	/^      let s:ruby_paths = split($RUBYLIB,':')$/;"	v
s:rubycomplete_debug	vim-ruby/autoload/rubycomplete.vim	/^let s:rubycomplete_debug = 0$/;"	v
s:rubycomplete_rails_loaded	vim-ruby/autoload/rubycomplete.vim	/^let s:rubycomplete_rails_loaded = 0$/;"	v
s:s	vim-colors-solarized/colors/solarized.vim	/^    let s:s               = ",standout"$/;"	v
s:save_cpo	vim-ruby/ftplugin/eruby.vim	/^let s:save_cpo = &cpo$/;"	v
s:skip_expr	vim-ruby/indent/ruby.vim	/^let s:skip_expr =$/;"	v
s:snippets	snipmate.vim/plugin/snipMate.vim	/^let s:snippets = {} | let s:multi_snips = {}$/;"	v
s:solarized_termtrans_default	vim-colors-solarized/colors/solarized.vim	/^    let s:solarized_termtrans_default = 0$/;"	v
s:solarized_termtrans_default	vim-colors-solarized/colors/solarized.vim	/^    let s:solarized_termtrans_default = 1$/;"	v
s:sp_back	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_back      = ""$/;"	v
s:sp_base0	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base0     = ""$/;"	v
s:sp_base00	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base00    = ""$/;"	v
s:sp_base01	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base01    = ""$/;"	v
s:sp_base02	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base02    = ""$/;"	v
s:sp_base03	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base03    = ""$/;"	v
s:sp_base1	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base1     = ""$/;"	v
s:sp_base2	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base2     = ""$/;"	v
s:sp_base3	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base3     = ""$/;"	v
s:sp_blue	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_blue      = ""$/;"	v
s:sp_cyan	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_cyan      = ""$/;"	v
s:sp_green	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_green     = ""$/;"	v
s:sp_magenta	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_magenta   = ""$/;"	v
s:sp_none	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_none      = ""$/;"	v
s:sp_orange	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_orange    = ""$/;"	v
s:sp_red	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_red       = ""$/;"	v
s:sp_violet	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_violet    = ""$/;"	v
s:sp_yellow	vim-colors-solarized/colors/solarized.vim	/^    let s:sp_yellow    = ""$/;"	v
s:syng_strcom	vim-ruby/indent/ruby.vim	/^let s:syng_strcom = '\\<ruby\\%(Regexp\\|RegexpDelimiter\\|RegexpEscape' .$/;"	v
s:syng_string	vim-ruby/indent/ruby.vim	/^let s:syng_string =$/;"	v
s:syng_stringdoc	vim-ruby/indent/ruby.vim	/^let s:syng_stringdoc =$/;"	v
s:t_none	vim-colors-solarized/colors/solarized.vim	/^    let s:t_none          = "NONE"$/;"	v
s:temp00	vim-colors-solarized/colors/solarized.vim	/^    let s:temp00      = s:base00$/;"	v
s:temp01	vim-colors-solarized/colors/solarized.vim	/^    let s:temp01      = s:base01$/;"	v
s:temp02	vim-colors-solarized/colors/solarized.vim	/^    let s:temp02      = s:base02$/;"	v
s:temp03	vim-colors-solarized/colors/solarized.vim	/^    let s:temp03      = s:base03$/;"	v
s:terminal_italic	vim-colors-solarized/colors/solarized.vim	/^            let s:terminal_italic=1$/;"	v
s:terminal_italic	vim-colors-solarized/colors/solarized.vim	/^    let s:terminal_italic=0 " terminals will be guilty until proven compatible$/;"	v
s:terminal_italic	vim-colors-solarized/colors/solarized.vim	/^    let s:terminal_italic=1 " TODO: could refactor to not require this at all$/;"	v
s:terms_italic	vim-colors-solarized/colors/solarized.vim	/^let s:terms_italic=[$/;"	v
s:terms_noitalic	vim-colors-solarized/colors/solarized.vim	/^let s:terms_noitalic=[$/;"	v
s:u	vim-colors-solarized/colors/solarized.vim	/^    let s:u           = ""$/;"	v
s:u	vim-colors-solarized/colors/solarized.vim	/^    let s:u           = ",underline"$/;"	v
s:undo_ftplugin	vim-ruby/ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	vim-ruby/ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	vim-ruby/ftplugin/eruby.vim	/^let s:undo_ftplugin = ""$/;"	v
s:violet	vim-colors-solarized/colors/solarized.vim	/^    let s:violet      = "#5f5faf"$/;"	v
s:violet	vim-colors-solarized/colors/solarized.vim	/^    let s:violet      = "#6c71c4"$/;"	v
s:violet	vim-colors-solarized/colors/solarized.vim	/^    let s:violet      = "13"$/;"	v
s:violet	vim-colors-solarized/colors/solarized.vim	/^    let s:violet      = "61"$/;"	v
s:violet	vim-colors-solarized/colors/solarized.vim	/^    let s:violet      = "LightMagenta"  " 5*$/;"	v
s:vmode	vim-colors-solarized/colors/solarized.vim	/^    let s:vmode       = "cterm"$/;"	v
s:vmode	vim-colors-solarized/colors/solarized.vim	/^    let s:vmode       = "gui"$/;"	v
s:yellow	vim-colors-solarized/colors/solarized.vim	/^    let s:yellow      = "#af8700"$/;"	v
s:yellow	vim-colors-solarized/colors/solarized.vim	/^    let s:yellow      = "#b58900"$/;"	v
s:yellow	vim-colors-solarized/colors/solarized.vim	/^    let s:yellow      = "136"$/;"	v
s:yellow	vim-colors-solarized/colors/solarized.vim	/^    let s:yellow      = "3"$/;"	v
s:yellow	vim-colors-solarized/colors/solarized.vim	/^    let s:yellow      = "DarkYellow"    " 3$/;"	v
searchsyn	vim-ruby/ftplugin/ruby.vim	/^function! s:searchsyn(pattern,syn,flags,mode)$/;"	f
snipMate#expandSnip	snipmate.vim/autoload/snipMate.vim	/^fun snipMate#expandSnip(snip, col)$/;"	f
snipMate#jumpTabStop	snipmate.vim/autoload/snipMate.vim	/^fun snipMate#jumpTabStop(backwards)$/;"	f
snippets_dir	snipmate.vim/plugin/snipMate.vim	/^	let snippets_dir = substitute(globpath(&rtp, 'snippets\/'), "\\n", ',', 'g')$/;"	v
synname	vim-ruby/ftplugin/ruby.vim	/^function! s:synname()$/;"	f
togglebg#map	vim-colors-solarized/autoload/togglebg.vim	/^function! togglebg#map(mapActivation)$/;"	f
undo	vim-commentary/plugin/commentary.vim	/^function! s:undo()$/;"	f
wrap_a	vim-ruby/ftplugin/ruby.vim	/^function! s:wrap_a(back,forward)$/;"	f
wrap_i	vim-ruby/ftplugin/ruby.vim	/^function! s:wrap_i(back,forward)$/;"	f
