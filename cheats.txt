##### My Cheat Sheets #####

##### Vim
NAVIGATION
  w/W : beginning of the next word. Capital ignores punctuation
  b/B : beginning of previous word. Capital ignores punctuation
  e/E : end of current word. Capital ignores punctuation
TABS
  :tabe <filename> # edit file in new tab
  c-t : open ctrlp-located file in a new tab
  gt/gT # next/previous tab
  #gt # move to that tab number
  :tabc # close tab and all its windows
  c-wT # throw the current split into its own tab

UNDO/REDO
u : undo
c-r : redo

##### Clojure VIM tools
# These all require another terminal window to be running `lein repl`
cpp : executes the form the cursor is on
cqp : single-use repl to try something 
K : show docs for whatever the cursor is on

##### Pry
binding.pry # add to source code or test: pry pauses here
help # show pry help
cd Class # make that class local: cd by itself jumps out
ls <something> # show vars, methods
? <something> # show ri docs
$ <something> # show source

##### TMUX
# ~/.tmux.conf
# prefix: ctrl-t (capslock is remapped to ctrl)
SESSIONS
  tls # from command-line to see a list of sessions
  ta <session name> # from command-line to re-attach to a live session
  tmux new -s <session name>
  prefix d to detach and leave session running
  tmux kill-session -t <session name>
  prefix s # list all (or switch) sessions
  prefix : new -s <session name> # create new session from within tmux session
  prefix & : kill current session (exits vim and tmux back to command-line)
WINDOWS
  prefix c # create window
  prefix , # rename current window
  prefix n,p # next/previous window
  prefix <num> # jump to that window
  prefix f # find window in this session
  prefix w # display all windows in this session
  prefix & # close current window
PANES
  prefix |,- # vertical/horizontal split
  prefix x # close pane: exiting shell also works
  prefix h,j,k,l # move to pane in that direction
  prefix H,J,K,L # resize pane by moving panel border that direction
  prefix z # toggle zoom of current pane

##### Gist.vim (https://github.com/vim-scripts/Gist.vim)
:Gist # Send entire file to gist. Run with area selected to send part of file
:Gist -s "some description" # create gist with description
:Gist -e -s "new description" # push edits and update description
:Gist -l # Show all my public gists
:Gist -l <user> # Show all user's public gists
:Gist -f # fork opened gist
:Gist 99999 # Get gist #99999

##### Capybara (https://github.com/jnicklas/capybara)
# require 'capybara/rspec' # in spec_helper
# for rails, put capybara specs in spec/features
# outside rails, tag all groups with :type => :feature
# outside rails, add to spec_helper: Capybara.app = MyRackApp
# for js specs, tag with :js => true
NAVIGATION
  visit "/blog"
  visit blogs_path
  click_link "Sign in"
PAGE INTERACTION AND SCOPING
  within("footer") { expect(page).to have_content("Copyright") }
  page.has_content?("Sign in")
  wait_until { page.has_content?("Data loaded!") }
PAGE MATCHERS
  expect(page).to have_content("What are you looking for?")
  expect(page).to have_css("header")
  expect(page).to have_css("table#records + .pagination a[rel='next']")
NODE INTERACTIONS
  find("article a.title").click
  find("input[name='post[title]']").trigger("focus")
  wait_until { find(".navigation").visible? } # useful for JavaScript-created elements
FORM INTERACTIONS
  fill_in "Title", :with => "I love RSpec!" # text/textareas
  fill_in "post[title]", :with => "I love RSpec!" # text/textareas
  check "I accept the terms of the site" # check boxes
  uncheck "Please spam me" # check boxes
  select "Moderate", :from => "Political Party" # select boxes
  select "MI", :from => "State" # select boxes
  choose "Very Interested" # radio buttons
  click_on "Create my account" # works with buttons or links
DEBUGGING
  save_and_open_page

##### Zencoding (aka Emmet.vim)
Everything fired with ctrl+y ,
html:5 # generate standard html file
div#foo.bar # <div id='foo' class='bar'></div>
ol>li#foo$*2 # <ol><li id='foo1'></li><li id='foo2'></li></ol>
